{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "MobiControl REST API Reference",
    "description": "<p>Integration of common device lifecycle management functions within your organization’s mobility workflow is made possible with the MobiControl REST API that is exposed over HTTPS as a set of <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a>ful web services.<br><br>The MobiControl REST API is designed to have predictable resource-oriented URLs and standard HTTP response codes. The API is protected by <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749\">OAuth2</a> and is <a target=\"_blank\" href=\"http://swagger.io/\">swagger</a>-specification compliant for integration with off-the-shelf HTTP clients.<br><br>This documentation provides you with detailed information on the MobiControl REST API available with your MobiControl environment, and gives you the ability to interact with the API calls on this page to test their functionality.<br><br><b style=\"color:red\">WARNING: API calls sent from this page are executed against your MobiControl environment. Exercise extreme caution when executing each API call against a production environment and/or device.</b><br><br>For consultation and/or support of your MobiControl integration please <a target=\"_blank\" href=\"http://www.soti.net/about-us/contact\">contact</a> SOTI’s Professional Services and Support teams.</p>\r\n<span class=\"info_title\"><br>Authentication</span>\r\n<span class=\"info_description markdown\">\r\n   <p>MobiControl API calls are protected by <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749\">OAuth2 (RFC 6749)</a>, and support both <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">Resource Owner</a>, and <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-4.1\">Authorization Code</a> grant types. In both scenarios the \"Resource Owner\" is a named MobiControl administrator account and the \"authorization server\" is MobiControl which will authenticate users locally, or if configured through a 3rd party identity provider.<br><br>To successfully call the MobiControl API you must authenticate to the authorization server and receive an access token to use in subsequent API calls. At a minimum you must:<br>&nbsp;&nbsp;&nbsp;- possess a MobiControl administrator’s username and password that is either provided directly to MobiControl, or to a configured identity provider<br>&nbsp;&nbsp;&nbsp;- have added your application as an API client, and possess its client ID and client secret.</p>\r\n</span>\r\n<br>\r\n<H2><b>API Client</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>An API client is a combination of a client ID and a client secret that uniquely identifies your integrated application to MobiControl and authorizes it to make API calls. It is required in addition to the MobiControl administrator credentials when obtaining an access token to authenticate subsequent API calls.<br><br>It is highly recommended that you independently register each integrated application you develop so it can be independently revoked should it be compromised.</p>\r\n</span>\r\n<br><br><b>Adding an API Client</b>\r\n<span class=\"info_description markdown\">\r\n   <p>To add an API client, you must have administrative access to the Windows server where MobiControl is hosted. If you are a MobiControl cloud customer, please <a target=\"_blank\" href=\"http://www.soti.net/about-us/contact\">contact</a> SOTI support to add an API client.<br><br>Adding an API client is achieved by launching the MobiControl Administration Utility (MCAdmin) through the command line with additional parameters.<br><br>Start by launching a Windows command prompt with administrative privileges, and navigate to the MobiControl installation directory. Execute the following command where:<br>&nbsp;&nbsp;&nbsp;- “API client name” is a reference for your integrated application<br>&nbsp;&nbsp;&nbsp;- “API secret” (optional) is the passphrase that will be used to protect the API. This should be stored securely and is irrecoverable if lost. An API secret will be generated for you if one was not provided.<br>&nbsp;&nbsp;&nbsp;- “Redirect URI” is the destination endpoint the authorization server will return the user agent to<br><br></p>\r\n</span>\r\n<pre>MCAdmin.exe APIClientAdd -n:{API client name} [-p:{API secret}] [-r:{Redirect URI}]</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>If MCAdmin was started with the “APIClientAdd” command and the correct parameters, a summary of the executed operation will be presented that reports the client ID and client secret that were generated. For example:<br><br></p>\r\n</span>\r\n<pre>API Client was added\r\nClient ID: a9326fd5872f4a66b6bab3e2c8065e63\r\nClient secret: 19DzUX7K7ObjwPRFbxZanwVQFsUcqMak</pre>\r\n<br><br><b>Removing an API Client</b>\r\n<span class=\"info_description markdown\">\r\n   <p>Similarly, should you wish to revoke an API client from making API calls, you can utilize the APIClientRemove command.<br><br>Start by launching a Windows command prompt with administrative privileges, and navigate to the MobiControl installation directory. Execute the following command where “client ID” is the ID for your integrated application.<br><br></p>\r\n</span>\r\n<pre>MCAdmin.exe APIClientRemove -i:{client id}</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>If MCAdmin was started with the APIClientRemove command and the correct parameters, a summary of the executed operation will be presented that reports whether the client was removed successfully.</p>\r\n</span>\r\n<br>\r\n<H2><b>Access Token (aka “bearer”)</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>Before executing a resource-based API call, you must first obtain an access token by making a specific request to the authorization server.<br><br>For Resource Owner grant type, the authorization server for requesting access tokens is hosted at “/token” and can be called directly with the administrative credentials. (For example: https://server.domain.tld/MobiControl/api/token).<br><br>For Authorization Code grant type you must first make a GET request to “/authorize” that contains your client ID.<br><br>For example \"GET https://server.domain.tld/mobicontrol/oauth/authorize?response_type=code&client_id=abc&state=xyz\". You may preserve the state of your application in the “state” property of the request.<br><br>If an external identity provider is configured you will be redirected to their login page, and upon successful authentication will be provided with an authorization code to exchange for an access token. If an external identity provider is not configured, you will be redirected to MobiControl's login page.<br><br>Access tokens are time sensitive with the validity contained in the response. In case of expiration, the value used by the client must be refreshed with another token request.</p>\r\n</span>\r\n<br><br><b>Request an Access Token</b>\r\n<span class=\"info_description markdown\">\r\n   <p>Make a POST request that includes an “Authorization:” header containing the API client ID and secret, and the body containing either MobiControl administrator credentials or an authorization code.<br><br>The Authorization header field must be constructed as follows:<br>&nbsp;&nbsp;&nbsp;- Combine the “client ID” and “client secret” into a string separated by a colon. For example: “ClientID:ClientSecret”. Note that these fields cannot otherwise contain a colon.<br>&nbsp;&nbsp;&nbsp;- Encode the resulting string using the RFC2045-MIME variant of <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Base64\">Base64</a>, except not limited to 76 char/line.<br>&nbsp;&nbsp;&nbsp;- Prefix “Basic”  before the encoded string.<br><br>The body of the request must contain the following parameters and will depend on your grant type. For “Resource Owner” grant type:<br>&nbsp;&nbsp;&nbsp;- grant_type: set to “password”<br>&nbsp;&nbsp;&nbsp;- username: of the MobiControl administrator (“administrator” in the example below)<br>&nbsp;&nbsp;&nbsp;- password: of the MobiControl administrator (“1” in the example below)<br><br>For “Authorization Code” grant type:<br>&nbsp;&nbsp;&nbsp;- grant_type: set to “authorization_code&=[authorization code]”<br><br>Example of the request for “Resource Owner” grant type:<br><br></p>\r\n</span>\r\n<pre>POST https://server.domain.tld/MobiControl/api/token HTTP/1.1\r\nHost: server.domain.tld\r\nAuthorization: Basic QXBwbGljYXRpb24xOkFwcGxpY2F0aW9uMVBhc3N3b3Jk\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 53\r\ngrant_type=password&username=Administrator&password=1</pre>\r\n<span class=\"info_description markdown\">\r\n   <p>Example of the request for “Authorization Code” grant type:</p>\r\n</span>\r\n<pre>POST https://server.domain.tld/MobiControl/api/token HTTP/1.1\r\nHost: server.domain.tld\r\nAuthorization: Basic QXBwbGljYXRpb24xOkFwcGxpY2F0aW9uMVBhc3N3b3Jk\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 53\r\ngrant_type=authorization_code&code=[authorization code]</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>In response, the output will contain the following properties:<br>&nbsp;&nbsp;&nbsp;- access_token: The access token to be used in every subsequent API request.<br>&nbsp;&nbsp;&nbsp;- token_type: The type of token. Will always be set to “bearer”.<br>&nbsp;&nbsp;&nbsp;- expires_in: The value in seconds of the token validity. If the token is expired, the client needs to issue an additional token request to retrieve a new token value.<br><br>Example of the response:<br><br></p>\r\n</span>\r\n<pre>{\"access_token\":\"AAEAAK0OiDDPciqCR5sZ6Nu6c8wIvURVwCTxslETUGp\r\nxDfmf6uzkXAg9MKzfJqm4k9ADBYIaOsT20wllKWQgQvH5sYkaIWxtOZ9OntAkxwPn\r\nwBRO7rNqCGj9yfg-COpYCdr2GEMl5SzaAPx2_WBQ3SwhKuGWuuDxVMzRWdAW1r36J\r\nY6N9Fp-rYK3CtoNs4ibqswOs7qSPzuwo_K9l9_c5oCz7d6qJxJdhKoh3MC8vqFXxJ\r\nSXIEAwXnL7KWtrhanIcj_m0abZWfvR7e5npIHDcHH-bfVmc6wp-SsKJ-FyG7_zg2F\r\nd8HjvoqivTqRO5i1RSpaPpOa318g2FMIw-Lh6I5K0FAOUAQAAAAEAABW2-Dr_0-vr\r\nbZGMubz8ZGqpo6Z67n3JqBIFPgMOPotNHVJSUc_2HbozYt7smfuCIeIvE0gd84ti3\r\nLBJXSkiOBPJmxp-WhdC1IbB7y2W5G8D4l5MD3VbDTz6ov_VnZGpRc-h7Q9Knn1Vyk\r\nQTHo4NknDUdVkqDe3VHQsjtn12QINEzb04Ch-RpudIHnKG-P-jhIIszo2M0_Po8_U\r\naHVwrpPtwhUCzqOU_Gus1nS694dP-8rXqjtbLxh_5GB1iQQBitMd-VgD8XzQrLqqH\r\na6HcK1C41ZyA1Ot2_47vOKNrf_Mg6Ig8quYMpUypOdwFl9_Nb815TN-eSuDwQsSKn\r\nSnHDvTH8bSz9O0vHoiPexh2Weuf2N0KGZUlpC0OLy3oRb0d_aBOUdpnoIJ59Gc95H\r\n7yTAnNPRuBnX0wDnvTFNkuN7ezKzfP2rNmfKPeoj0Xyf2FhGiSHgBJUuNpWwGJkz5\r\n0tVX5nPl42Ow2ua9pLZqPg-GJQnmXwukVgV6w4dDoRsFVYbrRSdp-quU4pyNfj987\r\nGWM\",\"token_type\":\"bearer\",\"expires_in\":3600}</pre>\r\n<br><br><b>Using an Access Token</b>\r\n<span class=\"info_description markdown\">\r\n   <p>After retrieving an access token it can be used to authenticate every other API call by including it in the “Authorization:” header of that call with the type “Bearer”.<br><br>Example of a subsequent API request:<br><br></p>\r\n</span>\r\n<pre>GET https://server.domain.tld/MobiControl/api/devicegroups HTTP/1.1\r\nHost: server.domain.tld\r\nAuthorization: Bearer AAEAAK0OiDDPciqCR5sZ6Nu6c8wIvURVwCTxslETUGp\r\nxDfmf6uzkXAg9MKzfJqm4k9ADBYIaOsT20wllKWQgQvH5sYkaIWxtOZ9OntAkxwPn\r\nwBRO7rNqCGj9yfg-COpYCdr2GEMl5SzaAPx2_WBQ3SwhKuGWuuDxVMzRWdAW1r36J\r\nY6N9Fp-rYK3CtoNs4ibqswOs7qSPzuwo_K9l9_c5oCz7d6qJxJdhKoh3MC8vqFXxJ\r\nSXIEAwXnL7KWtrhanIcj_m0abZWfvR7e5npIHDcHH-bfVmc6wp-SsKJ-FyG7_zg2F\r\nd8HjvoqivTqRO5i1RSpaPpOa318g2FMIw-Lh6I5K0FAOUAQAAAAEAABW2-Dr_0-vr\r\nbZGMubz8ZGqpo6Z67n3JqBIFPgMOPotNHVJSUc_2HbozYt7smfuCIeIvE0gd84ti3\r\nLBJXSkiOBPJmxp-WhdC1IbB7y2W5G8D4l5MD3VbDTz6ov_VnZGpRc-h7Q9Knn1Vyk\r\nQTHo4NknDUdVkqDe3VHQsjtn12QINEzb04Ch-RpudIHnKG-P-jhIIszo2M0_Po8_U\r\naHVwrpPtwhUCzqOU_Gus1nS694dP-8rXqjtbLxh_5GB1iQQBitMd-VgD8XzQrLqqH\r\na6HcK1C41ZyA1Ot2_47vOKNrf_Mg6Ig8quYMpUypOdwFl9_Nb815TN-eSuDwQsSKn\r\nSnHDvTH8bSz9O0vHoiPexh2Weuf2N0KGZUlpC0OLy3oRb0d_aBOUdpnoIJ59Gc95H\r\n7yTAnNPRuBnX0wDnvTFNkuN7ezKzfP2rNmfKPeoj0Xyf2FhGiSHgBJUuNpWwGJkz5\r\n0tVX5nPl42Ow2ua9pLZqPg-GJQnmXwukVgV6w4dDoRsFVYbrRSdp-quU4pyNfj987\r\nGWM\r\nContent-Length: 0</pre>\r\n<br><span class=\"info_title\"><br>API Errors</span>\r\n<span class=\"info_description markdown\">\r\n   <p>MobiControl uses conventional HTTP response codes to indicate the success or failure of an API request. In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error resulted from the information provided, and codes in the 5xx range may indicate an error with MobiControl that cannot be resolved by changing the request.<br><br>For troubleshooting purposes, the following provides guidance on the conditions under which MobiControl will return a respective HTTP error code.</p>\r\n</span>\r\n<br>\r\n<H2><b>HTTP 400</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>Generally used to reflect a contract validation error. The data provided in the request was not compliant with the expected input of the method. Normally this is an integration error and can be resolved only programmatically on the client side. Check to ensure the parameters, values, and syntax conform to the expected model.<br><br>In addition to the HTTP 400 response, the body will contain a single error object that reports all the violations in the following format:<br>&nbsp;&nbsp;&nbsp;- <b>ErrorCode</b> (mandatory): set to 0.<br>&nbsp;&nbsp;&nbsp;- <b>ErrorMessage</b> (mandatory): the error message.<br>&nbsp;&nbsp;&nbsp;- <b>Data[]</b> (optional): extra parameters needed to troubleshoot the problem.<br>&nbsp;&nbsp;&nbsp;- <b>HelpLink</b> (optional): a link to possible troubleshooting steps.</p>\r\n</span>\r\n<br>\r\n<H2><b>HTTP 401 / HTTP 403</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>Security errors. These errors are generated when the login failed, or is required, or if the user is not authorized to perform the action requested.<br><br>In addition to the HTTP 401 or HTTP 403 response, the body will contain a single error object to report an error message:<br>&nbsp;&nbsp;&nbsp;- <b>ErrorMessage</b> (mandatory): the error message.<br><br>Please note that the error message may be intentionally vague for security purposes. For additional information consult the environment’s management service log.</p>\r\n</span>\r\n<br>\r\n<H2><b>HTTP 422</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>This type of error is used to represent a business logic error, where the request is correct but it is not possible for the server to complete the request because it violates a logical condition. For example, trying to delete an object with dependencies that would prevent such an object from being deleted.<br><br>In addition to the HTTP 422 response, the body will contain a single error object in the following format:<br>&nbsp;&nbsp;&nbsp;- <b>ErrorCode</b> (mandatory): the error code specific to the problem encountered.<br>&nbsp;&nbsp;&nbsp;- <b>ErrorMessage</b> (mandatory): the error message.<br>&nbsp;&nbsp;&nbsp;- <b>Data[]</b> (optional): extra parameters needed to troubleshoot the problem.<br>&nbsp;&nbsp;&nbsp;- <b>HelpLink</b> (optional): a link to possible troubleshooting steps.</p>\r\n</span>\r\n<br>\r\n<H2><b>HTTP 500</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>This type of error will be returned when the MobiControl server is unable to process a request.<br><br>In addition to the HTTP 500 response, the body will contain a single error object that reports an error message:<br>&nbsp;&nbsp;&nbsp;- <b>ErrorMessage</b> (mandatory): set to “Internal Server Error”.<br><br>For additional information consult the environment’s management service log. Report these errors by <a target=\"_blank\" href=\"http://www.soti.net/about-us/contact\">contacting</a> the SOTI Support team, and include environmental details, the raw HTTP request, and management service logs.</p>\r\n</span>\r\n<span class=\"info_title\"><br>Pagination, Ordering, and Filtering</span>\r\n<span class=\"info_description markdown\">\r\n   <p>Unless otherwise noted, MobiControl API resources have support for bulk fetches, to “list” all devices found in the environment for example.<br><br>These “list” API methods use cursor-based pagination, a common structure to define ordering, and property-based filtering which is defined as follows:<br>&nbsp;&nbsp;&nbsp;- <b>skip</b> (optional): where in the list you would like to begin. The value will tell the server to remove the first X records retrieved from the result.<br>&nbsp;&nbsp;&nbsp;- <b>take</b> (optional): the size of the list you would like returned.<br>&nbsp;&nbsp;&nbsp;- <b>order</b> (optional): the ordering criteria in the format {direction (+/-)}{property name}, where “+” is ascending and “-” is descending.<br>&nbsp;&nbsp;&nbsp;- <b>filter</b> (optional): filter expression, the syntax is different for GET /api/devices/search endpoint (advanced search expressions) and GET /api/devices (name-value pairs)<br><br>Example of /api/device/search query parameters: <br><br></p>\r\n</span>\r\n<pre>filter=Manufacturer%3D%27Apple%27&order=+osversion,-model&skip=20&take=10</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>In the example above we're looking for devices manufactured by \"Apple\". The devices are first ordered ascending by OS version, then ordered descending by model. Then, the first 20 records are skipped and the next 10 records are returned.</p>\r\n</span>\r\n<span class=\"info_title\"><br>Resources and API Calls</span>\r\n<span class=\"info_description markdown\">\r\n   <p>The documentation that follows defines all endpoints, parameters and error messages available in the MobiControl REST API.<br><br>If you have a valid client ID, client secret, and MobiControl administrator credentials, you can test each API call by providing these values in the text field at the top right of this page.<br><br><b style=\"color:red\">WARNING: API calls sent from this page are executed against your MobiControl environment. Exercise extreme caution when executing each API call against a production environment and/or device.</b><br></p>\r\n</span>"
  },
  "host": "52.65.215.202:443",
  "basePath": "/MobiControl/api",
  "schemes": [
    "https"
  ],
  "paths": {
    "/androidEnterpriseCertificates/{oem}": {
      "get": {
        "tags": [
          "AndroidEnterpriseCertificates"
        ],
        "summary": "Gets Android Enterprise Migration certificate information for an OEM",
        "description": "Returns Android Enterprise Migration certificate information for an OEM. A single OEM can have multiple manufacturers e.g. Honeywell OEM can have 'Honeywell, Inc' or intermec or Honeywell. Zebra can have 'Zebra Technologies'. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.4.2)</b>",
        "operationId": "AndroidEnterpriseCertificates_GetCertificate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "oem",
            "in": "path",
            "description": "The Android OEM",
            "required": true,
            "x-enumType": "AndroidOEM",
            "type": "string",
            "enum": [
              "ACER",
              "AMAZON",
              "BQ",
              "CASIO",
              "CROSSMATCH",
              "DATALOGIC",
              "DRS",
              "ELO",
              "GARMIN",
              "GENERIC",
              "GETAC",
              "GOOGLE",
              "HONEYWELL",
              "HUAWEI",
              "HUAWEIEMUI",
              "INTERMEC",
              "JANAM",
              "KYOCERA",
              "KYOCERAPS",
              "LENOVO",
              "LG",
              "M3",
              "Matsunichi",
              "MOTOROLA",
              "PANASONIC",
              "PIDION",
              "POINTMOBILE",
              "SAMSUNG",
              "SONIM",
              "SONY",
              "SOTI",
              "UNITECH",
              "UROVO",
              "WORKMATE",
              "ZEBRA"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single certificate information of the OEM",
            "schema": {
              "$ref": "#/definitions/AndroidEnterpriseCertificateInfo"
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AndroidEnterpriseCertificates"
        ],
        "summary": "Uploads Android Enterprise Migration Certificate for an OEM",
        "description": "Uploads Android Enterprise Migration Certificate for an OEM. A single OEM can have multiple manufacturers e.g. Honeywell OEM can have 'Honeywell, Inc' or intermec or Honeywell. Zebra can have 'Zebra Technologies'. Requires the caller be granted the \"Global Setting\" permission.<br /><b>(Available Since MobiControl v14.4.2)</b>",
        "operationId": "AndroidEnterpriseCertificates_UploadCertificate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "oem",
            "in": "path",
            "description": "The Android OEM",
            "required": true,
            "x-enumType": "AndroidOEM",
            "type": "string",
            "enum": [
              "ACER",
              "AMAZON",
              "BQ",
              "CASIO",
              "CROSSMATCH",
              "DATALOGIC",
              "DRS",
              "ELO",
              "GARMIN",
              "GENERIC",
              "GETAC",
              "GOOGLE",
              "HONEYWELL",
              "HUAWEI",
              "HUAWEIEMUI",
              "INTERMEC",
              "JANAM",
              "KYOCERA",
              "KYOCERAPS",
              "LENOVO",
              "LG",
              "M3",
              "Matsunichi",
              "MOTOROLA",
              "PANASONIC",
              "PIDION",
              "POINTMOBILE",
              "SAMSUNG",
              "SONIM",
              "SONY",
              "SOTI",
              "UNITECH",
              "UROVO",
              "WORKMATE",
              "ZEBRA"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "File was uploaded successfully",
            "schema": {
              "$ref": "#/definitions/AndroidEnterpriseCertificateInfo"
            }
          },
          "400": {
            "description": "Bad request, i.e. invalid file or file content"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "415": {
            "description": "Unsupported content media type"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/availableFirmwareVersions": {
      "get": {
        "tags": [
          "SamsungAndroidFirmwareUpgrade"
        ],
        "summary": "Get Android Firmware Versions",
        "description": "Returns a list of Android Firmware Versions for a client type by model, carrier and current firmware version. Requires the caller be granted \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.1.5)</b>",
        "operationId": "SamsungAndroidFirmwareUpgrade_GetAndroidFirmwareVersions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientType",
            "in": "query",
            "description": "Client Type",
            "required": true,
            "x-enumType": "AndroidFirmwareUpgradeClientType",
            "type": "string",
            "enum": [
              "None",
              "Samsung",
              "Zebra"
            ]
          },
          {
            "name": "model",
            "in": "query",
            "description": "Model",
            "required": true,
            "type": "string"
          },
          {
            "name": "carrierCode",
            "in": "query",
            "description": "Carrier Code",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentFirmwareVersion",
            "in": "query",
            "description": "Current Firmware Version",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "licenseName",
            "in": "query",
            "description": "License Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AndroidFirmwareVersion"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/clients/{clientType}": {
      "put": {
        "tags": [
          "AndroidFirmwareUpgradeClient"
        ],
        "summary": "Adds or replaces the Android Firmware Upgrade Client",
        "description": "Adds or update the Android Firmware Upgrade Client of OEM with MobiControl.\r\n            <br />Requires the caller to be granted \"Manage Servers and Global Settings\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidFirmwareUpgradeClient_AddClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "clientType",
            "in": "path",
            "description": "Android Firmware Upgrade Client Type.",
            "required": true,
            "x-enumType": "AndroidFirmwareUpgradeClientType",
            "type": "string",
            "enum": [
              "None",
              "Samsung",
              "Zebra"
            ]
          },
          {
            "name": "client",
            "in": "body",
            "description": "Android Firmware Upgrade Client. User can provide the \"%USE_EXISTING%\" in case the existing value is to be used",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeClient"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns android firmware upgrade client response"
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/clients/{clientType}/actions/sync": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeClient"
        ],
        "summary": "Synchronize Android firmware upgrade client",
        "description": "Synchronize Enrollment &amp; FOTA Ready status and target firmware version for target devices.\r\n            <br />Requires the caller to be granted Web Console Access Permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidFirmwareUpgradeClient_SyncClient",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "clientType",
            "in": "path",
            "description": "Android Firmware Upgrade Client Type",
            "required": true,
            "x-enumType": "AndroidFirmwareUpgradeClientType",
            "type": "string",
            "enum": [
              "None",
              "Samsung",
              "Zebra"
            ]
          }
        ],
        "responses": {
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3716 - Android Firmware Upgrade Zebra Synchronization is In-Progress State.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/clients/{clientType}/status": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeClient"
        ],
        "summary": "Retrieve Android firmware upgrade client status",
        "description": "Retrieve OEM's Android firmware upgrade client registration status.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidFirmwareUpgradeClient_GetClientStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientType",
            "in": "path",
            "description": "Android Firmware Upgrade Client Type",
            "required": true,
            "x-enumType": "AndroidFirmwareUpgradeClientType",
            "type": "string",
            "enum": [
              "None",
              "Samsung",
              "Zebra"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns android firmware upgrade client response",
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeClientStatus"
            }
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/clients/{clientType}/summary": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeClient"
        ],
        "summary": "Retrieve Android firmware upgrade client summary",
        "description": "Retrieve the count of target devices, enrolled devices and FOTA Ready devices.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidFirmwareUpgradeClient_GetClientSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientType",
            "in": "path",
            "description": "Android Firmware Upgrade ClientType",
            "required": true,
            "x-enumType": "AndroidFirmwareUpgradeClientType",
            "type": "string",
            "enum": [
              "None",
              "Samsung",
              "Zebra"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Zebra Android firmware upgrade client summary",
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeClientSummary"
            }
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/clients/zebra/actions/syncStatus": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeClient"
        ],
        "summary": "Retrieve Android firmware upgrade zebra synchronization status",
        "description": "Returns the status of Android firmware upgrade synchronization process.\r\n            <br />Requires the caller to be granted Web Console Access Permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidFirmwareUpgradeClient_GetSyncStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Returns zebra android firmware upgrade synchronization status",
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeClientSyncStatus"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3717 - Android Firmware Upgrade Zebra Synchronization Process is not initiated.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/clients/zebra/authorizationGrant": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeClient"
        ],
        "summary": "Retrieve Android firmware upgrade Zebra authorization grant",
        "description": "Retrieve authorization grant from Zebra to generate access token required for firmware upgrade.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidFirmwareUpgradeClient_GetAuthorizationGrant",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Returns Zebra Android firmware upgrade authorization grant",
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeAuthorizationGrant"
            }
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/licenses": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeLicense"
        ],
        "summary": "Retrieve List of Android Firmware Upgrade License",
        "description": "Returns a list of Android Firmware Upgrade License as per the minimum number of license required for a given client type. Requires the caller be granted \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.1.5)</b>",
        "operationId": "AndroidFirmwareUpgradeLicense_GetLicenses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientType",
            "in": "query",
            "description": "Android Firmware Upgrade Client type",
            "required": true,
            "x-enumType": "AndroidFirmwareUpgradeClientType",
            "type": "string",
            "enum": [
              "None",
              "Samsung",
              "Zebra"
            ]
          },
          {
            "name": "minimumRequiredNumberOfLicenses",
            "in": "query",
            "description": "Minimum number of licenses required. 0 means get all license having any number of available license",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeLicense"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "AndroidFirmwareUpgradeLicense"
        ],
        "summary": "Add an Android Firmware Upgrade License",
        "description": "Adds an Android Firmware Upgrade License and. Requires the caller be granted \"Manage Servers and Global Settings\" permission.<br /><b>(Available Since MobiControl v14.1.5)</b>",
        "operationId": "AndroidFirmwareUpgradeLicense_AddLicense",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "upgradeLicense",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeLicense"
            }
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/licenses/{licenseName}/groups": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeLicense"
        ],
        "summary": "Retrieve List of Android Firmware Upgrade License Groups",
        "description": "Returns a list of Android Firmware Upgrade License Groups for a particular License. Requires the caller be granted \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.1.5)</b>",
        "operationId": "AndroidFirmwareUpgradeLicense_GetLicenseGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "licenseName",
            "in": "path",
            "description": "License Name for which groups to be retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeGroup"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "AndroidFirmwareUpgradeLicense"
        ],
        "summary": "Add a Group Associated with License",
        "description": "Adds an Android Firmware Upgrade License Group. Requires the caller be granted \"Manage Servers and Global Settings\" permission.<br /><b>(Available Since MobiControl v14.1.5)</b>",
        "operationId": "AndroidFirmwareUpgradeLicense_AddLicenseGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "licenseName",
            "in": "path",
            "description": "License Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "licenseGroup",
            "in": "body",
            "description": "License Group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeLicenseGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeGroup"
            }
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/licenses/{licenseName}/groups/{groupId}": {
      "put": {
        "tags": [
          "AndroidFirmwareUpgradeLicense"
        ],
        "summary": "Move Android Firmware Upgrade License Group",
        "description": "Edit Android Firmware Upgrade License and Requires the caller be granted \"Manage Servers and Global Settings\" permission.<br /><b>(Available Since MobiControl v15.2.0)</b>",
        "operationId": "AndroidFirmwareUpgradeLicense_MoveLicenseGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "licenseName",
            "in": "path",
            "description": "License Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "licenseChange",
            "in": "body",
            "description": "Android Firmware Upgrade License Change",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AndroidFirmwareUpgradeLicenseChange"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AndroidFirmwareUpgradeLicense"
        ],
        "summary": "Delete a Group for a License",
        "description": "Delete an Android Firmware Upgrade License Group. Requires the caller be granted \"Manage Servers and Global Settings\" permission.<br /><b>(Available Since MobiControl v14.1.5)</b>",
        "operationId": "AndroidFirmwareUpgradeLicense_DeleteLicenseGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "licenseName",
            "in": "path",
            "description": "License Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/licenses/{licenseName}/sync": {
      "post": {
        "tags": [
          "AndroidFirmwareUpgradeLicense"
        ],
        "summary": "Sync an Android Firmware Upgrade License Device Count",
        "description": "Sync an Android Firmware Upgrade License and. Requires the caller be granted \"Manage Servers and Global Settings\" permission.<br /><b>(Available Since MobiControl v15.2.0)</b>",
        "operationId": "AndroidFirmwareUpgradeLicense_Sync",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "licenseName",
            "in": "path",
            "description": "Android Firmware Upgrade License Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/setAndroidFirmwwareUpgrades": {
      "post": {
        "tags": [
          "SamsungAndroidFirmwareUpgrade"
        ],
        "summary": "Set Android Firmware Upgrades",
        "description": "Set android firmware upgrades to be performed. Requires the caller be granted \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.1.5)</b>",
        "operationId": "SamsungAndroidFirmwareUpgrade_SetAndroidFirmwwareUpgrades",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "firmwareUpgrades",
            "in": "body",
            "description": "list of Firmware Upgrade",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeRequest"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/androidFirmwareUpgrade/zebra/availableFirmwareVersions": {
      "get": {
        "tags": [
          "AndroidFirmwareUpgradeClient"
        ],
        "summary": "Retrieve Android firmware versions  zebra",
        "description": "Retrieve available target firmware versions for a Zebra device.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidFirmwareUpgradeClient_GetAndroidFirmwareVersions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentFirmwareVersion",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AndroidFirmwareVersionContract"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/apple/apns/certificateSigningRequests": {
      "get": {
        "tags": [
          "ApnsConfiguration"
        ],
        "summary": "Returns a Certificate Signing Request (CSR).",
        "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "ApnsConfiguration_IssueCertificateSigningRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Base64 encoded CSR content",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          }
        },
        "deprecated": false
      }
    },
    "/apple/apns/configurations": {
      "get": {
        "tags": [
          "ApnsConfiguration"
        ],
        "summary": "Returns a list of all available APNS configurations",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "ApnsConfiguration_GetConfigurations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "All APNS configurations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConfigurationInfo"
              }
            }
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "ApnsConfiguration"
        ],
        "summary": "Creates a new Apple Push Notification Service configuration",
        "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li>Supported values of Content-Type for certificate part of request's body: application/x-pem-file, application/x-pkcs12.</li><li>The appropriate content-type value should be chosen in accordance with the certificate type being uploaded.</li><li>Metadata part of request's body contains a JSON object with optional AppleId and CertificatePassword fields and should be identified by <code>Content-Type: application/x-pkcs12.metadata+json (or application/x-pem-file.metadata+json)</code></li></ol></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            <br />\r\n            {\"CertificatePassword\":\"password\", \"AppleId\":\"some@id.com\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n               Content-Type: application/x-pkcs12\r\n               Content-Transfer-Encoding: base64\r\n               Content-Disposition: attachment; filename=\"cert.pfx\"\r\n            <br />\r\n            BASE64_ENCODED_CERTIFICATE_CONTENT_HERE\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
        "operationId": "ApnsConfiguration_CreateConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Created configuration object.",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request's header's content type is incorrect or malformed</li><li>If the request's body is missing a certificate</li><li>If the request's body is missing a certificate password (for the case of pfx files)</li><li>If the request's body contains a certificate password that exceeds 512 characters</li><li>If the request's body contains a an Apple ID that exceeds 256 characters</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5800 - If the request's body contains an invalid certificate file type.</li><li>5801 - If the request's body contains a certificate with an invalid topic string</li><li>5802 - If the request's body contains a certificate that was not generated using a downloaded CSR</li><li>5803 - If the request's body contains an invalid password for the provided certificate</li><li>5805 - If MobiControl cannot establish a connection with APNS to determine whether the certificate is valid</li><li>5806 - If Apple rejects the connection to an invalid certificate</li><li>5807 - If there already exists an APNS configuration</li><li>5808 - If APNS certificate is expired.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/apns/configurations/{referenceId}": {
      "get": {
        "tags": [
          "ApnsConfiguration"
        ],
        "summary": "Returns the specified APNS configuration as referenced by {referenceId}",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "ApnsConfiguration_GetConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Configuration reference ID in Microsoft GUID format.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration object.",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing configuration record"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "ApnsConfiguration"
        ],
        "summary": "Updates the specified APNS configuration",
        "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li>Supported values of Content-Type for certificate part of request's body: application/x-pem-file, application/x-pkcs12.</li><li>The appropriate content-type value should be chosen in accordance with the certificate type being uploaded.</li><li>Metadata part of request's body contains a JSON object with optional AppleId and CertificatePassword fields and should be identified by <code>Content-Type: application/x-pkcs12.metadata+json (or application/x-pem-file.metadata+json)</code></li><li>To update AppleId only (without certificate content) the request's body should have <code>Content-Transfer-Encoding: binary</code></li></ol></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            <br />\r\n            {\"AppleId\":\"sample123\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n               Content-Type: application/x-pkcs12\r\n               Content-Transfer-Encoding: binary\r\n               Content-Disposition: attachment; filename=\"empty.pfx\"\r\n            <br /><br />\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
        "operationId": "ApnsConfiguration_ModifyConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Configuration reference ID in Microsoft GUID format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "allowTopicChange",
            "in": "query",
            "description": "If it is 'true', the new APNS certificate's topic string can be different than that of the existing APNS certificate <br />\r\n            If it is 'false', the new APNS certificate's topic string must match that of the existing APNS certificate <br />",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated configuration object.",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request is missing the reference ID</li><li>If the request's header's content type is incorrect or malformed</li><li>If the request's body is missing a certificate</li><li>If the request's body is missing a certificate password (for the case of pfx files)</li><li>If the request's body contains a certificate password that exceeds 512 characters</li><li>If the request's body contains a an Apple ID that exceeds 256 characters</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing configuration record"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5800 - If the request's body contains an invalid certificate file type.</li><li>5801 - If the request's body contains a certificate with an invalid topic string</li><li>5802 - If the request's body contains a certificate that was not generated using a downloaded CSR</li><li>5803 - If the request's body contains an invalid password for the provided certificate</li><li>5804 - If topic string of the new APNS certificate does not match that of the existing APNS certificate</li><li>5805 - If MobiControl cannot establish a connection with APNS to determine whether the certificate is valid</li><li>5806 - If Apple rejects the connection to an invalid certificate</li><li>5808 - If APNS certificate is expired.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/apns/configurations/{referenceId}/actions/testConnection": {
      "post": {
        "tags": [
          "ApnsConfiguration"
        ],
        "summary": "Executes a test connection with APNS",
        "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "ApnsConfiguration_TestConnection",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Configuration reference ID in Microsoft GUID format.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation Successful"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing configuration record"
          },
          "422": {
            "description": "Violated logical condition.The following ErrorCode values can be returned:<br /><ol><li>5805 - If MobiControl cannot establish a connection with APNS to determine whether the certificate is valid</li><li>5806 - If Apple rejects the connection to an invalid certificate</li><li>5808 - If APNS certificate is expired.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/apns/configurations/{referenceId}/appleId": {
      "put": {
        "tags": [
          "ApnsConfiguration"
        ],
        "summary": "Updates the specified Apple ID for the specified APNS configuration",
        "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "ApnsConfiguration_ModifyConfigurationAppleId",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Configuration reference ID in Microsoft GUID format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateRequest",
            "in": "body",
            "description": "Update APNS configuration in MobiControl.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConfigurationAppleId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request is missing the reference ID</li><li>If the request's body is missing an Apple ID</li><li>If the request's body contains a an Apple ID that exceeds 256 characters</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing configuration record"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts": {
      "get": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Returns a list of all Apple Automated Device Enrollment accounts",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns a list of AccountInfo properties</p>",
        "operationId": "AppleAutomatedDeviceEnrollment_GetAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountInfo"
              }
            }
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Creates a new Apple Automated Device Enrollment account",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and token file downloaded from Apple Business Manager.</li><li>Token file part of the request's body is mandatory and should be identified by <code>Content-Type: application/octet-stream</code></li><li>Metadata part of request's body is mandatory and should be identified by <code>Content-Type: application/octet-stream.metadata+json</code></li><li>Metadata is a JSON object with:\r\n                    <ul style=\"list-style-type:circle\"><li>AccountName: Friendly name of the account being created</li><li>CertificateReferenceId: The reference ID of the public key certificate (as returned by POST /apple/applebusinessmanager/deviceaccounts/publickey) used to generate the provided token file.</li></ul></li></ol></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream.metadata+json\r\n            <br />\r\n            {\"AccountName\":\"string\", \"CertificateReferenceId\":\"The reference of the public key certificate (string)\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"somecert.p7m\"\r\n            <br />\r\n            BASE64_ENCODED_TOKEN_FILE_CONTENT_HERE\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
        "operationId": "AppleAutomatedDeviceEnrollment_CreateAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "$ref": "#/definitions/AccountInfo"
            }
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request is missing TokenData</li><li>If the request is missing CertificateReferenceId</li><li>If the request is missing AccountName</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing certificate record"
          },
          "422": {
            "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1202 - If there was a failure to decrypt the server token.</li><li>1210 - If the Apple Device Management services could not be reached.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1214 - If the account name is used by another Automated Device Enrollment account.</li><li>1216 - If the test connection (retrieving a session token) with Apple Device Management services failed due to invalid authentication token.</li><li>1218 - If failed to retrieve account information (GET /account).</li><li>1219 - If MDM Server associated with the supplied MDM Server Token is the same as that of an existing account.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/<script>alert(origin)</script>": {
      "get": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Returns the specified Apple Automated Device Enrollment account",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns the specified Apple Automated Device Enrollment account by reference ID.</p>",
        "operationId": "AppleAutomatedDeviceEnrollment_GetAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "$ref": "#/definitions/AccountInfo"
            }
          },
          "400": {
            "description": "Bad Request, i.e. invalid Account Reference Id"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Updates the specified Apple Automated Device Enrollment account",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />Updates the specified Apple Automated Device Enrollment account corresponding to the account reference ID.</p><p><br />The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br /></p><p>The request's body:\r\n            <ul><li>Should be multipart request comprising of metadata and token file downloaded from Apple Business Manager.</li><li>Token file part of the request's body is mandatory should be identified by <code>Content-Type: application/octet-stream</code></li><li>Metadata part of request's body is optional and should be identified by <code>Content-Type: application/octet-stream.metadata+json</code></li><li>Metadata is a JSON object with:\r\n                    <ul style=\"list-style-type:circle\"><li>AccountName: Friendly name of the account being updated. If it is not specified, the account name will be unchanged</li><li>CertificateReferenceId: The reference ID of the public key certificate (as returned by POST /apple/applebusinessmanager/deviceaccounts/publickey) used to generate the provided token file.  If it is not specified, the public key certificate used to generate the current token file will be used to decrypt the provided token file</li></ul></li></ul></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream.metadata+json\r\n            <br />\r\n            {\"AccountName\":\"string\", \"CertificateReferenceId\":\"The reference of the public key certificate (string)\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"somecert.p7m\"\r\n            <br />\r\n            BASE64_ENCODED_TOKEN_FILE_CONTENT_HERE\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
        "operationId": "AppleAutomatedDeviceEnrollment_UpdateAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "$ref": "#/definitions/AccountInfo"
            }
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request is missing TokenData</li><li>If the request is missing CertificateReferenceId</li><li>If the request is missing AccountName</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing certificate record"
          },
          "422": {
            "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1202 - If there was a failure to decrypt the server token.</li><li>1210 - If the Apple Device Management services could not be reached.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1214 - If the account name is used by another Automated Device Enrollment account.</li><li>1216 - If the test connection (retrieving a session token) with Apple Device Management services failed due to invalid authentication token.</li><li>1218 - If failed to retrieve account information (GET /account).</li><li>1220 - If MDM Server associated with the supplied MDM Server Token is different than that of the current account.</li></ol>"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Deletes the specified Apple Automated Device Enrollment account",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />Deletes the specified Apple Automated Device Enrollment account corresponding to the account reference ID.</p>",
        "operationId": "AppleAutomatedDeviceEnrollment_DeleteToken",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Bad Request, i.e. invalid Account Reference Id"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1217 - If the account is used by an Add Device Rule.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/setDefaultRule": {
      "post": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Set a Default Add Device Rule for an Automated Device Enrollment account",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AppleAutomatedDeviceEnrollment_SetDefaultRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "defaultRuleModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DefaultRuleModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Bad Request, i.e invalid Account Reference Id"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1221 - If Add Device Rule cannot be set as the Default Add Device Rule because it is not associated with the specified Automated Device Enrollment account.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/sync": {
      "post": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Synchronize Apple Automated Device Enrollment account corresponding to the account reference ID",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AppleAutomatedDeviceEnrollment_SyncAccount",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Bad Request, i.e. invalid Account Reference Id"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1210 - If MobiControl cannot establish a connection with Apple Automated Device Enrollment service to retrieve a session token using the MDM Server Token.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1216 - If Apple rejects the connection due to an invalid authentication token.</li><li>1222 - If MobiControl already synchronizing an account.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/test": {
      "post": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Test connection with Apple's Automated Device Enrollment server using specified account",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />Returns HttpResponseMessage OK (200)</p>",
        "operationId": "AppleAutomatedDeviceEnrollment_TestAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request, i.e. invalid Account Reference Id"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1210 - If MobiControl cannot establish a connection with Apple Automated Device Enrollment service to retrieve a session token using the MDM Server Token.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1216 - If Apple rejects the connection due to an invalid authentication token.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/name": {
      "put": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Updates the specified Apple Automated Device Enrollment account's name",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><p><br /> Call shall contains following parameters:\r\n            <br /> AccountName - This is AccountName shall be updated\r\n            </p>",
        "operationId": "AppleAutomatedDeviceEnrollment_UpdateAccountName",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountName",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "$ref": "#/definitions/AccountInfo"
            }
          },
          "400": {
            "description": "Bad Request, i.e. invalid Account Reference Id or Account Name"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1214 - If the account name is used by another Automated Device Enrollment account.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/rules": {
      "get": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Retrieve all Add Device Rules associated with an Automated Device Enrollment account",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AppleAutomatedDeviceEnrollment_GetRules",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountReferenceId",
            "in": "path",
            "description": "Account Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddDeviceRule"
              }
            }
          },
          "400": {
            "description": "Bad Request, i.e invalid Account Reference Id"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/publicKey": {
      "post": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Generates a Public Key certificate for an MDM Server in Apple Business Manager",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns the certificate information of the generated Public Key certificate.\r\n            <br />ReferenceId is used to download the certificate using GET /apple/appleBusinessManager/deviceAccounts/publicKey/{certificateReferenceId}.</p><p><br />Returns the SigningCertificateInfo of the generated Public Key certificate</p>",
        "operationId": "AppleAutomatedDeviceEnrollment_GenerateSigningCertificateWithPublicKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "$ref": "#/definitions/SigningCertificateInfo"
            }
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/deviceAccounts/publicKey/{certificateReferenceId}": {
      "get": {
        "tags": [
          "AppleAutomatedDeviceEnrollment"
        ],
        "summary": "Downloads the specified Public Key certificate for an MDM Server in Apple Business Manager",
        "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />This API is used after calling POST /apple/appleBusinessManager/deviceAccounts/publicKey to generate the Public Key certificate.\r\n            <br />Returns HttpResponseMessage with http code and application/octet-stream as certificate file content.</p><p><br />Returns HttpResponseMessage with http code and application/octet-stream as certificate file content</p>",
        "operationId": "AppleAutomatedDeviceEnrollment_GetSigningCertificateWithPublicKeyById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificateReferenceId",
            "in": "path",
            "description": "The reference ID of the Public Key certificate as returned by the API.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request, i.e. invalid Certificate Reference Id"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing certificate record"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts": {
      "get": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Returns a list of App Store License accounts",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "AppleAppLicenseManagement_GetAllAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VppAccount"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Creates a new App Store License account",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br /></p><p>The request's body:\r\n             <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li>  Token file part of the request's body is mandatory and should be identified by Content-Type: application/octet-stream.</li><li> Metadata part of request's body is mandatory and should be identified by Content-Type: application/octet-stream.metadata.</li><li> Metadata is a JSON object with:<br />\r\n            -- AccountName: Friendly name of the account being created.<br />\r\n            -- ClaimOwnership: (Optional) If it is true, MobiControl will claim ownership of the account if it is owned by another host.If it is not specified, it defaults to false.<br />\r\n            -- RetireExistingUsers: (Optional) If it is true, MobiControl will retire all existing users associated with this account.If it is not specified, it defaults to false.<br /></li></ol></p><p>Sample request's body:</p><pre><br>--mobicontrol_boundary                                               </br><br>Content-Disposition: form-data; name=\"fieldNameHere\"; filename=\"test.vpptoken\"            </br><br>Content-Type: application/octet-stream                                                    </br><br>    eyJleHBEYXRlIjoiMjAyMS0wMi0yNlQxMToyOTo0OC0wODAwIiwidG9rZW4iOiIvMmY2ZUNMTTM2d01ERUpJ  </br><br>--mobicontrol_boundary                                                 </br><br>    Content-Type: application/octet-stream.metadata                                       </br><br>{AccountName:\"Test34\", ClaimOwnership : true, RetireExistingUsers: false }                                                               </br><br>--mobicontrol_boundary--</br></pre>",
        "operationId": "AppleAppLicenseManagement_AddAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>1316 - The Apple App Store License token you are attempting to upload already exists under different account. </li><li>1343 - The Apple service cannot be reached</li><li>1308 - The Apple's App Store License Management account name '{0}' is already added to the system, please use another name.</li><li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li><li>1327 - The Apple App Store License Management account token is invalid or expired.</li><li>1328 - The Apple App Store License Management account token is invalid.</li><li>1346 - The Apple App Store License Management account token is revoked.</li><li>1336 - Failed to claim ownership of Apple's App Store License Management Account ID '{0}'</li><li>1311 - Add Apple's Apple's App Store License Management License Management account '{0}' failed because fail to retire existing users.</li><li>1335 - Apple's App Store License Management Account '{0}' no longer managed by this instance of MobiControl but by '{1}'</li><li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li><li>1333 - The App Store License Management services returned an unexpected error.</li><li>1347 - A connection with Apple iTunes service cannot be established to retrieve information about apps in this account.</li><li>1348 - Failed to retrieve information about an app (ID: {0}) in this account using the Apple iTunes service.</li><li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/{accountId}": {
      "get": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Returns the specified App Store License account's summary",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "AppleAppLicenseManagement_GetAccountsSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The public identifier of App Store Records in MobiControl.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VppAccount"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Updates the specified App Store License account's name or server token",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br /></p><p>The request's body:\r\n             <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li> Token file part of the request's body is mandatory and should be identified by Content-Type: application/octet-stream.</li><li> Metadata part of request's body is mandatory and should be identified by Content-Type: application/octet-stream.metadata.</li><li> Metadata is a JSON object with:<br />\r\n            -- AccountName: Friendly name of the account being created.<br />\r\n            -- ClaimOwnership: (Optional) If it is true, MobiControl will claim ownership of the account if it is owned by another host.If it is not specified, it defaults to false.<br />\r\n            -- RetireExistingUsers: (Optional) If it is true, MobiControl will retire all existing users associated with this account.If it is not specified, it defaults to false.<br /></li></ol></p><p>Sample request's body:</p><pre><br>--mobicontrol_boundary                                               </br><br>Content-Disposition: form-data; name=\"fieldNameHere\"; filename=\"test.vpptoken\"            </br><br>Content-Type: application/octet-stream                                                    </br><br>    eyJleHBEYXRlIjoiMjAyMS0wMi0yNlQxMToyOTo0OC0wODAwIiwidG9rZW4iOiIvMmY2ZUNMTTM2d01ERUpJ  </br><br>--mobicontrol_boundary                                                 </br><br>    Content-Type: application/octet-stream.metadata                                       </br><br>{AccountName:\"Test34\", ClaimOwnership : true}                                                                   </br><br>--mobicontrol_boundary--</br></pre>",
        "operationId": "AppleAppLicenseManagement_UpdateAccount",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The public identifier of App Store Records in MobiControl.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>1336 - Failed to claim ownership of Apple App Store License Account ID</li><li>1302 - Refresh account licensing information failed.</li><li>1308 - The Apple App Store License account name '{0}' is already added to the system, please use another name.</li><li>1345 - Error updating account '{0}', because the provided token belongs to a different location '{1}({2})' than the existing account's location '{3}({4})'</li><li>1331 - Error updating account '{0}', because it is owned by a different MobiControl instance ({1})</li><li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li><li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li><li>1343 - The Apple service cannot be reached.</li><li>1327 - The Apple App Store License Management account token is invalid or expired.</li><li>1328 - The Apple App Store License Management account token is invalid.</li><li>1346 - The Apple App Store License Management account token is revoked.</li><li>1333 - The App Store License Management services returned an unexpected error.</li><li>1347 - A connection with Apple iTunes service cannot be established to retrieve information about apps in this account.</li><li>1348 - Failed to retrieve information about an app (ID: {0}) in this account using the Apple iTunes service.</li><li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li></ol>"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Deletes the specified App Store License account",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br><b>(Available Since MobiControl v15.3.0)</b></br>\r\n             Call Type : Async call",
        "operationId": "AppleAppLicenseManagement_DeleteAccount",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The public identifier of App Store Records in MobiControl.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          },
          "422": {
            "description": "<ol>\r\n  <li>1342 - Error deleting account '{0}', because the account is used by at least one app in your App Policies</li>\r\n  <li>1343 - The Apple service cannot be reached</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/cleanUp": {
      "post": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Clean up the specified App Store License account",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br><b>(Available Since MobiControl v15.3.0)</b></br><p><br />Clean up the specified App Store License account by revoking all licenses and users NOT assigned or created by this instance of MobiControl.</p>\r\n            Call Type : Async Call",
        "operationId": "AppleAppLicenseManagement_CleanupAccount",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          },
          "422": {
            "description": "<ol>\r\n  <li>1340 - The license account is owned by a different MobiControl instance</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1343 - The Apple service cannot be reached.</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/reclaimOwnership": {
      "post": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Reclaim ownership of the specified App Store License account",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br><b>(Available Since MobiControl v15.3.0)</b></br>",
        "operationId": "AppleAppLicenseManagement_ClaimAccountOwnership",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the target account",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          },
          "422": {
            "description": "<ol>\r\n  <li>1343 - The Apple service cannot be reached</li>\r\n  <li>1336 - Failed to claim ownership of Apple App Store License Account ID</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/refresh": {
      "post": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Refresh the specified App Store License account",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br><b>(Available Since MobiControl v15.3.0)</b></br>",
        "operationId": "AppleAppLicenseManagement_RefreshAccount",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The public identifier of App Store Records in MobiControl.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request missing AccountId</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>1302 - Refresh account licensing information failed.</li><li>1340 - The license account is owned by a different MobiControl instance</li><li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li><li>1328 - The Apple App Store License Management account token is invalid.</li><li>1346 - The Apple App Store License Management account token is revoked.</li><li>1343 - The Apple service cannot be reached.</li><li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li><li>1333 - The App Store License Management services returned an unexpected error.</li><li>1347 - A connection with Apple iTunes service cannot be established to retrieve information about apps in this account.</li><li>1348 - Failed to retrieve information about an app (ID: {0}) in this account using the Apple iTunes service.</li><li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/test": {
      "post": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Tests the validity of the Automated Device Enrollment account",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AppleAppLicenseManagement_TestAccount",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The public identifier of App Store Records in MobiControl.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          },
          "422": {
            "description": "<ol>\r\n  <li> 1340 - The license account is owned by a different MobiControl instance </li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1343 - The Apple service cannot be reached.</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/{accountId}/name": {
      "put": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Updates the specified App Store License account's name",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br><b>(Available Since MobiControl v15.3.0)</b></br>",
        "operationId": "AppleAppLicenseManagement_UpdateAccountName",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateAccount",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VppUpdateAccountName"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request missing AccountId</li><li>If the request body is missing</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Failed operation due to non-existing account"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>1308 - The Apple App Store License account name '{0}' is already added to the system, please use another name.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/actions/reconcile": {
      "post": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Reconcile all App Store License accounts",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br><b>(Available Since MobiControl v15.3.0)</b></br><p><br />Reconcile all App Store License accounts by revoking all licenses and users assigned or created by this instance of MobiControl</p><br>Call type : Async call</br>",
        "operationId": "AppleAppLicenseManagement_Reconcile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "reconcileAccount",
            "in": "body",
            "description": "Reconcile App Store License account.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VppReconcileAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "422": {
            "description": "<br>Violated logical condition. </br>\r\n<ol>\r\n  <li>1340 - The license account is owned by a different MobiControl instance </li>\r\n  <li>1343 - The Apple service cannot be reached</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
          }
        },
        "deprecated": false
      }
    },
    "/apple/appleBusinessManager/licenseAccounts/settings": {
      "get": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Returns the settings for App Store License Management",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "AppleAppLicenseManagement_GetVppSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "AppleAppLicenseManagement"
        ],
        "summary": "Set settings for App Store License Management",
        "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AppleAppLicenseManagement_SetVppSettings",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "vppSettings",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VppSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/apps/enterprise/{referenceId}": {
      "get": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Returns Android application details.",
        "description": "Returns Android Enterprise application details.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidApps_GetCustomerApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application Reference Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnterpriseApplicationDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li></ol>"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Updates Enterprise Android application.",
        "description": "Updates Enterprise Android application details.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
        "operationId": "AppManagementAndroidApps_UpdateCustomerApplication",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application reference Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateApplicationRequest",
            "in": "body",
            "description": "Enterprise Application details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApplicationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnterpriseApplicationDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - Customer application request is null.</li><li>1 - Inventory customer application is null.</li><li>1 - Inventory customer application's name is null.</li><li>1 - Android customer application inventory data is null.</li><li>2 - The given reference Id is not in valid format.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li></ol>"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Deletes Enterprise Android application.",
        "description": "Deletes Enterprise Android application.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidApps_DeleteApplication",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5509 - The application is associated with these app policy(s): {0}. Delete the app policies before deleting the application.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/apps/enterprise/{referenceId}/icon": {
      "get": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Gets customer's application icon.",
        "description": "Returns the application icon for an enterprise application with the given ReferenceId.\r\n             <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidApps_GetCustomerApplicationIcon",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5507 - Application icon for the given customer application reference Id does not exists in the inventory.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/apps/enterprise/external": {
      "post": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Creates an external Android application.",
        "description": "Creates new enterprise Android application hosted externally.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
        "operationId": "AppManagementAndroidApps_AddExternalCustomerApplication",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "addExternalApplicationRequest",
            "in": "body",
            "description": "External Application URL",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddExternalApplicationRequest"
            }
          },
          {
            "name": "failIfApplicationAlreadyExists",
            "in": "query",
            "description": "Check for existing application",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnterpriseApplicationDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - External customer application request is either null, empty or consists only of white space.</li><li>1 - Applicaiton url in external customer application request is either null, empty or consists only of white space.</li><li>1 - The file path of downloaded apk file is either null, empty or consists of only white space.</li><li>1 - The application package Id is either null, empty or consists of only white space.</li><li>1 - Android customer application inventory data is null.</li><li>1 - Application icon path is either null, empty or consists of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>2 - Application Url must have a value for external applications.</li><li>2 - File path must be empty for external applications.</li><li>2 - File path must have a value for internal applications.</li><li>2 - Application url must be empty for internal applications.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5505 - Application url mentioned in the external customer application request is not accessible.</li><li>5506 - A customer application with the given application name and application package Id already exists in the inventory.</li><li>5508 - Unspported customer application icon format.</li><li>5500 - The given android apk is invalid.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/apps/enterprise/internal": {
      "post": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Creates an internal Android application.",
        "description": "Creates new enterprise Android application hosted internally by MobiControl.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />\r\n            Multipart request body must contain the following parts:</p><ol><li>application file - Contains application file with Content-Type: <pre>application/vnd.android.application OR</pre><pre>application/vnd.android.package-archive</pre><br />\r\n            Mandatory headers <br />\r\n            Content-Disposition: attachment; filename=\"{application-filename}\"<br /><br />\r\n            Optional headers <br />\r\n            Content-Type-Encoding: binary<br /></li></ol>\r\n            The maximum size of the Android enterprise application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n            The example below shows an application upload request.\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=foo_bar_baz\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --foo_bar_baz\r\n            Content-Type: application/vnd.android.application\r\n            <br />\r\n            Content-Disposition: attachment; filename=\"application_name.apk\"\r\n            <br />\r\n            application data\r\n            --foo_bar_baz--\r\n            </pre>",
        "operationId": "AppManagementAndroidApps_UploadInternalCustomerApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "failIfApplicationAlreadyExists",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnterpriseApplicationDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - Cannot create temporary file of the apk because the stream is null.</li><li>1 - The path of temporary created file is either null, empty or consists of only white space.</li><li>1 - The application package Id is either null, empty or consists of only white space.</li><li>1 - Android customer application inventory data is null.</li><li>1 - Application icon path is either null, empty or consists of white space.</li><li>1 - ApkMetaData is null.</li><li>1 - Android customer application inventory data is null.</li><li>2 - The given reference Id is not in valid format.</li><li>2 - Application Url must have a value for external applications.</li><li>2 - File path must be empty for external applications.</li><li>2 - File path must have a value for internal applications.</li><li>2 - Application url must be empty for internal applications.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5500 - The given android apk is invalid.</li><li>5506 - A customer application with the given application name and application package Id already exists in the inventory.</li><li>5508 - Unspported customer application icon format.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/apps/googlePlayStore/{appPackageId}": {
      "get": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Returns Google Play Store application details.",
        "description": "Returns Android application details for a Google Play Store app.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidApps_GetGooglePlayStoreApplicationApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appPackageId",
            "in": "path",
            "description": "Application package ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GooglePlayStoreApplication"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Application package Id is either null, empty or consists only of white space.</li><li>5501 - Application with the given application package Id is not found in the inventory.</li></ol>"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Updates Google Play Store application details.",
        "description": "Updates Android application details for a Google Play Store app.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidApps_PutGooglePlayStoreApplicationInInventory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appPackageId",
            "in": "path",
            "description": "Application package ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GooglePlayStoreApplication"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Application package Id is either null, empty or consists only of white space.</li><li>1 - Google play store application is null.</li><li>1 - Language is null.</li><li>5501 - Application with the given application package Id is not found in the inventory.</li><li>5503 - Application with the given application package Id is not found on google play store.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/apps/googlePlayStore/{appPackageId}/appFeedback": {
      "get": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Returns application feedback reported by AE devices",
        "description": "Returns application feedback reported by AE devices to Google Cloud.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidApps_GetApplicationFeedback",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appPackageId",
            "in": "path",
            "description": "Application Package ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleReferenceId",
            "in": "query",
            "description": "Rule Reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity of applicaiton feedback event",
            "required": false,
            "x-enumType": "Severity",
            "type": "string",
            "enum": [
              "Unspecified",
              "Info",
              "Error"
            ]
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\r\n            {System.Collections.Generic.IEnumerable`1\">Collection of &lt;ApplicationFeedback&gt; records</see><seealso cref=\"T:Soti.MobiControl.Platforms.Android.ApplicationManagement.Web.ApplicationFeedback.ApplicationFeedback}",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationFeedback"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br />"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/appManagement/android/apps/googlePlayStore/{appPackageId}/appFeedback/summary": {
      "get": {
        "tags": [
          "AppManagementAndroidApps"
        ],
        "summary": "Returns summary of application feedback",
        "description": "Returns summary for application feedback by severity\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidApps_GetApplicationFeedbackSeveritySummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appPackageId",
            "in": "path",
            "description": "Application package ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleReferenceId",
            "in": "query",
            "description": "Rule reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end dat",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\r\n            {System.Collections.Generic.IEnumerable`1\">Collection of &lt;ApplicationFeedback&gt; records</see><seealso cref=\"T:Soti.MobiControl.Platforms.Android.ApplicationManagement.Web.ApplicationFeedback.ApplicationFeedback}",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationFeedbackSeverityCount"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br />"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/policies": {
      "post": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Creates new Android app management policy.",
        "description": "Creates a new Android app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_CreateRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "rule",
            "in": "body",
            "description": "Android App Policy details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAndroidAppCatalogRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - App policy is null.</li><li>1 - App policy Id is null.</li><li>1 - App policy name param of the given app policy is null, empty or consists of white space.</li><li>1 - Missing enterprise reference Id in the given android application catalog app policy request.</li><li>2 - The given app policy kind does not exists.</li><li>2 - The app policy family does not exists.</li><li>5000 - Application catalog app policy name already exists.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/policies/{referenceId}": {
      "get": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Returns Android app management policy details.",
        "description": "Returns Android app management policy details.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_GetRule",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Updates an Android app management policy.",
        "description": "Updates an Android app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_UpdateRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "rule",
            "in": "body",
            "description": "Update Android App Policy request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAndroidAppCatalogRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - App policy for given reference Id does not exists or is null.</li><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - App policy name param of the given app policy is null, empty or consists of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li><li>5000 - Application catalog app policy name already exists.</li></ol>"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Deletes an Android app management policy.",
        "description": "Deletes an Android app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_DeleteRule",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/policies/{referenceId}/apps/enterprise": {
      "get": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Returns Android apps for the selected policy.",
        "description": "Returns a list of applications for the selected Android app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_GetCustomerApplications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\r\n            {System.Collections.Generic.IEnumerable`1\">Collection of CustomerAppCatalogRuleItemAppInventory that holds information about the customer applications that are associated to a certain Android application catalog rule</see><seealso cref=\"T:Soti.MobiControl.Platforms.Android.ApplicationManagement.Web.Rules.CustomerAppCatalogRuleItemAppInventory}",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAppCatalogRuleItemAppInventory"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Updates Android applications for the selected policy.",
        "description": "Updates Android applications for the selected app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_PutCustomerApplications",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy Reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "applications",
            "in": "body",
            "description": "Collection of Android Enterprise Applications",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAppCatalogRuleItem"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - The customer app management policy item list is null.</li><li>1 - App policy for given referenceId is null.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li><li>5502 - The application list is empty or null. It should contain at least one application.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/policies/{referenceId}/apps/googlePlayStore": {
      "get": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Returns Google Play store apps for the selected policy.",
        "description": "Returns Google Play store applications for the selected Android  app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_GetGooglePlayStoreApplications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GooglePlayStoreAppCatalogRuleItemAppInventory"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Updates Google Play store applications for the selected policy.",
        "description": "Updates Google Play store applications for the selected Android app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_PutGooglePlayStoreApplications",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "applications",
            "in": "body",
            "description": "Collection of Google PlayStore Applications",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GooglePlayStoreAppCatalogRuleItem"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - The google play store app management policy item list is null.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li><li>5502 - The application list is empty or null. It should contain at least one application.</li><li>5504 - One of the given applicaiton is not approved for enterprise.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/android/policies/{referenceId}/enterpriseReferenceId": {
      "put": {
        "tags": [
          "AppManagementAndroidPolicies"
        ],
        "summary": "Updates an Android app management policy.",
        "description": "Updates an Android app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAndroidPolicies_UpdateRuleEnterprise",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "rule",
            "in": "body",
            "description": "Update Android Enterprise App Policy request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAndroidAppCatalogRuleEnterpriseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - App policy for given reference Id does not exists or is null.</li><li>1 - App policy Id does not exists or is null.</li><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - App policy name param of the given app policy is null, empty or consists of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/{referenceId}": {
      "delete": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Deletes an Apple app management policy.",
        "description": "Deletes an Apple app management policy.\r\n            <br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AppManagementApplePolicies_DeleteRule",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/{referenceId}/banner": {
      "get": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Returns App Policy Banner",
        "description": "Returns an App Policy banner of the provided policy reference ID.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_GetRuleBanner",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App Policy reference id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "App Policy banner retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Updates App Policy Banner",
        "description": "Updates the App Policy banner of the provided policy reference ID.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />\r\n            Multipart request body must contain the following parts:</p><ol><li>image file - Contains image file with one of the following Content-Type:\r\n            <pre>image/gif</pre><pre>image/png</pre><pre>image/jpeg</pre><pre>image/bmp</pre><pre>image/x-icon</pre><br />\r\n            Mandatory headers <br />\r\n            Content-Disposition: attachment; filename=\"{image-filename}\"<br /><br />\r\n            Optional headers <br />\r\n            Content-Type-Encoding: binary<br /></li></ol>\r\n            The maximum size of the image file to be uploaded when using this endpoint is <u>1 MB</u>.<br /><br />\r\n            The example below shows an banner image upload request.\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=foo_bar_baz\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --foo_bar_baz\r\n            Content-Type: image/jpeg\r\n            <br />\r\n            Content-Disposition: attachment; filename=\"image_name.jpg\"\r\n            <br />\r\n            image data\r\n            --foo_bar_baz--\r\n            </pre>",
        "operationId": "AppManagementApplePolicies_AddRuleBanner",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App Policy reference id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Banner image uploaded successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5120 - file has invalid format, not one of .ico, .gif, .png, .bmp, .jpeg or .jpg</li><li>5121 - file exceeds 1MB limit.</li></ol>"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Deletes App Policy Banner",
        "description": "Deletes an App Policy banner of the provided reference ID.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_DeleteRuleBanner",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App Policy reference id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "App Policy banner deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/common/apps/{referenceId}/icon": {
      "get": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Returns application icon",
        "description": "Returns application icon for the application reference ID\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAppleApplications_GetApplicationIcon",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationKind",
            "in": "query",
            "description": "Application kind",
            "required": true,
            "x-enumType": "AppleApplicationKind",
            "type": "string",
            "enum": [
              "Unknown",
              "AppleStore",
              "IosEnterprise",
              "MacEnterprise"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/common/apps/appStore": {
      "post": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Creates Apple App Store applications",
        "description": "Creates Apple App Store applications\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />\r\n            Returns collection of applications with assigned reference ID\r\n            <p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
        "operationId": "AppManagementAppleApplications_AddStoreApplicationsToInventory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applications",
            "in": "body",
            "description": "Collection of applications to add",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppleStoreApplicationMetadata"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Applications added successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppleStoreApplicationMetadata"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/common/policies": {
      "post": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Creates Apple app management policy",
        "description": "Creates Apple app management policy\r\n            <br /><br />\r\n            Requires the call be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_CreateRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "rule",
            "in": "body",
            "description": "Apple App Policy details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppleAppCatalogRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppleAppCatalogRuleSummary"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/common/policies/{referenceId}": {
      "get": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Returns Apple app management policy details",
        "description": "Returns Apple app management policy details\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_GetRule",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppleAppCatalogRuleSummary"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Updates Apple app management policy",
        "description": "Updates Apple app management policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_UpdateRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Policy reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "rule",
            "in": "body",
            "description": "Update Apple App Policy request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppleAppCatalogRuleUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppleAppCatalogRuleSummary"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/apps/actions/forceUpdate": {
      "post": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Forces application update",
        "description": "Forces Application update on devices\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
        "operationId": "AppManagementAppleApplications_ForceApplicationUpdate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "ForceApplicationUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForceApplicationUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/apps/enterprise/{referenceId}": {
      "delete": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Deletes Apple iOS enterprise application",
        "description": "Deletes Apple iOS enterprise application.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAppleApplications_DeleteIosEnterpriseApplication",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Application deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/apps/enterprise/{referenceId}/provisioningProfile": {
      "post": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Updates provisioning profile for iOS enterprise application",
        "description": "Updates provisioning profile for iOS enterprise application\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />\r\n             Multipart request body must contain the following parts:</p><ol><li>file - Contains iOS provisioning profile with Content-Type: <pre>application/vnd.ios.provisioningprofile</pre><br />\r\n             Mandatory headers <br />\r\n             Content-Disposition: attachment; filename=\"{filename}\"<br /><br />\r\n             Content-Type-Encoding: binary<br /></li></ol>\r\n             The maximum size of the file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n             The example below shows an upload request.\r\n             <br /><pre>\r\n             Content-Type: multipart/related; boundary=foo_bar_baz\r\n             Content-Length: number_of_bytes_in_entire_request_body\r\n             <br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.ios.provisioningprofile\r\n             <br />\r\n             Content-Disposition: attachment; filename=\"filename.mobileprovision\"\r\n             <br />\r\n             Content-Type-Encoding: binary\r\n             <br />\r\n             application data\r\n             --foo_bar_baz--\r\n             </pre>",
        "operationId": "AppManagementAppleApplications_UploadProvisioningProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5104 - file has invalid format</li><li>5106 - file exceeds maximum allowed limit</li><li>5113 - application doesn't exist</li><li>5114 - application bundle id doesnt match</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/apps/enterprise/external": {
      "post": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Creates an external iOS enterprise application",
        "description": "Creates new iOS enterprise application hosted externally\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />\r\n            Returns retrieved application metadata\r\n            <p>Content-Type of the Request body must be <code>application/json</code><br /></p><br />",
        "operationId": "AppManagementAppleApplications_AddExternalIosEnterpriseApplicationToInventory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "AddExternalFileRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddExternalFileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application added successfully",
            "schema": {
              "$ref": "#/definitions/IosEnterpriseApplicationMetadata"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5101 - file is not ipa</li><li>5102 - URI has incorrect format</li><li>5103 - manifest file not found</li><li>5110 - error reading the file</li><li>5111 - manifest file is not correct</li><li>5112 - ipa file not found</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/apps/enterprise/internal": {
      "post": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Creates an internal iOS enterprise application",
        "description": "Creates new iOS enterprise application hosted internally by MobiControl\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />\r\n            Multipart request body must contain the following parts:</p><ol><li>application file - Contains application file with Content-Type: <pre>application/vnd.ios.application</pre><br />\r\n            Mandatory headers <br />\r\n            Content-Disposition: attachment; filename=\"{application-filename}\"<br /><br />\r\n            Optional headers <br />\r\n            Content-Type-Encoding: binary<br /></li></ol>\r\n            The maximum size of the iOS enterprise application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n            The example below shows an application upload request.\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=foo_bar_baz\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --foo_bar_baz\r\n            Content-Type: application/vnd.ios.application\r\n            <br />\r\n            Content-Disposition: attachment; filename=\"application_name.ipa\"\r\n            <br />\r\n            application data\r\n            --foo_bar_baz--\r\n            </pre>",
        "operationId": "AppManagementAppleApplications_UploadIosEnterpriseApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Application uploaded successfully",
            "schema": {
              "$ref": "#/definitions/IosEnterpriseApplicationMetadata"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5100 - file has invalid format</li><li>5101 - file is not ipa</li><li>5106 - file exceeds maximum allowed limit</li><li>5109 - device management address not configured</li><li>5110 - error reading the file</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/policies/{referenceId}/apps": {
      "get": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Returns a list of iOS apps for an App Policy",
        "description": "Returns iOS apps for selected Apple app management policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_GetIosAppsByRuleId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the app policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppCatalogRuleIosApps"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Updates the specified iOS App Policy",
        "description": "Updates iOS apps for specified Apple app management policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_AssociateIosAppsWithAppCatalogRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the app policy",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "AssociateIosAppsWithAppCatalogRuleRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateIosAppsWithAppCatalogRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5131 - one or more iOS app store apps has invalid App Store License Account configuration</li><li>5132 - one or more iOS app store apps has invalid TimesPromptToInstall configuration</li><li>5133 - one or more mandatory iOS app store apps has invalid TimesPromptToInstall or PromptToInstall configuration</li><li>5134 - one or more iOS app store apps has invalid VppAccountGuid or VppApplicationId configuration</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/redemptionCodes/{applicationId}": {
      "get": {
        "tags": [
          "AppManagementAppleRedemptionCodes"
        ],
        "summary": "Returns application information",
        "description": "Returns application information\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
        "operationId": "AppManagementAppleRedemptionCodes_GetApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "appPolicyReferenceId",
            "in": "query",
            "description": "Application Policy Reference ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "useCodes",
            "in": "query",
            "description": "Use codes flag",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "useCodesExclusive",
            "in": "query",
            "description": "Use codes exclusive flag",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RedemptionCodeApplicationInfo"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Business Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "AppManagementAppleRedemptionCodes"
        ],
        "summary": "Uploads redemption codes",
        "description": "Uploads redemption codes from Microsoft Excel file.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />\r\n             Multipart request body must contain the following parts:</p><ol><li>MS Excel file - Contains MS Excel file with Content-Type: <pre>application/vnd.ms-excel</pre><br />\r\n             or <pre>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</pre><br /><li>metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.ms-excel.metadata+json</pre>\r\n             or <pre>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.metadata+json</pre><br /></li>\r\n             Mandatory headers <br />\r\n             Content-Disposition: attachment; filename=\"{filename}\"<br /><br />\r\n             Content-Type-Encoding: binary<br /></li></ol>\r\n             The maximum size of the MS Excel file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n             The example below shows an upload request.\r\n             <br /><pre>\r\n             Content-Type: multipart/related; boundary=foo_bar_baz\r\n             Content-Length: number_of_bytes_in_entire_request_body\r\n             <br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.ms-excel.metadata+json<br />\r\n            {\"ExpectedName\":\"Tetris\",<br />\r\n            \"SuppressUpdateIssues\":[3],<br />\r\n            \"AppPolicyReferenceId\":\"b2467f93-7042-4792-be20-e3103acbf547\"}<br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.ms-excel\r\n             <br />\r\n             Content-Disposition: attachment; filename=\"filename.xls\"\r\n             <br />\r\n             Content-Type-Encoding: binary\r\n             <br />\r\n             application data\r\n             --foo_bar_baz--\r\n             </pre>",
        "operationId": "AppManagementAppleRedemptionCodes_UploadCodes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "schema": {
              "$ref": "#/definitions/RedemptionCodeApplicationExtendedInfo"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "Unsupported media type"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/redemptionCodes/{applicationId}/actions/cleanup": {
      "post": {
        "tags": [
          "AppManagementAppleRedemptionCodes"
        ],
        "summary": "Cleans up unused redemption codes",
        "description": "Cleans up unused redemption codes\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
        "operationId": "AppManagementAppleRedemptionCodes_CleanUnusedCodes",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedemptionCodesRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/iOS/redemptionCodes/{applicationId}/summary": {
      "get": {
        "tags": [
          "AppManagementAppleRedemptionCodes"
        ],
        "summary": "Returns the redemption codes collection",
        "description": "Returns the redemption codes collection\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
        "operationId": "AppManagementAppleRedemptionCodes_GetCodes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "appPolicyReferenceId",
            "in": "query",
            "description": "Application Policy Reference ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to take",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RedemptionCode"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/appManagement/apple/macOS/apps/enterprise/{referenceId}": {
      "delete": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Deletes Apple MacOS enterprise application",
        "description": "Deletes Apple MacOS enterprise application\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAppleApplications_DeleteMacEnterpriseApplication",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Application deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/macOS/apps/enterprise/external": {
      "post": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Creates an external MacOS enterprise application",
        "description": "Creates new MacOS enterprise application hosted externally\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAppleApplications_AddMacExternalApplicationToInventory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "AddExternalMacAppRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddExternalMacAppRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application added successfully",
            "schema": {
              "$ref": "#/definitions/MacEnterpriseApplicationMetadata"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5103 - No manifest found</li><li>5107 - Metadata not provided</li><li>5108 - Mac URI incorrect format</li><li>5116 - Mac manifest not correct</li><li>5117 - Referenced Mac file not found</li><li>5130 - Invalid app URL</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/macOS/apps/enterprise/internal": {
      "post": {
        "tags": [
          "AppManagementAppleApplications"
        ],
        "summary": "Creates an internal MacOS enterprise application",
        "description": "Creates new MacOS enterprise application hosted internally by MobiControl\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementAppleApplications_UploadMacApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Application uploaded successfully",
            "schema": {
              "$ref": "#/definitions/MacEnterpriseApplicationMetadata"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5105 - Invalid Mac app file</li><li>5106 - Max file size</li><li>5107 - Metadata not provided</li><li>5129 - Invalid app file</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/apple/macOS/policies/{referenceId}/apps": {
      "get": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Returns a list of macOS applications for an App Policy",
        "description": "Returns MacOS applications for selected Apple app management policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_GetMacAppsByRuleId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the app policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppCatalogRuleMacApps"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementApplePolicies"
        ],
        "summary": "Updates the specified macOS App Policy",
        "description": "Updates MacOS applications for selected Apple app management policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementApplePolicies_AssociateMacAppsWithAppCatalogRule",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the app policy",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "AssociateMacAppsWithAppCatalogRuleRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateMacAppsWithAppCatalogRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5131 - one or more MacOS app store apps has invalid App Store License Account configuration</li><li>5135 - one or more MacOS app store apps has invalid AppConfiguration configuration</li><li>5136 - one or more MacOS app store apps has invalid ConfigurationURI configuration</li><li>5137 - one or more MacOS app store apps has invalid ManagedAssociatedDomains configuration</li><li>5138 - one or more MacOS app store apps has invalid VppApplicationID configuration</li><li>5139 - one or more MacOS app store apps has invalid TimesPromptToInstall or PromptToInstall configuration</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/policies": {
      "get": {
        "tags": [
          "AppManagementPolicies"
        ],
        "summary": "Returns app management policy summaries",
        "description": "Returns app management policy summaries\r\n            <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementPolicies_GetRulesSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nameContains",
            "in": "query",
            "description": "App management policy name filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "families",
            "in": "query",
            "description": "If specified, returns only app management policies for the selected families",
            "required": false,
            "x-enumType": "RuleFamily",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Android",
                "Apple",
                "Windows"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "If specified, returns only app management policies having the selected status(es)",
            "required": false,
            "x-enumType": "RuleStatus",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Draft",
                "Assigned",
                "Disabled"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "isScheduled",
            "in": "query",
            "description": "When true, return app management policies that currently have a schedule. When false, only return app management policies that do not have a schedule. If undefined, then do not take schedule status into account",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Return app management policy summaries successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSummary"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/appManagement/policies/{referenceId}/actions": {
      "post": {
        "tags": [
          "AppManagementPolicies"
        ],
        "summary": "Executes an action on selected app management policy",
        "description": "Executes an action on selected app management policy\r\n             <br />\r\n             Supported Actions:\r\n             <ul><li>Enable - Enables the App management policy</li><li>Disable - Disables the App management policy</li></ul><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AppManagementPolicies_ExecuteAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App management policy reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "body",
            "description": "The action to be performed on the app management policy",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleAction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action executed successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/policies/{referenceId}/assignment": {
      "get": {
        "tags": [
          "AppManagementPolicies"
        ],
        "summary": "Returns app management policy assignment",
        "description": "Returns app management policy assignment\r\n            <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementPolicies_GetAssignment",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App management policy reference id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return app management policy assignment successfully",
            "schema": {
              "$ref": "#/definitions/AssignmentSummary"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementPolicies"
        ],
        "summary": "Updates app management policy assignment",
        "description": "Updates app management policy assignment\r\n            <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementPolicies_Assign",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App management policy reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "assignment",
            "in": "body",
            "description": "App management policy assignment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Assignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return app management policy assignment successfully",
            "schema": {
              "$ref": "#/definitions/AssignmentSummary"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/policies/{referenceId}/logs": {
      "get": {
        "tags": [
          "AppManagementPolicies"
        ],
        "summary": "Returns logs for selected app management policy",
        "description": "Returns logs for selected app management policy. Ordering is restricted to Timestamp.\r\n            <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementPolicies_GetAppCatalogRuleLogs",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App management policy reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "Log severities",
            "required": false,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "orderByDesc",
            "in": "query",
            "description": "Determines the order. If set to true order is descending",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Determines how many entities to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Determines how many entities to take",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Return app management policy logs successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppCatalogRuleLog"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/appManagement/policies/{referenceId}/logs/summary": {
      "get": {
        "tags": [
          "AppManagementPolicies"
        ],
        "summary": "Returns logs summary for selected app management policy",
        "description": "Returns logs summary for selected app management policy\r\n            <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementPolicies_GetAppCatalogRuleLogEntryCounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "App management policy reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Return app management policy log summaries successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleLogEntryCount"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/apps": {
      "get": {
        "tags": [
          "AppManagementWindowsApps"
        ],
        "summary": "Returns Windows applications' summaries",
        "description": "Returns meta data of Windows applications matching search criteria.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The search criteria should be in the URI as array and contains the following parts:\r\n            <pre><br /><b>Name</b>: Application identity name\r\n            <b>PublisherId</b>: Application publisher identity name\r\n            <b>Version</b>: Application version\r\n            <b>Architectures</b>: Application target processor architecture\r\n            <b>MatchHigherVersion</b>: Flag to specify if accept application of higher version\r\n            </pre></p>\r\n            An example below shows the URI arguments of querying 2 applications' summary:\r\n            <br /><pre>\r\n            ?[0].Name=Microsoft.VCLibs.140.00\r\n            &amp;[0].PublisherIdName=Microsoft.VCLibs.140.00\r\n            &amp;[0].Version=14.0.22929.0\r\n            &amp;[0].Architectures=X86\r\n            &amp;[0].MatchHigherVersion=true\r\n            &amp;[1].Name=Microsoft.NET.Native.Framework.1.3\r\n            &amp;[1].PublisherIdName=Microsoft.NET.Native.Framework.1.3\r\n            &amp;[1].Version=1.3.24201.0\r\n            &amp;[1].Architectures=X86\r\n            &amp;[1].MatchHigherVersion=true\r\n            </pre>",
        "operationId": "AppManagementWindowsApps_GetAppSummaries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appQueryInfos",
            "in": "query",
            "description": "Criteria to search applications",
            "required": true,
            "type": "array",
            "items": {},
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Return application meta data successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WindowsApplicationSummaryBase"
              }
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid application file contents or metadata"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/apps/{referenceId}": {
      "get": {
        "tags": [
          "AppManagementWindowsApps"
        ],
        "summary": "Returns details for the selected Windows application",
        "description": "Returns details for the Windows application referred by &lt;ReferenceID&gt;.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsApps_GetApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "appKind",
            "in": "query",
            "description": "Application kind",
            "required": true,
            "x-enumType": "ApplicationKind",
            "type": "string",
            "enum": [
              "Unknown",
              "ModernEnterprise",
              "ClassicDesktop",
              "Enterprise"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Windows application details successfully",
            "schema": {
              "$ref": "#/definitions/WindowsApplicationSummaryBase"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid application file contents or metadata"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/apps/{referenceId}/icon": {
      "get": {
        "tags": [
          "AppManagementWindowsApps"
        ],
        "summary": "Returns Windows application icon",
        "description": "Returns Windows application icon data.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsApps_GetApplicationIcon",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Application reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "appKind",
            "in": "query",
            "description": "Application kind",
            "required": true,
            "x-enumType": "ApplicationKind",
            "type": "string",
            "enum": [
              "Unknown",
              "ModernEnterprise",
              "ClassicDesktop",
              "Enterprise"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Return application icon data stream successfully",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid application file contents or metadata"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5404 - The application kind is not supported</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/apps/enterprise/external": {
      "post": {
        "tags": [
          "AppManagementWindowsApps"
        ],
        "summary": "Creates new enterprise Windows application hosted externally",
        "description": "Creates a Windows application(.xap, .appx and .msi) to be hosted externally by MobiControl.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><br />\r\n            The maximum size of the Windows application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />",
        "operationId": "AppManagementWindowsApps_AddExternalEnterpriseApplication",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Application External URL",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddExternalEnterpriseAppRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External application file uploaded successfully",
            "schema": {
              "$ref": "#/definitions/WindowsModernAppSummary"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid application file contents or metadata"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported content media type"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><response code=\"500\">Internal Error</response><ol><li>5300 - The application cannot be validated without a valid token.</li><li>5301 - The token is invalid.</li><li>5302 - Error reading the application file.</li><li>5303 - The file is signed with an incorrect token or expired certificate.</li><li>5304 - The certificate is expired.</li><li>5305 - Invalid application signer.</li><li>5306 - The file is not signed.</li><li>5307 - Invalid reference id.</li><li>5308 - The file is not a valid dependency.</li><li>5309 - The file type not supported.</li><li>5310 - Error parsing the classic application installer descriptor.</li><li>5311 - The application with reference Id: {0} is not found!</li><li>5312 - Save application {0} to database failed.</li><li>5313 - Save application {0} to database timed out.</li><li>5400 - External URI does not appear to be a valid link.</li><li>5401 - The Company Hub App (XAP/APPX file) URI is invalid.</li><li>5402 - Error parsing the parameter</li><li>5404 - The uploading application kind is not supported</li><li>5405 - Contract validation exception</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/apps/enterprise/internal": {
      "post": {
        "tags": [
          "AppManagementWindowsApps"
        ],
        "summary": "Creates new enterprise Windows application hosted internally by MobiControl",
        "description": "Uploads a Windows application(.xap, .appx and .msi) to be hosted internally by MobiControl.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />\r\n            Multipart request body must contain the following parts:\r\n            </p><ol><li>Application Kind info - Contains Content-Type and application kind, which should be one of <code>ModernEnterprise, Enterprise or ClassicDesktop</code><pre>\r\n            Content-Type: application/vnd.ms.application.metadata+json\r\n            <br />\r\n            {\"AppKind\":\"ModernEnterprise\"}\r\n            </pre></li><li>Application file - Contains application file content and headers:\r\n            <pre>\r\n            Content-Type: application/vnd.ms.application\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"{application-filename}\"\r\n            <br />\r\n            Application file content encoded in base64\r\n            </pre></li></ol>\r\n            The maximum size of the Windows application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n            An example below shows an application upload request:\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=mobicontrol_boundary\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/vnd.ms.application.metadata+json\r\n            <br />\r\n            {\"AppKind\":\"ModernEnterprise\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/vnd.ms.application\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"[self_signed]W10UWP_1.0.2.0_x86.appx\"\r\n            <br />\r\n            application data encoded in base64\r\n            --mobicontrol_boundary--\r\n            </pre>",
        "operationId": "AppManagementWindowsApps_UploadApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Internal application file uploaded successfully",
            "schema": {
              "$ref": "#/definitions/WindowsApplicationSummaryBase"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid application file contents or metadata"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported content media type"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><response code=\"500\">Internal Error</response><ol><li>5300 - The application cannot be validated without a valid token.</li><li>5301 - The token is invalid.</li><li>5302 - Error reading the application file.</li><li>5303 - The file is signed with an incorrect token or expired certificate.</li><li>5304 - The certificate is expired.</li><li>5305 - Invalid application signer.</li><li>5306 - The file is not signed.</li><li>5307 - Invalid reference id.</li><li>5308 - The file is not a valid dependency.</li><li>5309 - The file type not supported.</li><li>5310 - Error parsing the classic application installer descriptor.</li><li>5311 - The application with reference Id: {0} is not found!</li><li>5312 - Transaction to save application {0} to database failed.</li><li>5313 - Save application {0} to database timed out.</li><li>5402 - Error parsing the parameter</li><li>5404 - The uploading application kind is not supported</li><li>5405 - Contract validation exception</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/policies": {
      "post": {
        "tags": [
          "AppManagementWindowsPolicies"
        ],
        "summary": "Creates Windows app management policy",
        "description": "Creates Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsPolicies_CreatePolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "appPolicy",
            "in": "body",
            "description": "Windows app management policy info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WindowsAppCatalogRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Create Windows app management policy successfully",
            "schema": {
              "$ref": "#/definitions/WindowsAppCatalogRuleSummary"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid app policy info"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/policies/{referenceId}": {
      "get": {
        "tags": [
          "AppManagementWindowsPolicies"
        ],
        "summary": "Returns Windows app management policy details",
        "description": "Returns Windows app management policy details.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsPolicies_GetPolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Windows app management policy reference id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return app management policy successfully",
            "schema": {
              "$ref": "#/definitions/WindowsAppCatalogRuleSummary"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid reference id"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementWindowsPolicies"
        ],
        "summary": "Updates Windows app management policy",
        "description": "Updates Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsPolicies_UpdatePolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Windows app management policy reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "appPolicy",
            "in": "body",
            "description": "Windows app management policy info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WindowsAppCatalogRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Windows app management policy successfully",
            "schema": {
              "$ref": "#/definitions/WindowsAppCatalogRuleSummary"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid reference id or app policy"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AppManagementWindowsPolicies"
        ],
        "summary": "Deletes Windows app management policy",
        "description": "Deletes Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsPolicies_DeletePolicy",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Windows app management policy reference id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Windows app management policy successfully"
          },
          "400": {
            "description": "Invalid request, i.e., Invalid reference id"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "deprecated": false
      }
    },
    "/appManagement/windows/policies/{referenceId}/apps": {
      "get": {
        "tags": [
          "AppManagementWindowsPolicies"
        ],
        "summary": "Returns Windows apps for the selected policy",
        "description": "Returns apps for selected Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsPolicies_GetApplicationsByAppPolicyReferenceId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Windows app management policy reference id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return apps for selected Windows app management policy successfully",
            "schema": {
              "$ref": "#/definitions/WindowsAppCatalogRuleAppsSummary"
            }
          },
          "400": {
            "description": "Invalid request, i.e., Invalid reference id"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppManagementWindowsPolicies"
        ],
        "summary": "Updates Windows app for the selected policy",
        "description": "Updates apps for selected Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
        "operationId": "AppManagementWindowsPolicies_UpdateAppPolicyApplications",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Windows app management policy reference id",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Request to configure app policy applications",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWindowsAppCatalogRuleAppsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update apps for selected Windows app management policy successfully"
          },
          "400": {
            "description": "Invalid request, i.e., Invalid reference id or request"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Business Error<br />The following ErrorCode values can be returned:<br /><response code=\"500\">Internal Error</response><ol><li>5407 - The app policy has no application associated.</li><li>5408 - The product setting for Windows Modern application is invalid.</li><li>5409 - The product setting error, the key must not be empty.</li><li>5410 - The product setting error, the key must be no more than 255 characters.</li><li>5411 - The product setting error, the char is not allowed as key.</li><li>5411 - The product setting error, the value is more than 8192 characters.</li><li>5412 - Unable to Force Provisioned Synchronization without Provisioning for all users.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificateTemplates": {
      "get": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Returns a list of certificate templates",
        "description": "Returns the certificate templates by the provided certificate retrieval method, filtering by certificate authority type.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be grated the \"WebConsole Access\" permission.",
        "operationId": "CertificateManagement_GetCertificateTemplates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificationAuthorityTypes",
            "in": "query",
            "description": "Type of the certificate authority.",
            "required": true,
            "x-enumType": "CertificationAuthorityType",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "None",
                "AdcsPkiDcom",
                "AdcsPkiHttps",
                "AdcsScep",
                "Entrust",
                "GenericScep",
                "SymantecPki"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "method",
            "in": "query",
            "description": "Certificate retrieval method.",
            "required": false,
            "x-enumType": "CertificateRetrievalMethod",
            "type": "string",
            "enum": [
              "FileUpload",
              "PkiRequest",
              "ScepRequest",
              "WindowsScepRequest"
            ]
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities": {
      "get": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Returns a list of certification authorities",
        "description": "Returns all certification authorities.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be grated the \"WebConsole Access\" permission.",
        "operationId": "CertificateManagement_GetCertificationAuthoritySummaries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}": {
      "get": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Returns the specified certification authority",
        "description": "Returns the certification authority referenced by \"ReferenceID\"\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be grated the \"WebConsole Access\" permission.",
        "operationId": "CertificateManagement_GetCertificationAuthorityByReferenceId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Deletes the specified certification authority",
        "description": "Deletes the certification authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_DeleteCertificationAuthority",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Certification Authority deleted"
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/adcsAuthenticationCredential": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Upload ADCS Authentication Credential certificate",
        "description": "Creates a new ADCS Authentication Credential certificate for a certification authority, specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={any boundary identifier}. </p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            {\"filename\": \"&lt;filename&gt;\", \"password\": \"&lt;password&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UploadAdcsAuthenticationCredentialCertificate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3510 - MobiControl does not support multiple certificate PFX files. Please create a separate PFX file for each certificate if you want all to be installed on the device.</li><li>3511 - Certificate does not have a private key.</li><li>3512 - File is not a valid certificate.</li><li>3513 - Invalid certificate password specified.</li><li>3514 - The provided certificate is invalid because it has expired.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/adcsDcom": {
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified ADCS PKI DCOM Certification Authority",
        "description": "Updates ADCS PKI DCOM Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateAdcsPkiDcomCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdcsPkiDcomCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/adcsEnrollmentCertificate": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Upload ADCS Enrolment certificate",
        "description": "Creates a new ADCS Enrollment Certificate for a certification authority, specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={any boundary identifier}. </p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            {\"filename\": \"&lt;filename&gt;\", \"password\": \"&lt;password&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UploadAdcsEnrollmentCertificate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3510 - MobiControl does not support multiple certificate PFX files. Please create a separate PFX file for each certificate if you want all to be installed on the device.</li><li>3511 - Certificate does not have a private key.</li><li>3512 - File is not a valid certificate.</li><li>3513 - Invalid certificate password specified.</li><li>3514 - The provided certificate is invalid because it has expired.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/adcsHttps": {
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified ADCS PKI HTTPS Certification Authority",
        "description": "Updates the ADCS PKI HTTPS Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateAdcsPkiHttpsCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdcsPkiHttpsCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/adcsRootCertificate": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Upload ADCS Root certificate",
        "description": "Creates a new ADCS Root certificate for a certification authority, specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={any boundary identifier}. </p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/pkix-cert+json\r\n            {\"filename\": \"&lt;filename&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/pkix-cert\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UploadAdcsTrustedRootCertificate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3510 - MobiControl does not support multiple certificate PFX files. Please create a separate PFX file for each certificate if you want all to be installed on the device.</li><li>3511 - Certificate does not have a private key.</li><li>3512 - File is not a valid certificate.</li><li>3513 - Invalid certificate password specified.</li><li>3514 - The provided certificate is invalid because it has expired.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/adcsScep": {
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified ADCS SCEP Certification Authority",
        "description": "Updates an existing ADCS SCEP Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateAdcsScepCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdcsScepCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/certificateTemplates": {
      "get": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Returns the certificate templates for the specified certification authority",
        "description": "Returns certificate templates for the certification authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be grated the \"WebConsole Access\" permission.",
        "operationId": "CertificateManagement_GetCertificateTemplatesForCertificationAuthority",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new certificate template",
        "description": "Creates a new certificate template to the certification authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_CreateCertificateTemplateForCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateTemplate",
            "in": "body",
            "description": "The certificate template object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateTemplate"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/certificateTemplates/{certificateTemplateReferenceId}": {
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified certificate template",
        "description": "Updates an existing certificate template for a certification authority specified by the \"ReferenceID\". The certificate template to be updated is specified by the \"CertificateTemplateReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateCertificateTemplateForCertificationAuthorities",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateTemplateReferenceId",
            "in": "path",
            "description": "The reference ID of the certificate template",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateTemplate",
            "in": "body",
            "description": "The certificate template object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateTemplate"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Deletes the specified certificate template",
        "description": "Deletes a certificate template from the certification authority specified by \"ReferenceID\". The certificate template to be deleted is provided by the \"CertificateTemplateReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_DeleteCertificateTemplate",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateTemplateReferenceId",
            "in": "path",
            "description": "The reference ID of the certificate template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Certification Authority deleted"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3506 - Certificate template has references in a profile and cannot be deleted</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/entrust": {
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified Entrust Certification Authority",
        "description": "Updates an existing Entrust Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateEntrustCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntrustCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/scep": {
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified Generic SCEP Certification Authority",
        "description": "Updates an existing Generic SCEP Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateGenericScepCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenericScepCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/symantec": {
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified Symantec Certification Authority",
        "description": "Updates an existing Symantec Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateSymantecCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SymantecCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/{referenceId}/symantecCertificate": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Upload Symantec certificate",
        "description": "Creates a new Symantec P7B certificate for a certification authority specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={any boundary identifier}. </p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs7-certificates.metadata+json\r\n            {\"filename\": \"&lt;filename&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs7-certificates\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UploadSymantecP7bFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference ID of the certification authority",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3507 - The uploaded .p7b file does not match the last created Certificate Signing Request (CSR). Please generate a new CSR and try again.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/adcsDcom": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new ADCS PKI DCOM Certification Authority",
        "description": "Creates a new ADCS PKI DCOM Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_CreateAdcsPkiDcomCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdcsPkiDcomCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/adcsHttps": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new ADCS PKI HTTPS Certification Authority",
        "description": "Creates a new ADCS PKI HTTPS Certification Authority\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_CreateAdcsPkiHttpsCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdcsPkiHttpsCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/adcsScep": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new ADCS SCEP Certification Authority",
        "description": "Creates a new ADCS SCEP Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_CreateAdcsScepCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdcsScepCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/entrust": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new Entrust Certification Authority",
        "description": "Creates a new Entrust Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_CreateEntrustCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntrustCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/scep": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new Generic SCEP Certification Authority",
        "description": "Creates a new Generic SCEP Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_CreateGenericScepCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenericScepCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/symantec": {
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new Symantec Certification Authority",
        "description": "Creates new Symantec Certification Authority\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_CreateSymantecCertificationAuthority",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "certificationAuthority",
            "in": "body",
            "description": "The certification authority object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SymantecCertificationAuthority"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/certificationAuthorities/symantecCertificateRequest": {
      "get": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Returns a Symantec Certificate Signing Request",
        "description": "Returns a certificate signing request (CSR) for a Symantec Certification Authority. This CSR can then be used to generate an RA certificate on Symantec's PKI Manager.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_GenerateSymantecCertificateSigningRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/certificateManagement/extendedKeyUsage": {
      "get": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Returns a list of Extended Key Usage entries",
        "description": "Returns all Extended Key Usage entries.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be grated the \"WebConsole Access\" permission.",
        "operationId": "CertificateManagement_GetEkuEntries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Updates the specified Extended Key Usage entry",
        "description": "Updates an existing Extended Key Usage entry.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_UpdateEkuEntry",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ekuEntry",
            "in": "body",
            "description": "The Extended Key Entry to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EkuEntry"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Creates a new Extended Key Usage entry",
        "description": "Creates a new Extended Key Usage entry.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_SaveEkuEntry",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ekuEntry",
            "in": "body",
            "description": "The Extended Key Entry to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EkuEntry"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CertificateManagement"
        ],
        "summary": "Deletes the specified Extended Key Usage entry",
        "description": "Deletes Extended Key Usage entry specified by \"EkuEntry\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
        "operationId": "CertificateManagement_DeleteEkuEntry",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "ekuEntry",
            "in": "body",
            "description": "The Extended Key Entry to delete",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EkuEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Certification Authority deleted"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3508 - Extended Key Entry has references in certificate templates and cannot be deleted.</li><li>3509 - Cannot delete system generated Extended Key Usage entry.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/compliancepolicies": {
      "get": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Retrieve all compliance policies from the server",
        "description": "Retrieves all compliance policies from the server. Requires the caller be granted \"View Compliance Policies\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_GetCompliancePolicies",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "families",
            "in": "query",
            "description": "If specified, return only policies for the selected families",
            "required": false,
            "x-enumType": "ComplianceDeviceFamily",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "iOS",
                "Android",
                "Linux"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "If specified, return only policies where the name contains the specified string",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "If specified, return only policies having the selected status(es)",
            "required": false,
            "x-enumType": "CompliancePolicyStatus",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Disabled",
                "Active"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "isAssigned",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of compliance policies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompliancePolicySummary"
              }
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      },
      "post": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Create a new compliance policy",
        "description": "Creates a compliance policy as specified. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_CreateCompliancePolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "policy",
            "in": "body",
            "description": "Details of compliance policy to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompliancePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New compliance policy created",
            "schema": {
              "$ref": "#/definitions/CompliancePolicySummary"
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/compliancepolicies/{referenceId}": {
      "get": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Get a single compliance policy by referenceId",
        "description": "Retrieves details about a compliance policy. Requires the caller be granted \"View Compliance Policies\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_GetCompliancePolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy returned",
            "schema": {
              "$ref": "#/definitions/CompliancePolicySummary"
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Update an existing compliance policy",
        "description": "Updates a compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_UpdateCompliancePolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          },
          {
            "name": "policy",
            "in": "body",
            "description": "Details of the updated compliance policy",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompliancePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy has been updated",
            "schema": {
              "$ref": "#/definitions/CompliancePolicySummary"
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Delete a compliance policy by reference Id.",
        "description": "Delete a compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_DeleteCompliancePolicy",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Policy has been deleted"
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/compliancepolicies/{referenceId}/actions": {
      "get": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Get a list of actions associated with this compliance policy",
        "description": "Get the list of compliance actions for the policy. Requires the caller be granted \"View Compliance Policies\"permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_GetCompliancePolicyActions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment information has been updated",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComplianceAction"
              }
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Update a list of actions associated with this compliance policy",
        "description": "Update the actions to be taken for the compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b><br /><br />Available Action Types:<ul><li>Exchange</li><li>EmailNotification</li></ul><br /><br />Exchange action example:<pre><br />[<br />  {<br />    \"Type\": \"Exchange\",<br />    \"ExecutionDelay\": 0,<br />    \"ExecutionDelayUnit\": \"Hours\",<br />    \"ActionInformation\": \"string\",<br />    \"ExchangeServerId\" : \"string\"<br />  }<br />]</pre><br /><br />EmailNotification action example:<pre><br />[<br />  {<br />    \"Type\": \"EmailNotification\",<br />    \"RepeatCountInDays\": 1,<br />    \"EmailProfileName\": \"string\",<br />    \"Recipients\": [<br />      {<br />        \"Addressee\": \"To\",<br />        \"Email\": \"user@domain.net\"<br />      }<br />    ],<br />    \"EmailTemplateReferenceId\": \"164254a3-b47e-4f68-a82c-af75f551ec27\",<br />    \"ExecutionDelay\": 0,<br />    \"ExecutionDelayUnit\": \"Hours\",<br />    \"ActionInformation\": \"user@domain.net\"<br />  }<br />]</pre><br /><br />Available recipient addressee types (Addressee):<ul><li>To</li><li>CarbonCopy</li><li>BlindCarbonCopy</li></ul><br /><br />Available Email template reference Ids (EmailTemplateReferenceId):<ul><li>164254A3-B47E-4F68-A82C-AF75F551EC27 : user email template</li><li>6DAD0C7C-DF8B-4378-9F5C-F08E1640404F : administrator email template</li></ul>",
        "operationId": "CompliancePolicies_UpdateCompliancePolicyActions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          },
          {
            "name": "actions",
            "in": "body",
            "description": "List of actions to be taken according to the compliance",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComplianceAction"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assignment information has been updated"
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/compliancepolicies/{referenceId}/assignment": {
      "get": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Get the assignment information about a compliance policy",
        "description": "Get assignment information of a policy. Requires the caller be granted \"View Compliance Policies\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_GetAssignmentInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment information has been retrieved",
            "schema": {
              "$ref": "#/definitions/CompliancePolicyAssignmentSummary"
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Update the assignment of a compliance policy",
        "description": "Updates policy assignment. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_UpdateAssignmentInfo",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          },
          {
            "name": "assignment",
            "in": "body",
            "description": "Assignment information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompliancePolicyAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment information has been updated",
            "schema": {
              "$ref": "#/definitions/CompliancePolicyAssignmentSummary"
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Delete the assignment of a compliance policy",
        "description": "Deletes policy assignment. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_DeleteAssignment",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Assignment information has been deleted"
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/compliancepolicies/{referenceId}/disable": {
      "post": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Disable the specified compliance policy",
        "description": "Disables the compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_DisablePolicy",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/compliancepolicies/{referenceId}/enable": {
      "post": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Enable the specified compliance policy",
        "description": "Enables the compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_EnablePolicy",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/compliancepolicies/{referenceId}/logs": {
      "get": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Get compliance policy Logs",
        "description": "Returns a list of logs associated with a compliance policy. Requires the caller be granted the \"View Compliance Policies\" global permission. Ordering is restricted to Timestamp.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_GetCompliancePolicyLogs",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the compliance policy",
            "required": true,
            "type": "string"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "Return the logs whose severity matches that from the array",
            "required": false,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Return the logs whose date is startDate or later",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Only return the logs whose date is endDate or before",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of a logs based on a compliance policy reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompliancePolicyLogEntry"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or compliance policy reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/compliancepolicies/{referenceId}/logs/summary": {
      "get": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Get compliance policy logs summary",
        "description": "Returns logs summary associated with a compliance policy. Requires the caller be granted the \"View Compliance Policies\" global permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_GetCompliancePolicyLogSummaryBySeverity",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the compliance policy",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Return the logs whose date is startDate or later",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Return the logs whose date is endDate or before",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of a logs based on a compliance policy reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntryCount"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or compliance policy reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/compliancepolicies/{referenceId}/run": {
      "post": {
        "tags": [
          "CompliancePolicies"
        ],
        "summary": "Run specified compliance policy",
        "description": "Runs a compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "CompliancePolicies_RunCompliancePolicy",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/configurations/android/reEnrollment/deviceMatchCriteria": {
      "get": {
        "tags": [
          "AndroidConfiguration"
        ],
        "summary": "Returns the mechanism to identify an Android device",
        "description": "Returns the mechanism to be used by MobiControl to identify an Android device during re-enrollment<br />Requires the caller be granted the \"Web Console Access\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidConfiguration_GetDeviceMatchCriteria",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AndroidConfiguration"
        ],
        "summary": "Updates the mechanism to identify an Android device",
        "description": "Updates the mechanism to be used by MobiControl to identify an Android device during re-enrollment. This API will Accept \"DeviceId\"=\"0\" or \"HardwareId\"=\"1\" any of the key or value and perform the respective operation<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "AndroidConfiguration_UpdateDeviceMatchCriteria",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "contract to define the mechanism for device identification",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MatchDeviceCriteria"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated device match criteria"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/customattributes": {
      "get": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Retrieve List of Custom Attribute Properties",
        "description": "Returns a list of Custom Attribute properties and their respective definition. Requires the caller be granted \"Web Console Access\" permission.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "CustomAttributes_GetCustomAttributes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomAttribute"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Create Custom Attribute",
        "description": "Create custom attributes by defining the data type (text, numeric, date, boolean or enumerator), set the value and indicate whether the attribute must be populated on the device.<br />Requires the caller be granted the \"Manage Servers and Global Setting\" permission.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomAttributes_AddCustomAttribute",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customAttribute",
            "in": "body",
            "description": "custom attribute",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomAttribute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomAttribute"
            }
          }
        },
        "deprecated": false
      }
    },
    "/customattributes/{name}": {
      "get": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Retrieve an Existing Custom Attribute",
        "description": "Retrieve an existing custom attribute by specifying it's name.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomAttributes_GetCustomAttribute",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "custom attribute name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomAttribute"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Update an Existing Custom Attribute",
        "description": "Update an existing custom attribute by specifying it's name.<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomAttributes_UpdateCustomAttribute",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "customAttribute",
            "in": "body",
            "description": "custom attribute",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomAttribute"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Delete Custom Attribute",
        "description": "Delete an existing custom attribute by specifying it's name.<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomAttributes_DeleteCustomAttribute",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "custom attribute name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/customattributes/{name}/catalogueItemReferenceId": {
      "get": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Get the Custom Attribute referenceID.",
        "description": "Get the Catalogue Item ReferenceId for a specific Custom Attribute.  Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomAttributes_GetCatalogueItemReferenceIdOfCustomAttribute",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "custom attribute name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogueItemReferenceId"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Assign rights to a Custom Attribute.",
        "description": "Assign rights associated with a Catalogue Item to a Custom Attribute.<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomAttributes_AssignCatalogueItemReferenceIdToCustomAttribute",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "custom attribute name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Remove rights assigned to a Custom Attribute.",
        "description": "Remove rights associated with a Catalogue Item to a Custom Attribute.<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomAttributes_DeleteCatalogueItemReferenceIdOfCustomAttribute",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "custom attribute name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/customdata": {
      "get": {
        "tags": [
          "CustomData"
        ],
        "summary": "Retrieve List of Custom Data Properties",
        "description": "Returns a list of Custom Data properties and their respective definition. Requires the caller be granted \"Web Console Access\" permission.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "CustomData_GetCustomData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceFamily",
            "in": "query",
            "description": "Optional. Device Family type.",
            "required": false,
            "x-enumType": "DeviceFamily",
            "type": "string",
            "enum": [
              "WindowsCE",
              "Apple",
              "WindowsDesktop",
              "AndroidPlus",
              "Scanner",
              "WindowsPhone",
              "Blackberry",
              "Printer",
              "WindowsRuntime",
              "Linux"
            ]
          },
          {
            "name": "includeBuiltIn",
            "in": "query",
            "description": "Optional. Include build-in custom data",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomData"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CustomData"
        ],
        "summary": "Create New Custom Data",
        "description": "Creates new Custom Data by specifying the required properties and their respective definition. Requires the caller be granted \"Web Console Access\" permission. A unique name must be given to the Custom Data item being created. There is also limited support for special characters. Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomData_AddCustomData",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customData",
            "in": "body",
            "description": "Custom Data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomData"
            }
          }
        },
        "deprecated": false
      }
    },
    "/customdata/{name}": {
      "get": {
        "tags": [
          "CustomData"
        ],
        "summary": "Retrieve Custom Data with Specified Name",
        "description": "Retrieves Custom Data by specifying the name. Requires the caller be granted \"Web Console Access\" permission. Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomData_GetSpecificCustomData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique name of custom data",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomData"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CustomData"
        ],
        "summary": "Update Custom Data Properties",
        "description": "Updates Custom Data by specifying the required properties and their respective definition, custom data is located by name. Requires the caller be granted \"Web Console Access\" permission. Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomData_UpdateCustomData",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique name of custom data",
            "required": true,
            "type": "string"
          },
          {
            "name": "customData",
            "in": "body",
            "description": "Custom Data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomData"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CustomData"
        ],
        "summary": "Delete Custom Data with Specified Name",
        "description": "Deletes custom data by specifying the name. Requires the caller be granted \"Web Console Access\" permission.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomData_DeleteCustomData",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique name of custom data",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/customdata/{name}/catalogueItemReferenceId": {
      "get": {
        "tags": [
          "CustomData"
        ],
        "summary": "Get the Custom Data referenceID",
        "description": "Get the Catalogue Item ReferenceId for a specific Custom Data item. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomData_GetCatalogueItemReferenceIdOfCustomData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique name of custom data",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogueItemReferenceId"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CustomData"
        ],
        "summary": "Assign Rights to a Custom Data Item",
        "description": "Assign rights associated with a Catalogue Item to a Custom Data item. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomData_AssignCatalogueItemReferenceIdToCustomData",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique name of custom data",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CustomData"
        ],
        "summary": "Remove Rights Assigned to a Custom Data Item",
        "description": "Remove rights associated with a Catalogue Item to a specific Custom Data item. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "CustomData_DeleteCatalogueItemReferenceIdOfCustomData",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique name of custom data",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Retrieve a List of Device Groups",
        "description": "Recursively lists all device groups in the system, or the immediate children of a named \"parent\" device group. Results are limited to where the caller has been granted the \"View Groups\" permission on a device group. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "DeviceGroups_GetDeviceGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentPath",
            "in": "query",
            "description": "The reference ID or the path of the parent device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceGroup"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Create a Device Group",
        "description": "Creates a new device group under a specified path and outputs the created device group information. Reference ID (introduced in 14.0.0) will be generated automatically and should not be included in the request. Virtual groups are supported as of 14.0.0 with an optional a filter using the same syntax as GET /devices/search. Requires the caller be granted \"Manage Groups\" permission for the specified device group.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "DeviceGroups_AddGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceGroup",
            "in": "body",
            "description": "The new device group to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Retrieve a Single Device Group",
        "description": "Returns information about a single device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "DeviceGroups_GetDeviceGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Delete a Device Group",
        "description": "Deletes a device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted \"Manage Groups\" permission for the specified device group.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "DeviceGroups_DeleteGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/advancedConfiguration/{configurationName}/{deviceFamily}": {
      "delete": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Delete AdvancedConfiguration",
        "operationId": "DeviceGroups_DeleteAdvancedConfiguration",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group.<br />When using a reference ID, it must be prepended to the ID value, \"referenceId:\" (e.g. referenceId%3A7e39724b-6120-4c1f-96a8-c04d4570a974).<br />Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "configurationName",
            "in": "path",
            "description": "Only delete Device Groups Advanced Configuration that is targeting to the given configuration name (e.g. AndroidPlusAgentSettings)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceFamily",
            "in": "path",
            "description": "Only delete Device Groups Advanced Configuration that is targeting to the given device family (e.g. AndroidPlus)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/advancedSettings": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Retrieve Advanced Settings for a Device Group",
        "description": "Returns a list of the advanced settings and respective configuration status for a single device group identified by its reference ID (recommended)  or path.  Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "DeviceGroups_GetGroupAdvancedSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group.<br />When using a reference ID, it must be prepended to the ID value, \"referenceId:\" (e.g. referenceId%3A7e39724b-6120-4c1f-96a8-c04d4570a974).<br />Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceGroupAdvancedSettingsStatus"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Clear All Advanced Configuration Settings from the Target Group",
        "description": "This reverts the device group configurations to their default values, which is either inherited from a parent group, a system-wide setting, or not configured.<br /><b>(Available Since MobiControl v14.1.0)</b>",
        "operationId": "DeviceGroups_ClearGroupAdvancedConfigurations",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group.<br />When using a reference ID, it must be prepended to the ID value, \"referenceId:\" (e.g. referenceId%3A7e39724b-6120-4c1f-96a8-c04d4570a974).<br />Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/customAttributes": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Retrieve Values of Custom Attributes for a Device Group",
        "description": "Returns a list of values for each globally configured custom attribute for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "DeviceGroups_GetDeviceGroupCustomAttributes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomAttributeInfo"
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Update Multiple Custom Attributes for a Device Group",
        "description": "Updates one or more custom attribute values for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "DeviceGroups_UpdateDeviceGroupsCustomAttributes",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "body",
            "description": "The custom attribute name and value to set a value for.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomAttributeParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/customAttributes/{customAttributeId}": {
      "put": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Update a Single Custom Attribute for a Device Group",
        "description": "Updates one custom attribute value for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "DeviceGroups_UpdateDeviceGroupCustomAttribute",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "customAttributeId",
            "in": "path",
            "description": "The name of the custom attribute.",
            "required": true,
            "type": "string"
          },
          {
            "name": "customAttributeValue",
            "in": "body",
            "description": "The new custom attribute value. Use null or empty string to clear the custom attribute. String body parameters must be enclosed in single quotes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Clear a Single Custom Attribute for a Device Group",
        "description": "Clears a  custom attribute value for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "DeviceGroups_DeleteDeviceGroupCustomAttribute",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "customAttributeId",
            "in": "path",
            "description": "The name of the custom attribute.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/filter": {
      "put": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Update a Virtual Group Filter",
        "description": "Updates a virtual device group filter identified by its reference ID (recommended) or path. Filter syntax is the same as /devices/search. Requires the caller be granted the \"Manage Groups\" permission for the specified group.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "DeviceGroups_UpdateVirtualGroupFilter",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "newFilter",
            "in": "body",
            "description": "The new filter for the virtual group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualDeviceGroupFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/icon": {
      "put": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Update a Device Group Icon",
        "description": "Updates the icon color of a device group identified by its path and outputs the updated device deviceGroup information.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "DeviceGroups_UpdateDeviceGroupIcon",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "newIcon",
            "in": "body",
            "description": "The new icon color. Must be enclosed in single quotes.",
            "required": true,
            "schema": {
              "enum": [
                "Yellow",
                "Red",
                "Green",
                "Blue",
                "Purple",
                "Cyan",
                "None"
              ],
              "type": "string",
              "x-enumType": "DeviceGroupIcon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/members": {
      "post": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Add or Move a Devices to a Device Group",
        "description": "Moves one or more devices identified by their device IDs to a device group identified by its reference ID (recommended) or path. In the case the destination is a virtual group, devices will be added to the group rather than moved. Any advanced settings configured for the devices specifically can either be maintained or inherited from the new device group (cleared). Requires the caller be granted the \"View Groups\" and \"Manage Devices\" permission for both the source and destination device groups.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "DeviceGroups_AddDeviceGroupMembers",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceIds",
            "in": "body",
            "description": "Array of device identifiers",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "clearConfigurations",
            "in": "query",
            "description": "Clear any advanced setting/configuration values on the device(s) when moving and inherit these values from the new parent group",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/members/actions": {
      "post": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Send Actions to Devices Within a Group",
        "description": "Sends actions to all devices within a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the permission for the respective action on the specified device group. Refer to  GET /deviceschema for the parameters of each supported action.<br /><B>(Available Since MobiControl v14.0.0)</B><br /><br />Supported actions:<ul><li>Checkin - Requests the device to communicate with the server and update its information</li><li>Disable - Disconnects a device from the MobiControl deployment server. Disconnected devices will not receive configuration changes or updates from MobiControl until they are re-enabled</li><li>DisableAgentUpgrade - Prevent devices from upgrading their agent at the next scheduled or manually requested checkin</li><li>EnableAgentUpgrade - Allow devices to upgrade their agent at the next scheduled or manually requested checkin</li><li>Locate - Request the device to send its current location</li><li>Lock - Request the device return to the lock screen and in some cases display a message</li><li>SendMessage - Sends a message to the MobiControl agent that is displayed to the active user</li><li>SendScript - Sends a script to the device to be executed immediately upon receiving it</li><li>SendScriptViaPns - Sends a script via Platform Notification Service. (Android Plus only)</li><li>SendScriptViaSms - Sends a script via SMS, long scripts will be separated and sent in multiple messages</li><li>SoftReset - Performs device soft reset</li><li>SyncFilesNow - Sync files now</li><li>ResetPasscode - Reset the passcode on the target Android or Android+ device.</li><li>UpgradeAgentNow - Upgrade agent immediately if the agent has already enabled for upgrade</li></ul>",
        "operationId": "DeviceGroups_SendActionToGroupMembers",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionInfo",
            "in": "body",
            "description": "The action and its respective parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionBase"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/members/actions/v2": {
      "post": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Send Actions to Devices Within a Group",
        "description": "Sends actions to all devices within a single device group identified by its reference ID (recommended) or path (devices can also be filtered by search criteria). Requires the caller be granted the permission for the respective action on the specified device group. Refer to  GET /deviceschema for the parameters of each supported action.<br /><B>(Available Since MobiControl v15.0.0)</B><br /><br />Supported actions:<ul><li>Checkin - Requests the device to communicate with the server and update its information</li><li>Disable - Disconnects a device from the MobiControl deployment server. Disconnected devices will not receive configuration changes or updates from MobiControl until they are re-enabled</li><li>DisableAgentUpgrade - Prevent devices from upgrading their agent at the next scheduled or manually requested checkin</li><li>EnableAgentUpgrade - Allow devices to upgrade their agent at the next scheduled or manually requested checkin</li><li>Locate - Request the device to send its current location</li><li>Lock - Request the device return to the lock screen and in some cases display a message</li><li>SendMessage - Sends a message to the MobiControl agent that is displayed to the active user</li><li>SendScript - Sends a script to the device to be executed immediately upon receiving it</li><li>SendScriptViaPns - Sends a script via Platform Notification Service. (Android Plus only)</li><li>SendScriptViaSms - Sends a script via SMS, long scripts will be separated and sent in multiple messages</li><li>SoftReset - Performs device soft reset</li><li>SyncFilesNow - Sync files now</li><li>ResetPasscode - Reset the passcode on the target Android or Android+ device.</li><li>UpgradeAgentNow - Upgrade agent immediately if the agent has already enabled for upgrade</li></ul>",
        "operationId": "DeviceGroups_SendActionToGroupMembersV2",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupAction",
            "in": "body",
            "description": "The action and filter for device search.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkDeviceGroupAction"
            }
          },
          {
            "name": "includeSubgroups",
            "in": "query",
            "description": "If action should be executed on devices in all descendant groups",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/members/lastKnownLocation": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Retrieve Last Known Locations of Devices From a Device Group",
        "description": "Returns a list of last known location values for each device in device group. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "DeviceGroups_RetrieveLocationsOfGroupMembers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewRectLimits",
            "in": "query",
            "description": "Comma separated string representing Top, Left, Bottom and Right Coordinates of the current view rectangle.  There must be exactly 4 values, in a correct range: Top/Bottom, representing Latitude, should be in [-90, 90] when Bottom is less then Top. Left/Right, representing Longitude, should be in [-180, 180]. For example: \"86,-140,-32,112\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceLocation"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/members/locationStatuses": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Get Status of Location Action for Devices From a Device Group",
        "description": "Returns a BulkDeviceLocationActionStatus class with the number of devices which succeeded, failed or pending location in device group. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "DeviceGroups_GetStatusOfLocationActionForGroupMembers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeSubgroups",
            "in": "query",
            "description": "Indicates that action should be executed on devices in all descendant groups (subgroups would be available since MVP2)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkDeviceActionStatus"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/members/notes": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Retrieves Notes from Member Devices of a Group",
        "description": "Returns a list of notes for all devices that are members of the requested group, as well as members of the subgroups of the requested group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "DeviceGroups_GetMemberNotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemberNote"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/members/remove": {
      "post": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Remove Devices From a Virtual Group",
        "description": "Removes one or more devices identified by their device IDs from a virtual group identified by its reference ID (recommended) or path. Not applicable to virtual groups with filter criteria. Requires the caller be granted the \"View Groups\" and \"Manage Devices\" permission for both the source and destination device groups.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "DeviceGroups_RemoveDeviceGroupMembers",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceIds",
            "in": "body",
            "description": "Array of device identifiers",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/name": {
      "put": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Rename a Device Group",
        "description": "Renames a device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted the \"View Groups\" and \"Manage Groups\" permissions for the specified path.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "DeviceGroups_RenameGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "newName",
            "in": "body",
            "description": "The new name for the group. String body parameters must be enclosed in single quotes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/notes": {
      "get": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Retrieve Notes for a Device Group",
        "description": "Returns a list of notes for a single device group identified by its reference ID (recommended) or path.<br /><b>(Available Since MobiControl v14.0.1)</b>",
        "operationId": "DeviceGroups_GetNotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Note"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Create a Note",
        "description": "Creates a new device group note under a specified group reference ID (recommended) or path and outputs the created note’s information. Requires the caller be granted the “Manage Notes” permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "DeviceGroups_AddNote",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The group path or reference ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "body",
            "description": "The note object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/notes/{referenceId}": {
      "put": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Update a Note",
        "description": "Updates the note for a device group identified by its reference ID (recommended) or path and outputs the updated note’s information. Requires the caller be granted the “Manage Notes” permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "DeviceGroups_UpdateNote",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The group path or referenceId",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The note reference identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "body",
            "description": "The note object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Delete a Note",
        "description": "Deletes a note for a device group identified by its reference ID (recommended) or path. Requires the caller be granted the “Manage Notes” permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "DeviceGroups_DeleteNote",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The group path",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The note identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{path}/path": {
      "put": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Move a Device Group",
        "description": "Updates the current parent of a device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted \"Manage Groups\" permission for the source and destination paths.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "DeviceGroups_MoveGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "newParentPath",
            "in": "body",
            "description": "The new parent group path. String body parameters must be enclosed in single quotes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceGroup"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devicegroups/{referenceId}/actions/setgroupwallpaper": {
      "post": {
        "tags": [
          "DeviceGroups"
        ],
        "summary": "Set Wallpaper for Group",
        "description": "Uploads and sets the wallpaper of all devices in a given device group, only executing actions against supported and compatible devices. Requires the caller be granted the \"Set Wallpaper\" permission on the specified device group.<br /><b>(Available Since MobiControl v14.2.2)</b><br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Multipart request body must contain the following parts:<br /><ol><li>action metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json</pre> Contains reference id of device group  <pre>{\"ReferenceId\":[\"string\"]}</pre></li><li>image file for Lock screen wallpaper - Contains Base64 encoded binary image file with Content-Type: <code>image/jpeg</code> or <code>image/png</code><br />Content-Type-Encoding: base64<br />Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"string\"<br /></li><li>image file for Home screen wallpaper - Contains Base64 encoded binary image file with Content-Type: image/jpeg or image/png <br />Content-Type-Encoding: base64<br />Content-Disposition: form-data; name=\"HomeScreenFile\"; filename=\"string\"<br /></li></ol>Currently, the maximum size of image file when using this endpoint is <u>5 MB</u>.<br /><br />The example below shows SetWallpaper group level action request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json<br />{ \"ReferenceId\" : \"referenceid:123456\" }<br />--foo_bar_baz Content-Type: image/jpeg Content-Type-Encoding: base64 Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\"<br />Base64-encoded image data --foo_bar_baz--</pre><b>Cannot execute this API as file upload not supported from this documentation page.</b>",
        "operationId": "DeviceGroups_SetWallpaper",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "the group path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeSubgroups",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve List of Devices",
        "description": "Returns a list of devices. If devices ids are specified (in a comma separated list), then no other parameters must be supplied. If no device ids are specified, then a list of all devices will be returned, or the devices found in the specified device group. \"Skip\" allows for you to define from what point you would like devices to be returned (i.e. if you are only interested devices 40 onward, you would list skip as 39). \"Take\" is equal to the number of results you would like to be returned. Results are limited to devices residing in device groups where the caller has been granted the \"View Groups\" permission. The device object is polymorphic in that extended properties, specific to the device \"Kind\", will be returned in addition to those listed here. For the complete list of properties for each kind, please refer to the online help.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "Devices_GetDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path of the parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company)",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter string. Format: Property1:Value1,Property2:Value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter",
            "in": "query",
            "description": "User filter string. Format: UserName:user or UserId:Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of devices ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceBase"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/devices/{deviceId}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Single Device",
        "description": "Returns a single device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Requires the caller be granted \"View Group\" permission on the parent device group where the device resides. The device object is polymorphic in that extended properties specific to the device \"Kind\" will be returned in addition to those listed here. For the complete list properties for each kind, please refer to the <a target=\"_blank\" href=\"http://www.soti.net/mc/help/v13/en/Content/API/\">online help</a>.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "Devices_GetDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceBase"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete Device",
        "description": "Delete a device identified by its device ID, or the device's MAC/IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. A request for the device to unenroll is also made. Requires the caller be granted the \"Manage Devices\" permission.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "Devices_DeleteDevice",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/actions": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Send Actions to a Device",
        "description": "Sends an action to a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the permission for the respective action on the device's parent device group. Refer to GET /deviceschema and POST /devices/compatibility for the parameters of each action, its applicability to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices.<br /><B>(Available Since MobiControl v13.0.0)</B><br /><br />Supported Actions:<ul><li>AdsInstallPlugIns - Installs or updates plugin for an Android device</li><li>AllowExchangeAccess - Allow device to access Exchange server through the Enterprise Resource Gateway</li><li>AllowSotiSurf - Allow device to access content delivered through the SOTI Surf application</li><li>AppleSoftwareUpdateRefreshStatus - Request the Apple device to refresh OS update status</li><li>AppleSoftwareUpdateScan - Request the Apple device to send a list of available OS updates</li><li>AppleSoftwareUpdateSchedule - Request the Apple device to update the OS</li><li>BlockExchangeAccess - Allow device to access exchange server through the Enterprise Resource Gateway</li><li>BlockSotiHub - Block Access to SOTI Hub</li><li>BlockSotiSurf - Block Access to SOTI Surf</li><li>BypassActivationLock - Bypasses activation lock on the device</li><li>Checkin - Requests the device to communicate with the server and update its information</li><li>ClearRestrictions - Clears the restrictions password and restrictions set by the user on the device</li><li>ClearSotiSurfCache - Clear SOTI Surf cache</li><li>Disable - Disconnects a device from the MobiControl deployment server. Disconnected devices will not receive configuration changes or updates from MobiControl until they are re-enabled</li><li>DisableAgentUpgrade - Prevent devices from upgrading their agent at the next scheduled or manually requested checkin </li><li>DisableLostMode - Disable Lost Mode on device</li><li>DisablePasscodeLock - Disable passcode on the device</li><li>EnableAgentUpgrade - Allow devices to upgrade their agent at the next scheduled or manually requested checkin</li><li>EnableLostMode - Enable Lost Mode on the device</li><li>FactoryReset - Performs device factory reset</li><li>Locate - Request the device to send its current location</li><li>Lock - Request the device return to the lock screen and in some cases display a message</li><li>MigrateToELMAgent - Migrate MobiControl agent on Samsung devices to the ELM agent</li><li>ResetPasscode - Reset the passcode on the target Android or Android+ device.</li><li>RemoteRing - Ask the phone to ring to locate it</li><li>ScanForViruses - Scan for virus on the device</li><li>SyncFilesNow - Sync files now</li><li>SendMessage - Sends a message to the MobiControl agent that is displayed to the active user</li><li>SoftReset - Performs device soft reset</li><li>SendScript - Sends a script to the device to be executed immediately upon receiving it</li><li>SendScriptViaSms - Sends a script via SMS, long scripts will be separated and sent in multiple messages</li><li>SendScriptViaPns - Sends a script via Platform Notification Service. (Android Plus only)</li><li>SendTestPage - Print test page on the device</li><li>TurnOffSuspend - Requests the device to turnoff or enter suspended state</li><li>Unenroll - Request the device remove its management configuration, all organization information, and return to an unmanaged state</li><li>UpdateVirusDefinition - Request the device to update its virus definitions</li><li>UpgradeAgentNow - Upgrade agent immediately if the agent has already enabled for upgrade</li><li>Wipe - Request a complete erase of the device and restore it to factory defaults</li><li>UpdateLicense - Update the License</li><li>PlaySound - Play sound on the device</li><li>SharedDeviceLogout - Logs the current user out of a shared device</li><li>SharedDeviceTroubleshoot - Attempts to resolve any issue experienced by a shared device during the login or logout process</li><li>AppFeedbackUpdate - Request the Android device to upload a report containing any changes in its app status to Google Play Server</li><li>DisableAdminMode - To enter user mode (Android only). Corresponding device action in the MobiControl Web Console: \"Enter User Mode\"</li><li>EnableAdminMode - To enter admin mode (Android only). Corresponding device action in the MobiControl Web Console: \"Enter Admin Mode\"</li><li>DisableKioskMode - To disable kiosk screen (Android, Windows CE, Windows Desktop Classic only). Corresponding device action in the MobiControl Web Console: \"Disable Kiosk Screen\"</li><li>EnableKioskMode - To enable kiosk screen (Android, Windows CE, Windows Desktop Classic only). Corresponding device action in the MobiControl Web Console: \"Enable Kiosk Screen\"</li></ul>",
        "operationId": "Devices_ExecuteAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionInfo",
            "in": "body",
            "description": "The action to be performed on the device. Some actions allow extra parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionBase"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/actions/downloaddecryptedfile": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Download Decrypted File",
        "description": "Downloads the decrypted version of the encrypted file uploaded using POST /devices/{deviceId}/actions/uploadencryptedfile.   Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Decrypt File\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_DownloadDecryptedFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "query",
            "description": "Identifier of the encrypted file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad request, ie. Invalid file contents or metadata"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/actions/generateUnlockCode": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Generate Bypass Activation Lock Code",
        "description": "Returns a code that can be used to bypass Activation Lock for a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Bypass Activation Lock\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GenerateUnlockCode",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestCode",
            "in": "body",
            "description": "The request code for unlock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GenerateUnlockCode"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/actions/setwallpaper": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Set Device Wallpaper for a Device",
        "description": "Uploads and sets the wallpaper of a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Set Wallpaper\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Multipart request body must contain the following parts:<br /><ol><li>action metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json</pre> Contains single device ID collection that should match device ID provided in URL <pre>{\"DeviceIds\":[\"string\"]}</pre></li><li>image file for Lock screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: <code>image/jpeg</code> or <code>image/png</code><br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"string\"<br /></li><li>image file for Home screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: image/jpeg or image/png <br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"HomeScreenFile\"; filename=\"string\"<br /></li></ol>Currently, the maximum size of image file when using this endpoint is <u>5 MB</u>.<br /><br />The example below shows SetWallpaper action request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json<br />{ \"DeviceIds\" : \"123456\" }<br />--foo_bar_baz Content-Type: image/jpeg Content-Transfer-Encoding: Base64 Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\"<br />Base64-encoded image data --foo_bar_baz--</pre><b>Cannot execute this API as file upload not supported from this documentation page.</b>",
        "operationId": "Devices_SetDeviceWallpaper",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request, ie. Invalid file contents or metadata"
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "Unsupported content media type"
          },
          "422": {
            "description": "Compatibility failure, Invalid file type, Image size is over 5MB"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/actions/uploadencryptedfile": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Upload Encrypted File to Decrypt",
        "description": "Uploads a file that has been encrypted by a device. If the system has the encryption keys, the file will be decrypted and available for download at GET /devices/{deviceId}/actions/downloaddecryptedfile. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Decrypt File\" permission on the device's parent device group.<br />Contains Binary or Base64 encoded binary file with Content-Type: application/octet-stream and Content-Transfer-Encoding: base64 or binary<br /><br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be multipart/related; boundary={any boundary identifier} Multipart request body must contain the following parts: Content-Type: application/octet-stream Content-Transfer-Encoding: Base64 Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\" Base64-encoded image data --foo_bar_baz--",
        "operationId": "Devices_UploadEncyptedFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EncryptedFile"
            }
          },
          "400": {
            "description": "Bad request, ie. Invalid file contents or metadata"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/advancedConfiguration/{configurationName}": {
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete Advanced Configuration based on the given DeviceId",
        "operationId": "Devices_DeleteAdvancedConfiguration",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The target device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "configurationName",
            "in": "path",
            "description": "Only delete Device Advanced Configuration that is targeting to the given configuration name (e.g. AndroidPlusAgentSettings)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/advancedConfigurations": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Advanced Settings for a Device",
        "description": "Returns a list of the advanced settings and respective configuration status for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetDeviceAdvancedConfigurations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceAdvancedConfiguration"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/appleDepInfo": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Returns information about the device's Automated Device Enrollment configuration.",
        "description": "Returns Automated Device Enrollment information for a single device identified by its device ID, or the device's MAC or IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetDepTokenInfoByDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceADEInfo"
            }
          },
          "406": {
            "description": "NotAcceptable"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/applesoftwareupdates": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Software Updates Information For a Single Device",
        "description": "Retrieves information about the software updates that are available for a specific device. Requires the caller be granted the \"View Devices\" group permission.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "Devices_GetAvailableSoftwareUpdates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SoftwareUpdates"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/appleVppInfo": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Returns information about the device's usage of App Store License accounts.",
        "description": "Returns information about the usage of App Store License accounts for a single device identified by its device ID, or the device's MAC or IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetDeviceAppleVppInformation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceAppleVppInfo"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/appPolicies": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve App Policies Associated with a Device",
        "description": "Returns all the MobiControl app policies related to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "Devices_GetAppPolicies",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceAppPolicy"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/certificates": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Certificates Associated to a Device",
        "description": "Returns certificates issued and/or installed to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetDeviceCertificates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceCertificate"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/certificates/{referenceId}/actions": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Perform a Device Specific Certificate Action",
        "description": "Executes an action against a certificate issued to a device. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Manage Devices\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_ExecuteDeviceCertificateAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "Certificate identifier of the certificate",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "body",
            "description": "Certificate action for the device",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceCertificateAction"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/collectedData": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Collected Data for a Device",
        "description": "Returns collected data of a particular type for a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Collected data is a polymorphic object in that different properties are returned depending on the requested type. Where a collected data type is not applicable to a device it will be treated as if there is no data collected.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "Devices_GetCollectedData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "builtInDataType",
            "in": "query",
            "description": "",
            "required": false,
            "x-enumType": "DeviceCollectedDataType",
            "type": "string",
            "enum": [
              "BatterySerialNumber",
              "BatteryTemperature",
              "BatteryPartNumber",
              "BatteryManufacturerDate",
              "BatteryHealthPercentage",
              "BatteryChargeCycle",
              "TotalMemory",
              "TotalStorage",
              "MACAddress",
              "DeviceName",
              "DeviceID",
              "PrinterZbiBasicForcedRuntimeError",
              "PrinterRibbonOut",
              "PrinterRibbonLow",
              "PrinterRibboninWarning",
              "PrinterRfidError",
              "PrinterRewindFull",
              "PrinterReplaceHead",
              "PrinterPaused",
              "PrinterPqJobCompleted",
              "PrinterPowerSupplyOverTemp",
              "PrinterPowerOn",
              "PrinterPaperOut",
              "PrinterMediaLow",
              "PrinterLabelReady",
              "PrinterHeadTooHot",
              "PrinterHeadOpen",
              "PrinterHeadElementBad",
              "PrinterHeadCold",
              "PrinterCutterJammed",
              "PrinterAvailableSdCardStorage",
              "PrinterCleanPrinthead",
              "PrinterBatteryLow",
              "FailedPasswordAttempts",
              "ForegroundApp",
              "MissedCalls",
              "SuccessCalls",
              "DroppedCalls",
              "AvailableExternalStorage",
              "AvailableInternalStorage",
              "OperatingSystemVersion",
              "CallLog",
              "TrafficCellularTethered",
              "TrafficCellularRoaming",
              "TrafficCellular",
              "TrafficWifi",
              "TrafficUsb",
              "BSSID",
              "CellularSignalStrength",
              "CellularCarrier",
              "IPAddress",
              "RSSI",
              "SSID",
              "Location",
              "AvailableStorage",
              "AvailableMemory",
              "BatteryStatus"
            ]
          },
          {
            "name": "customDataType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CollectedDataItem"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/devices/{deviceId}/complianceExecutedActions": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve executable compliance actions triggered on a device",
        "description": "Retrieves executable compliance actions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "Devices_GetComplianceExecutedActions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutedActionInfo"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/compliancePolicies": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve the status of all compliance policies assigned to a device",
        "description": "Retrieves the status of all compliance policies assigned to the specified device.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "Devices_GetCompliancePolicies",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get the compliance policies status of a device",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceCompliancePolicy"
              }
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/compliancePolicies/{referenceId}/run": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Run a compliance policy on a specific device",
        "description": "Runs the specified compliance policy on the specified device.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "Devices_RunCompliancePolicy",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device Id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference Id of a compliance policy.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully start compliance policy evaluation for a device"
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/contentFiles": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Content Library for a Device",
        "description": "Returns files assigned to a device through Content Library. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetDeviceContentFiles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContentFile"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/customAttributes": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Values of Custom Attributes for a Device",
        "description": "Returns a list of values for each globally configured custom attribute for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetDeviceCustomAttributes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomAttributeInfo"
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Update Multiple Custom Attributes for a Device",
        "description": "Updates one or more custom attribute values for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Edit Custom Attribute Values\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_UpdateCustomAttributes",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The target device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "body",
            "description": "The new attribute values to set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomAttributeParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/customAttributes/{customAttributeId}": {
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Update the Value of a Device Custom Attribute",
        "description": "Sets or clears the custom attribute of a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\".<br />Caller must have the “Edit Custom Attribute Values” permission for the device group where the device resides. If the request is executed correctly, the return code will be 204.<br /><B>(Available Since MobiControl v13.1.0)</B>",
        "operationId": "Devices_SetCustomAttribute",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "customAttributeId",
            "in": "path",
            "description": "The custom attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "customAttributeValue",
            "in": "body",
            "description": "The new custom attribute value. Use null to clear the custom attribute. String body parameters must be enclosed in single quotes",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Clear a Single Custom Attribute for a Device",
        "description": "Clears a  custom attribute value for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_DeleteCustomAttribute",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The target device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "customAttributeId",
            "in": "path",
            "description": "The name of the target custom attribute",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/healthAttestation": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Attestation Information for a Device",
        "description": "Returns Windows Health Attestation information for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetHealthAttestationComplianceReport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceHealthAttestationComplianceReport"
            }
          },
          "406": {
            "description": "NotAcceptable"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/installedApplications": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Installed Applications for a Device",
        "description": "Returns a list of applications that are installed on a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Pagination, ordering and filtering parameters are available.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "Devices_GetInstalledApplications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter for the return list",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstalledApplication"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/devices/{deviceId}/installedApplications/{applicationId}/actions": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Perform a Device Specific Application Action",
        "description": "Executes an action against an application installed on a device. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller to be granted the \"Manage Devices\" Device Group permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_ExecuteInstalledApplicationAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The application identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedApplicationAction",
            "in": "body",
            "description": "The installed application action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstalledApplicationAction"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/lastKnownLocation": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Last Known Location of Device",
        "description": "Returns the last known location value for a device that has previously been located.<br /><b>(Available Since MobiControl v15.0.0)</b>",
        "operationId": "Devices_RetrieveLocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "DeviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceLocation"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/linuxAvailableOSUpdates": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve available Operating System Update Information For a Single Linux Device",
        "description": "Retrieves information about the Operating System updates that are available for a specific device. Requires the caller be granted the \"View Devices\" group permission.<br /><B>(Available Since MobiControl v14.3.0)</B>",
        "operationId": "Devices_GetLinuxAvailableOSUpdateInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LinuxOSSoftwareUpdate"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/notes": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Notes for a Device",
        "description": "Returns a list of notes that are associated with a device identified by its device ID, or the device's MAC/IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "Devices_GetNotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Note"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Create a Note",
        "description": "Creates a new note for a single device identified by its device ID, or the device’s MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively and outputs the updated note information. Requires the caller be granted the “Manage Notes” permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "Devices_AddNote",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "body",
            "description": "The note object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/notes/{referenceId}": {
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Update a Note",
        "description": "Updates a note for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively and outputs the updated note information. Requires the caller be granted the “Manage Notes” permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "Devices_UpdateNote",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The note reference identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "body",
            "description": "The note object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete a Note",
        "description": "Deletes a note for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Manage Notes\" permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
        "operationId": "Devices_DeleteNote",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The note identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/PackageInstallationInfo": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get the Order of Installation for Packages on a Device",
        "description": "Returns the package installation order for a specific device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\".<br /><b>(Available Since MobiControl v14.2.0)</b>",
        "operationId": "Devices_GetPackageInstallationOrder",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DevicePackageAndContainingProfile"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/parentPath": {
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Move Device",
        "description": "Relocates a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\" to the specified device group. Requires the caller be granted the \"View Group\" permission on the source and destination device group.<br /><b>(Available Since MobiControl v13.0.0 &amp; Deprecated in v14.0.0 in favor of POST /devicegroups/{path}/members)</b>",
        "operationId": "Devices_MoveDevice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "newPath",
            "in": "body",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. The path where the device should be moved. String body parameters must be enclosed in single quotes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceBase"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/passcode": {
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Set/Clear Device Passcode",
        "description": "Sets or clears the passcode of a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Setting a passcode is supported on Android, Android+, Windows Mobile/CE/Desktop, and will otherwise be ignored. Clearing a passcode is supported on iOS. On Windows Phone a new passcode is generated and displayed in the device log in the MobiControl administration console. Requires the caller be granted the \"Manage Devices\" permission.<br />If the request is executed correctly, the return code will be 204.<br /><B>(Available Since MobiControl v13.0.0)</B>",
        "operationId": "Devices_SetPasscode",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "passcode",
            "in": "body",
            "description": "The new passcode. String body parameters must be enclosed in single quotes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/profiles": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Profiles Associated with a Device",
        "description": "Returns the profiles, including the contained payloads and respective statuses, that are associated to a device identified by its device ID, or the device's MAC/IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Devices\" permission on the parent device group where the device resides.<br /><B>(Available Since MobiControl v13.2.0)</B>",
        "operationId": "Devices_ViewDeviceProfiles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceProfile"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/profiles/{profileId}/actions": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Perform Device Specific Profile Actions",
        "description": "Installs or revokes a profile for the specified device, instead of all devices assigned the profile. Revoked profiles can be reinstalled using the \"install\" command, but only by an administrator. The \"Administratively Removed\" status is synonymous of a profile revoked at the device level. Requires the caller be granted \"Manage Devices\" permission on the parent device group where the device resides.<br /><B>(Available Since MobiControl v13.2.0)</B>",
        "operationId": "Devices_ExecuteDeviceProfileAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "The profile reference ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "body",
            "description": "The action to perform, accepted values are: 'install' and 'revoke'",
            "required": true,
            "schema": {
              "enum": [
                "Install",
                "Revoke"
              ],
              "type": "string",
              "x-enumType": "DeviceProfileAction"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/profiles/{profileId}/packages/{packageId}/{version}/actions": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Perform a Device Specific Package Action",
        "description": "Executes an action against a package assigned and/or installed on a device. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Manage Devices\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_ExecuteDevicePackageAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "The profile reference identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "The package reference identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the package",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "body",
            "description": "The action to perform. Accepted value is: 'reinstall'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DevicePackageAction"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/provisioningProfiles": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Provisioning Profiles for a Device",
        "description": "Returns a list of profiles that are provisioned on a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Pagination, ordering and filtering parameters are available.<br /><B>(Available Since MobiControl v14.1.0)</B>",
        "operationId": "Devices_GetProvisioningProfiles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter for the return list",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProvisioningProfile"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/devices/{deviceId}/quarantine": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieves Files Quarantined on a Device",
        "description": "Returns files quarantined on a device by the anti-virus/malware engine. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetDeviceQuarantineItems",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuarantineItem"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/rules": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Rules Associated with a Device",
        "description": "Returns all the MobiControl rules related to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_ViewDeviceRules",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceRule"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/support": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve the Support Contact Information for a Device",
        "description": "Returns the support contact information for a device identified by its device ID, or the devices's MAC address when deviceId is prefixed with \"mac:\". Requires the caller be granted \"Manage Devices\" permission on the parent device group where the device resides.<br /><b>(Available Since MobiControl v13.3.0)</b>",
        "operationId": "Devices_GetDeviceSupportContactInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SupportContactInformation"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/tpmVersions": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get Windows Modern TPM Specification Versions for the Given Device",
        "description": "Returns the TPM versions from a Windows Modern device identified by its device ID.<br /><b>(Available Since MobiControl v14.2.0)</b>",
        "operationId": "Devices_GetTpmVersions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TpmVersion"
            }
          },
          "406": {
            "description": "NotAcceptable"
          }
        },
        "deprecated": false
      }
    },
    "/devices/{deviceId}/user": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Set User for a Device",
        "description": "Sets the current user of a device to a known Directory or IDP User. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. The user specified must be a known-valid LDAP or IDP user, no validation will be performed on association. Use GET /directories/{directoryConnectionName}/entries to obtain the user information. LDAP user information will be synchronized per the \"LDAP Refresh Interval\". Requires the caller be granted the \"Manage Devices\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_SetDeviceUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The target device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectionName",
            "in": "query",
            "description": "The Directory or IdentityProvider connection that this user originates from. Input SsoEntity GUID for Identity Provider connection",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "body",
            "description": "The Directory or IdentityProvider user to set as the device user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceUser"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Connection type. Leave black to select Directory",
            "required": false,
            "x-enumType": "DeviceUserConnectionType",
            "type": "string",
            "enum": [
              "Directory",
              "IdentityProvider"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete User for a Device",
        "description": "Delete users from device.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_DeleteDeviceUser",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The target device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/actions": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Send Actions to Devices",
        "description": "Sends an action to multiple devices identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the permission for the respective action on the device's parent device group. Refer to GET /deviceschema and POST /devices/compatibility for the parameters of each action, its applicability to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Refer to POST /devices/{deviceId}/actions for supported actions. Note not all actions may be executed against multiple devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_ExecuteBulkAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "bulkActionInfo",
            "in": "body",
            "description": "Array of devices ids plus the action to be performed on the device. Some actions allow extra parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkDeviceAction"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/devices/actions/setwallpaper": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Set Device Wallpaper for Devices",
        "description": "Uploads and sets the wallpaper of multiple devices identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Set Wallpaper\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Multipart request body must contain the following parts:<br /><ol><li>action metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json</pre> Contains collection of device IDs  <pre>{\"DeviceIds\":[\"string\"]}</pre></li><li>image file for Lock screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: <code>image/jpeg</code> or <code>image/png</code><br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"string\"<br /></li><li>image file for Home screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: image/jpeg or image/png <br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"HomeScreenFile\"; filename=\"string\"<br /></li></ol>Currently, the maximum size of image file when using this endpoint is <u>5 MB</u>.<br /><br />The example below shows SetWallpaper action request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json<br />{ \"DeviceIds\" : \"123456\" }<br />--foo_bar_baz Content-Type: image/jpeg Content-Transfer-Encoding: Base64 Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\"<br />Base64-encoded image data --foo_bar_baz--</pre><b>Cannot execute this API as file upload not supported from this documentation page.</b>",
        "operationId": "Devices_SetBulkDeviceWallpaper",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request, ie. Invalid file contents or metadata"
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "Unsupported content media type"
          },
          "422": {
            "description": "Compatibility failure, Invalid file type, Image size is over 5MB"
          }
        },
        "deprecated": false
      }
    },
    "/devices/collectedData": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Collected Data in Bulk",
        "description": "Returns collected data of a particular type for all devices. Collected data is a polymorphic object in that different properties are returned depending on the requested type. Where a collected data type is not applicable to a device it will be treated as if there is no data collected.\r\n            <br /><B>(Available Since MobiControl v13.3.0)</B>",
        "operationId": "Devices_GetCollectedDatas",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "builtInDataType",
            "in": "query",
            "description": "Built-in device collected data type. Mutually exclusive\r\n            with customDataType.",
            "required": false,
            "x-enumType": "DeviceCollectedDataType",
            "type": "string",
            "enum": [
              "BatterySerialNumber",
              "BatteryTemperature",
              "BatteryPartNumber",
              "BatteryManufacturerDate",
              "BatteryHealthPercentage",
              "BatteryChargeCycle",
              "TotalMemory",
              "TotalStorage",
              "MACAddress",
              "DeviceName",
              "DeviceID",
              "PrinterZbiBasicForcedRuntimeError",
              "PrinterRibbonOut",
              "PrinterRibbonLow",
              "PrinterRibboninWarning",
              "PrinterRfidError",
              "PrinterRewindFull",
              "PrinterReplaceHead",
              "PrinterPaused",
              "PrinterPqJobCompleted",
              "PrinterPowerSupplyOverTemp",
              "PrinterPowerOn",
              "PrinterPaperOut",
              "PrinterMediaLow",
              "PrinterLabelReady",
              "PrinterHeadTooHot",
              "PrinterHeadOpen",
              "PrinterHeadElementBad",
              "PrinterHeadCold",
              "PrinterCutterJammed",
              "PrinterAvailableSdCardStorage",
              "PrinterCleanPrinthead",
              "PrinterBatteryLow",
              "FailedPasswordAttempts",
              "ForegroundApp",
              "MissedCalls",
              "SuccessCalls",
              "DroppedCalls",
              "AvailableExternalStorage",
              "AvailableInternalStorage",
              "OperatingSystemVersion",
              "CallLog",
              "TrafficCellularTethered",
              "TrafficCellularRoaming",
              "TrafficCellular",
              "TrafficWifi",
              "TrafficUsb",
              "BSSID",
              "CellularSignalStrength",
              "CellularCarrier",
              "IPAddress",
              "RSSI",
              "SSID",
              "Location",
              "AvailableStorage",
              "AvailableMemory",
              "BatteryStatus"
            ]
          },
          {
            "name": "customDataType",
            "in": "query",
            "description": "Custom data type. Mutually exclusive with builtInDataType.",
            "required": false,
            "type": "string"
          },
          {
            "name": "path",
            "in": "query",
            "description": "The reference ID or the path of the parent device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path of the parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company). If null, applies to ALL devices",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of entries to skip. 0 by default",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries to take. 50 by default",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CollectedDataItem"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/compatibility": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Determine Action Compatibility for Devices",
        "description": "Returns a list of compatible and incompatible devices for a given action. Compatibility criteria is based on available rights and device support (ie: OS Version, Kind of device, etc.) Devices can be identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Use this method to exclude incompatible.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_CheckDeviceActionCompatibility",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "actionInfo",
            "in": "body",
            "description": "The details of the action and devices to check",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceKindActionInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceActionCompatibilityReport"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/compatibility/actionContext": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Determine Action Compatibility for Devices",
        "description": "Returns a list of compatible and incompatible devices for a given action. Compatibility criteria is based on available rights and device support (ie: OS Version, Kind of device, etc.) Devices can be identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Use this method to exclude incompatible.<br /><b>(Available Since MobiControl v14.1.2)</b>",
        "operationId": "Devices_CheckDeviceActionCompatibilityWithContext",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "actionInfo",
            "in": "body",
            "description": "The details of the action and devices to check",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceKindActionContextInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceActionCompatibilityReport"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/customAttributes/upload": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Update the Values of Multiple Custom Attributes against Multiple Devices",
        "description": "Uploads and sets the Custom Attribute values for multiple devices as identified by their device ID. If the file format and request are acceptable, this API will always return OK, with a list of devices that failed assignment in the body of the response.<br /><b>Note:</b> Duplicate entries (same ID, same attribute name) will result in the last specified value being taken instead of the earlier ones<br /><b>(Available Since MobiControl v14.2.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/form-data; boundary={any boundary identifier}; </code><br />Multipart request body must contain the following parts:<br />Content-Transfer-Encoding of the Request body must be either <code>binary</code> or <code>base64</code><br /><ol><li>file with assignment entries - Contains text encoded file with Content-Type: <code>application/vnd.ms-excel</code><br />Content-Disposition: form-data; name=\"string\"; filename=\"string\"<br /></li></ol><br /><br />The example below shows set device users request.<br /><pre>Content-Type: multipart/related; boundary=--foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Disposition: form-data; name=\"attributes\"; filename=\"custom_attributes.csv\" Content-Transfer-Encoding: Binary Content-Type: application/vnd.ms-excel<br />text of file --foo_bar_baz</pre>",
        "operationId": "Devices_AssignCustomAttributesFromFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CsvProcessingOperationStatus"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/deviceUsers": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Set Users for Multiple Devices",
        "description": "Uploads and sets the device user for multiple devices as identified by their device ID. If the file format and request are acceptable, this API will always return OK, with a list of devices that failed assignment in the body of the response<br /><b>(Available Since MobiControl v14.2.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/form-data; boundary={any boundary identifier}; </code><br />Multipart request body must contain the following parts:<br /><ol><li>file with assignment entries - Contains text encoded file with Content-Type: <code>application/vnd.ms-excel</code><br />Content-Disposition: <code>form-data; name=\"string\"; filename=\"string\"</code><br />Content-Transfer-Encoding: <code>binary</code> or <code>base64</code></li></ol><br /><br />The example below shows set device users request.<br /><pre>Content-Type: multipart/related; boundary=--foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Disposition: form-data; name=\"userdetails\"; filename=\"tester.csv\" Content-Transfer-Encoding: binary Content-Type: application/vnd.ms-excel<br />text of file --foo_bar_baz</pre>",
        "operationId": "Devices_SetDeviceUsersFromFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CsvProcessingOperationStatus"
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices/search": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve List of Devices Matching Filter Criteria",
        "description": "Returns a list of devices matching the specified filter criteria, or all devices. Results will be limited to where the caller has been granted the \"View Groups\" permission. The device object is polymorphic in that properties specific to the device \"Kind\" will be returned in addition to the base properties applicable to all devices. Refer to the online help for details on the filter syntax.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_SearchDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "groupPath",
            "in": "query",
            "description": "The group path. The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter string. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).<br />The following operators for searching on date and time are deprecated in 14.3.0 and they will be retired in 15.0.0.<ol><li> = equal </li><li> &lt;&gt; not equal </li><li> &gt; greater than </li><li> &lt; less than </li></ol>",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeSubgroups",
            "in": "query",
            "description": "When group path is specified, determines whether descendant groups should also be included",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "verifyAndSync",
            "in": "query",
            "description": "When set to true, search results will be compared with up-to-date information and synchronized with Search service if differences are noticed",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceBase"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/devices/summary": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Retrieve Summary of Devices",
        "description": "Returns a summary count of devices with a unique property value within devices that match the given filter criteria. For example, a count of unique model numbers. Use aggregates to obtain a unique count of model numbers of each unique device family. Add a filter to obtain counts of only a subset of devices. Results will be limited to where the caller has been granted the \"View Groups\" permission. Refer to the online help for details on the filter syntax.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Devices_GetSummary",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "aggregationRequests",
            "in": "body",
            "description": "The aggregation requests",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AggregationRequest"
              }
            }
          },
          {
            "name": "groupPath",
            "in": "query",
            "description": "The reference ID or the path of the parent device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. The path of the parent group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company)",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The device filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeSubgroups",
            "in": "query",
            "description": "When group path is specified, determines whether descendant groups should also be included",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AggregationResult"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/deviceschema": {
      "get": {
        "tags": [
          "DeviceKindSchema"
        ],
        "summary": "Retrieve Device Action Schema for All Device Kinds",
        "description": "Returns a definition of actions including their supported parameters that are applicable to each respective device kind. Requires the caller be granted the \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "DeviceKindSchema_GetAllDeviceKindActionSchemata",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceKindActionSchema"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/deviceschema/{deviceKind}": {
      "get": {
        "tags": [
          "DeviceKindSchema"
        ],
        "summary": "Retrieve Device Action Schema for a Single Device Kind",
        "description": "Returns a definition of actions including their supported parameters that are applicable to a single device kind. Requires the caller be granted the \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "DeviceKindSchema_GetDeviceKindActionSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceKind",
            "in": "path",
            "description": "The device kind",
            "required": true,
            "x-enumType": "DeviceKind",
            "type": "string",
            "enum": [
              "AndroidForWork",
              "AndroidElm",
              "AndroidKnox",
              "AndroidPlus",
              "AndroidGeneric",
              "Ios",
              "Mac",
              "WindowsCE",
              "WindowsDesktop",
              "WindowsDesktopLegacy",
              "WindowsPhone",
              "WindowsRuntime",
              "ZebraPrinter",
              "Linux",
              "WindowsHoloLens",
              "WindowsXtHub",
              "Unknown"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceKindActionSchema"
            }
          }
        },
        "deprecated": false
      }
    },
    "/deviceschema/{deviceKind}/configurations": {
      "get": {
        "tags": [
          "DeviceKindSchema"
        ],
        "summary": "Retrieve Device Advanced Configuration Schema for a Single Device Kind",
        "description": "Returns the advanced configurations that are applicable to a specific device kind. Requires the caller be granted the \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "DeviceKindSchema_GetConfigurationsForKind",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceKind",
            "in": "path",
            "description": "The kind to retrieve configuration metadata for",
            "required": true,
            "x-enumType": "DeviceKind",
            "type": "string",
            "enum": [
              "AndroidForWork",
              "AndroidElm",
              "AndroidKnox",
              "AndroidPlus",
              "AndroidGeneric",
              "Ios",
              "Mac",
              "WindowsCE",
              "WindowsDesktop",
              "WindowsDesktopLegacy",
              "WindowsPhone",
              "WindowsRuntime",
              "ZebraPrinter",
              "Linux",
              "WindowsHoloLens",
              "WindowsXtHub",
              "Unknown"
            ]
          },
          {
            "name": "advancedOnly",
            "in": "query",
            "description": "Whether to return advanced configurations only",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceConfigurationSchema"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/directories/{directoryConnectionName}/entries": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Retrieve Directory Service Users and/or Groups",
        "description": "Returns Directory Service users and/or groups for a given connection based on the specified query parameters. The searchString requires one or more characters and is used as the keyword in the search pattern of the user and/or group as defined in the MobiControl Directory Service connection settings. The response will include properties specific to the object types returned (user or group).<br /><b>(Available Since MobiControl v13.3.0)</b>",
        "operationId": "Directories_GetLdapEntities",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "directoryConnectionName",
            "in": "path",
            "description": "The directory connection that the search is to be performed on. Must be double URL-encoded (e.g. SOTI%2520Directory%2520Service). When called from this page, it should be encoded only once (SOTI%20Directory%20Service).",
            "required": true,
            "type": "string"
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Value to use as the search keyword in the defined Directory Service connection search pattern",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Search directory for users and/or groups. Leave blank to search both Users and Groups.",
            "required": false,
            "x-enumType": "DirectorySearchType",
            "type": "string",
            "enum": [
              "Both",
              "User",
              "Group"
            ]
          },
          {
            "name": "memberOf",
            "in": "query",
            "description": "Limit results to members of this list of group SID values",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DirectoryEntry"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/directories/connections": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Retrieve the Names of All Currently Configured Directory Service Connections",
        "description": "This returns the names of all currently configured directory server connections.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Directories_GetLdapConnectionNames",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/directories/entries": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Retrieve All Directory Services Users and/or Groups",
        "description": "Returns Directory Service users and/or groups for all connections based on the specified query parameters. The searchString required one or more characters and is used as the keyword in the search pattern of the users and/or groups as defined in the MobiControl Directory Service connection settings. The response will include properties specific to the object types returned(users or groups).<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "Directories_GetAllLdapEntities",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Value to use as the search keyword in the defined Directory Service connection search pattern",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Search directory for users and/or groups. Leave blank to search both Users and Groups.",
            "required": false,
            "x-enumType": "DirectorySearchType",
            "type": "string",
            "enum": [
              "Both",
              "User",
              "Group"
            ]
          },
          {
            "name": "memberOf",
            "in": "query",
            "description": "Limit results to members of this list of group SID values",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DirectoryEntry"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/directoryTypes": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Returns a list of all configured LDAP and AZURE Directories",
        "description": "This returns a list of all configured LDAP and AZURE Directories<br />Requires the caller be granted the \"Web Console Access\" permission <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully returned LDAP and AZURE Directories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DirectoryEntryResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/directoryTypes/ldap": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Returns a list of all LDAP Directories",
        "description": "This returns a list of all LDAP Directories<br />Requires the caller be granted the \"Web Console Access\" permission <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_GetAllLdap",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully Returns a list of LDAP Directories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DirectoryEntryResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Directories"
        ],
        "summary": "Creates a new LDAP Directory",
        "description": "This creates a new LDAP Directory connection under MobiControl<br />Requires the caller be granted the \"Manage Directory Services\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_Add",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Contract for creating the LDAP Directory connection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LdapConnection"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created LDAP Directory",
            "schema": {
              "$ref": "#/definitions/LdapConnection"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/directoryTypes/ldap/{referenceId}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Returns the specified LDAP Directory details",
        "description": "Returns the specified LDAP Directory details against its reference ID<br />Requires the caller be granted the \"Web Console Access\" permission <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Identifier for the LDAP Directory connection to be retrieved",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned  LDAP Directory",
            "schema": {
              "$ref": "#/definitions/LdapConnection"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Directories"
        ],
        "summary": "Updates the specified LDAP Directory details",
        "description": "This updates the existing LDAP Directory connection using its requested Id. This returns the updated connection details<br />Requires the caller be granted the \"Manage Directory Services\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Identifier for the LDAP Directory connection to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "LDAP Directory connection details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LdapConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated LDAP Directory",
            "schema": {
              "$ref": "#/definitions/LdapConnection"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Directories"
        ],
        "summary": "Deletes the specified LDAP Directory",
        "description": "Deletes the specified LDAP Directory connection under MobiControl<br />Requires the caller be granted the \"Manage Directory Services\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_DeleteLdap",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Identifier for the LDAP Directory connection to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted  LDAP Directory"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/directoryTypes/ldap/actions/testConnection": {
      "post": {
        "tags": [
          "Directories"
        ],
        "summary": "Creates a LDAP Directory Test connection request",
        "description": "This is for testing the LDAP Directory connection. This returns the test connection result<br />Requires the caller be granted the \"Manage Directory Services\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_TestConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Contract for creating the LDAP Directory test connection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LdapConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully tested connection",
            "schema": {
              "$ref": "#/definitions/TestConnectionResponse"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/directoryTypes/ldap/defaultSchemas": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Returns the default schema of LDAP attributes",
        "description": "This returns the default schema of LDAP attributes<br />Requires the caller be granted the \"Web Console Access\" permission <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_GetDefaultSchemas",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully returned LDAP schema",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LdapAttribute"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/directoryTypes/ldap/providerTypes": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Returns the context provider type",
        "description": "This returns the context provider type i.e the types of Directories available<br />Requires the caller be granted the \"Web Console Access\" permission <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Directories_GetProviderTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully returned context provider type",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/emailProfiles": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get All Email Profiles",
        "description": "This returns all email profiles.<br /><b>(Available Since MobiControl v14.2.0)</b>",
        "operationId": "Email_GetEmailProfiles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailProfile"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/emailProfiles/{name}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieve a Single Email Profile",
        "description": "This returns a single email profile based on the specific query parameters.<br /><b>(Available Since MobiControl v14.2.0)</b>",
        "operationId": "Email_GetEmailProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailProfile"
            }
          }
        },
        "deprecated": false
      }
    },
    "/enrollment/{ruleId}/actions/{actionName}": {
      "post": {
        "tags": [
          "EnrollmentRules"
        ],
        "summary": "Performs the specified action on the specified Add Device Rule.",
        "description": "<br />Requires the caller to be granted the \"Manage Add Device Rule\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />The only supported value for {actionName} is 'setDefault'. Sets the specified Add Device Rule as the Default Add Device Rule for that platform.",
        "operationId": "EnrollmentRules_Save",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/enrollment/rules": {
      "get": {
        "tags": [
          "EnrollmentRules"
        ],
        "summary": "Returns a list of the summary of all the enrollment rules",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns a list of the summary of all the enrollment rules, including whether the rule is the default rule for that platform.</p>",
        "operationId": "EnrollmentRules_GetRules",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleInfo"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enrollment/settings": {
      "get": {
        "tags": [
          "EnrollmentRules"
        ],
        "summary": "Returns additional device enrollment information.",
        "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "EnrollmentRules_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DefaultRuleSetting"
            }
          }
        },
        "deprecated": false
      }
    },
    "/enrollment/userUnenrollAction": {
      "get": {
        "tags": [
          "EnrollmentConfiguration"
        ],
        "summary": "Returns the settings for the user-initiated unenroll action",
        "description": "<br />This returns the settings of the actions to be performed when the device is unenrolled by end-user<br />Requires the caller be granted the \"WebConsole\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "EnrollmentConfiguration_GetUnenrollActionSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully set log levels",
            "schema": {
              "$ref": "#/definitions/UserUnenrollmentSettings"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "EnrollmentConfiguration"
        ],
        "summary": "Updates the settings for the user-initiated unenroll action",
        "description": "<br />This updates the settings of the actions to be performed when the device is unenrolled by end-user<br />Requires the caller be granted the \"GlobalSetting\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "EnrollmentConfiguration_SetUnenrollActionSettings",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "unenrollActionSettings",
            "in": "body",
            "description": "Define the values in key value format for the action to be taken when a device is unenrolled by the end-user. Check Model for details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUnenrollmentSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully set user unenrollment settings"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/externalServices/status": {
      "get": {
        "tags": [
          "ExternalServices"
        ],
        "summary": "Gets the Status of SOTI Services.",
        "description": "Get the status of SOTI Services that are used by MobiControl. Requires the caller be granted \"View System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "ExternalServices_GetExternalServicesStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalServicesStatus"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/geofences": {
      "post": {
        "tags": [
          "Geofences"
        ],
        "summary": "Adds a New Geofence",
        "description": "Adds a new geofence with the given name and vertices.<br />Name must be unique.<br />For a geofence of N vertices, N+1 vertices must be specified in the input with the last vertex exactly equal to the first vertex.<br />Requires the caller be granted the \"Create Geofence\" permission.",
        "operationId": "Geofences_AddGeofence",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "geofenceAddRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeofenceAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the newly created geofence.",
            "schema": {
              "$ref": "#/definitions/Geofence"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Geofence request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/geofences/{name}": {
      "get": {
        "tags": [
          "Geofences"
        ],
        "summary": "Retrieves a Single Geofence",
        "description": "Retrieves a single geofence by name. Requires the caller be granted \"View Geofence\" permission.",
        "operationId": "Geofences_GetGeofence",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the geofence with specified name",
            "schema": {
              "$ref": "#/definitions/Geofence"
            }
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Geofences"
        ],
        "summary": "Renames a Geofence",
        "description": "Renames an existing geofence. The geofence to be renamed must exists. The new name must be unique. Requires the caller be granted \"Rename Geofence\" permission.",
        "operationId": "Geofences_RenameGeofence",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "geofenceName",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeofenceRename"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully renamed the geofence"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Geofence with specified name already exists"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Geofences"
        ],
        "summary": "Removes a Geofence",
        "description": "Removes a geofence by name. The geofence to be removed must not be currently used by any rule. Requires the caller be granted \"Remove Geofence\" permission.",
        "operationId": "Geofences_DeleteGeofence",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the geofence with the specified name"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Geofence is been referenced by at least one rule."
          }
        },
        "deprecated": false
      }
    },
    "/geofences/summary": {
      "get": {
        "tags": [
          "Geofences"
        ],
        "summary": "Retrieves a Summary of All Geofences",
        "description": "Retrieves a summary of all geofences. Requires the caller be granted \"View Geofence\" permission.",
        "operationId": "Geofences_GetSummaries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of geofence summaries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeofenceSummary"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/identityProviders": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Retrieve all Identity Providers configurations",
        "description": "Retrieve the configuration information for all identity providers.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "IdentityProviders_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentityProvider"
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Update an existing Identity Provider",
        "description": "Updates an existing Identity Provider<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Directory Services\" permission.",
        "operationId": "IdentityProviders_UpdateExternalIdentityProvider",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identityProvider",
            "in": "body",
            "description": "contract to update the existing identity Provider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalIdentityProvider"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Contract validation exception"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Missing mandatory parameter Name.</li><li>1 - Missing mandatory parameter Identity Provider Entity ID.</li><li>1 - Missing mandatory parameter Identity Provider URL.</li><li>1 - Missing mandatory parameter Certificates.</li><li>1 - Missing mandatory parameter Directory.</li><li>1 - Missing mandatory parameter List Attribute.</li><li>2 - Parameter Identity Provider URL has invalid value string.</li><li>2 - Parameter Logout URL has invalid value string.</li><li>2 - Parameter Identity Provider Metadata URL has invalid value string.</li><li>2 - Parameter LdapConnectionReferenceId has invalid value string.</li><li>2500 - Invalid Certificate format for '{0}' provider. The certificate should be in X509 format.</li><li>2501 - Entity with Id '{0}' does not exist</li><li>2503 - This Identity Provider is referenced by other object(s) and cannot be modified or deleted.</li></ol>"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Create an Identity Provider",
        "description": "Creates a new Identity Provider<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be grated the \"Manage Directory  Services\" permission.",
        "operationId": "IdentityProviders_AddExternalIdentityProvider",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identityProvider",
            "in": "body",
            "description": "contract to create a new identity Provider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalIdentityProvider"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Contract validation exception"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>1 - Missing mandatory parameter Name.</li><li>1 - Missing mandatory parameter Identity Provider Entity ID.</li><li>1 - Missing mandatory parameter Identity Provider URL.</li><li>1 - Missing mandatory parameter Certificates.</li><li>1 - Missing mandatory parameter Directory.</li><li>1 - Missing mandatory parameter List Attribute.</li><li>1 - Missing mandatory parameter Base64 Content.</li><li>2 - Parameter Identity Provider URL has invalid value string.</li><li>2 - Parameter Logout URL has invalid value string.</li><li>2 - Parameter Identity Provider Metadata URL has invalid value string.</li><li>2 - Parameter LdapConnectionReferenceId has invalid value string.</li><li>2500 - Invalid Certificate format for '{0}' provider. The certificate should be in X509 format.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/{identityProviderReferenceId}/LdapEntities": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Retrieve Identity Provider Users",
        "description": "Returns Identity Provider Ldap users for a given Identity Provider connection based on the specified query parameters. The searchString requires one or more characters and is used as the keyword in the search pattern oF the user as defined in the MobiControl Identity Provider connection settings.",
        "operationId": "IdentityProviders_GetIdentityProviderLdapEntities",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identityProviderReferenceId",
            "in": "path",
            "description": "Identity Provider Reference Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Value to use as the search keyword in the defined Identity Provider connection search pattern",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "x-enumType": "DirectorySearchType",
            "type": "string",
            "enum": [
              "Both",
              "User",
              "Group"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DirectoryEntry"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/{identityProviderReferenceId}/Users": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Retrieve Identity Provider Users",
        "description": "Returns Identity Provider users for a given Identity Provider connection based on the specified query parameters. The searchString requires one or more characters and is used as the keyword in the search pattern oF the user as defined in the MobiControl Identity Provider connection settings. <br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "IdentityProviders_GetIdentityProviderUsers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identityProviderReferenceId",
            "in": "path",
            "description": "Identity Provider Reference Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Value to use as the search keyword in the defined Identity Provider connection search pattern",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentityProviderUser"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/{name}": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Retrieve Identity Providers (IdP)configuration for a specified IdP name",
        "description": "Retrieve the configuration information for specified identity provider.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "IdentityProviders_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IdentityProvider"
            }
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/{referenceId}": {
      "delete": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Deleting the identity provider connection",
        "description": "Delete Identity Provider for a given connection based on the specified ReferenceID. The ReferenceID can be obtained by running the GET/IdentityProviders api. Using this API will remove all references to the Identity Provider, including all users and user groups / roles which were used. Requires the user be granted Administration access.<br /><b>(Available Since MobiControl v15.0.0)</b>",
        "operationId": "IdentityProviders_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference Id of Identity Provider",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/certificate": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns the MobiControl IdP certificate",
        "description": "Returns the MobiControl IdP certificate required for binding MobiControl with an IDP<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"WebConsole Access\" permission",
        "operationId": "IdentityProviders_GetMobiControlIdPCertificate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/connections": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Retrieve the names of all currently configured Identity Provider(IDP) connections",
        "description": "Retrieves all Identity Provider connections configured within a MobiControl environment.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "IdentityProviders_GetIdentityProviderNames",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentityProvider"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/defaultidpuserattributesschema": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Gets the default IdP User Attributes Schema",
        "operationId": "IdentityProviders_GetDefaultIdPUserAttributesSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeMapping"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/metadata": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns the MobiControl IdP metadata",
        "description": "Returns the MobiControl IdP metadata  required for binding MobiControl with an IDP<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"WebConsole Access\" permission",
        "operationId": "IdentityProviders_GetMobiControlMetadata",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/sotiidp": {
      "put": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Updating the SOTI Identity Provider connection",
        "description": "Update the client secret of the Identity Provider for Soti Identity. Requires the user be granted Administration access.<br /><b>(Available Since MobiControl v15.0.0)</b>",
        "operationId": "IdentityProviders_UpdateSotiIdentityProvider",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSotiIdentityProvider"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Configure SOTI Identity Provider",
        "description": "This allows the configuration of SOTI Identity as an Identity Provider (IdP) to MobiControl, by entering the Client ID &amp; Client Secret information received from SOTI Identity. Once this configuration has been completed, all IdP user management will occur in SOTI Identity and not in MobiControl. MobiControl will only manage Local Users which were not migrated to SOTI Identity.  This configuration will not impact permissions.  Client ID &amp; Client Secret can be retrieved from SOTI Identity when SOTI Professional Services activates SOTI Identity on SalesForce.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "IdentityProviders_CreateSotiIdentityProvider",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identityProvider",
            "in": "body",
            "description": "Mobicontrol Client ID and Secret from SOTI Identity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SotiIdentityProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SotiIdentityProvider"
            }
          }
        },
        "deprecated": false
      }
    },
    "/identityProviders/validatesotiidp": {
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Validate the Client Credentials",
        "description": "Validate the Soti Identity Client Credentials. Requires the user be granted Administration access.<b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "IdentityProviders_ValidateClientCredentials",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identityProvider",
            "in": "body",
            "description": "SotiIdentityProvider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SotiIdentityProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Boolean value",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/logs/device/{deviceId}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieve Logs for a Device",
        "description": "Retrieve device event logs specific to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Limit the results to matching criteria such as event severity and date range. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Logs_GetLogsByDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "List of log severities to include into result set",
            "required": true,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "logSources",
            "in": "query",
            "description": "List of log sources to include into result set",
            "required": true,
            "x-enumType": "EventOriginator",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "User",
                "Device",
                "Server",
                "System"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntry"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/logs/device/{deviceId}/availableAgentLogTypes": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieve Device-side Log Types for a Device",
        "description": "Retrieve available types of device-side (agent) logs that can be retrieved for a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Download Agent Logs\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Logs_GetAvailableAgentLogTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AvailableAgentLogTypes"
            }
          }
        },
        "deprecated": false
      }
    },
    "/logs/events": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieve Event Log Descriptions",
        "description": "Retrieves global event log descriptions. Requires the caller be granted \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Logs_GetAllEventDescriptors",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEventDescriptor"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/logs/group/{path}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieve Logs for a Device Group",
        "description": "Retrieve event logs for devices within a specific device group identified by its reference ID (recommended) or path. Limit the results to matching criteria such as event severity and date range. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Logs_GetLogsByGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "List of log severities to include into result set",
            "required": true,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "logSources",
            "in": "query",
            "description": "List of log sources to include into result set",
            "required": true,
            "x-enumType": "EventOriginator",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "User",
                "Device",
                "Server",
                "System"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntry"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/logs/server/{serverIdentity}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Gets the logs by server.",
        "description": "Retrieve server logs for a specific server identified by its server Identity. Limit the results to matching criteria such as server type, log Severities, log Sources, and date range.<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Logs_GetLogsByServer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "serverIdentity",
            "in": "path",
            "description": "The server identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "serverType",
            "in": "query",
            "description": "Type of the server.",
            "required": true,
            "x-enumType": "ServerType",
            "type": "string",
            "enum": [
              "Deployment",
              "ManagementService",
              "MailServer",
              "Unknown"
            ]
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "The log severities.",
            "required": true,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "logSources",
            "in": "query",
            "description": "The log sources.",
            "required": true,
            "x-enumType": "EventOriginator",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "User",
                "Device",
                "Server",
                "System"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntry"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/logs/servertype/{serverType}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Gets the type of the logs by server.",
        "description": "Retrieve server logs for servers identified by the server Type. Limit the results to matching criteria such as server type, log Severities, log Sources, and date range.<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Logs_GetLogsByServerType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "serverType",
            "in": "path",
            "description": "Type of the server.",
            "required": true,
            "x-enumType": "ServerType",
            "type": "string",
            "enum": [
              "Deployment",
              "ManagementService",
              "MailServer",
              "Unknown"
            ]
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "The log severities.",
            "required": true,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "logSources",
            "in": "query",
            "description": "The log sources.",
            "required": true,
            "x-enumType": "EventOriginator",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "User",
                "Device",
                "Server",
                "System"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntry"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/logs/summary/device/{deviceId}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieve Summary of Logs for a Device",
        "description": "Returns a count of logs specific to a device and specified time period. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Logs_GetLogsSummaryByDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntryCount"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/logs/summary/group/{path}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieve Summary of Logs for a Device Group",
        "description": "Returns a count of logs specific to devices within a device group and specified time period. Device group can be identified by its reference ID (recommended) or path. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Logs_GetLogsSummaryByGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntryCount"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/mailservers": {
      "get": {
        "tags": [
          "MailServers"
        ],
        "summary": "Retrieves all mail servers",
        "description": "Gets all mail servers.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_GetServers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MailServer"
              }
            }
          },
          "401": {
            "description": "Failed to retrieve all mail servers because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to retrieve all mail servers because the user is not authorized."
          },
          "500": {
            "description": "Failed to retrieve all mail servers due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "MailServers"
        ],
        "summary": "Creates a New Email Server",
        "description": "Creates a new mail server. Requires the caller be granted \"Manage Exchange Servers\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_CreateServer",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "body",
            "description": "The server to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MailServer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the mail server '{0}'.",
            "schema": {
              "$ref": "#/definitions/MailServer"
            }
          },
          "400": {
            "description": "Failed to create a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to create a mail server because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to create a mail server because the user is not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3904 - Failed to create the mail server '{0}' because the name already exists.</li></ol>"
          },
          "500": {
            "description": "Failed to create a mail server due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/{referenceId}": {
      "get": {
        "tags": [
          "MailServers"
        ],
        "summary": "Retrieves mail server by ID",
        "description": "Gets a mail server by ID.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_GetServer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MailServer"
            }
          },
          "400": {
            "description": "Failed to retrieve a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to retrieve a mail server because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to retrieve a mail server because the user is not authorized."
          },
          "500": {
            "description": "Failed to retrieve a mail server due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "MailServers"
        ],
        "summary": "Deletes server entry",
        "description": "Deletes the specified mail server. Requires the caller be granted \"Manage Exchange Servers\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_DeleteServer",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the mail server '{0}'."
          },
          "400": {
            "description": "Failed to delete a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to delete a mail server because the user from IP 'X' is not authenticated."
          },
          "403": {
            "description": "Failed to delete a mail server because the user is not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3910 - Failed to delete the mail server '{0}' because the server is currently used in the following compliance policies: {1}.</li></ol>"
          },
          "500": {
            "description": "Failed to rename a mail server due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/{referenceId}/name": {
      "put": {
        "tags": [
          "MailServers"
        ],
        "summary": "Rename an existing Email Server",
        "description": "Renames the specified email server. Requires the caller be granted \"Manage Exchange Servers\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_RenameServer",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Server ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "newName",
            "in": "body",
            "description": "New server name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully renamed the mail server '{0}' to '{1}'.",
            "schema": {
              "$ref": "#/definitions/MailServer"
            }
          },
          "400": {
            "description": "Failed to rename a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to rename a mail server because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to rename a mail server because the user is not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3904 - Failed to rename the mail server to '{0}' because the name already exists.</li></ol>"
          },
          "500": {
            "description": "Failed to rename a mail server due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/exchange/{referenceId}/connection": {
      "get": {
        "tags": [
          "MailServers"
        ],
        "summary": "Gets Exchange Server connection settings",
        "description": "Gets Exchange connection settings for the specified mail server.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_GetExchangeConnectionSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Server ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the connection settings info",
            "schema": {
              "$ref": "#/definitions/ExchangeServerConnectionSettings"
            }
          },
          "400": {
            "description": "Failed to retrieve an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to retrieve an Exchange Server connection because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to retrieve an Exchange Server connection because the user is not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3903 - Failed to retrieve an Exchange Server connection because the mail server was not found.</li><li>3905 - Failed to retrieve an Exchange Server '{0}' connection due to an unknown error.</li></ol>"
          },
          "500": {
            "description": "Failed to retrieve an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "MailServers"
        ],
        "summary": "Updates Exchange Server connection setting",
        "description": "Updates connection settings for the specified mail server. Requires the caller be granted \"Manage Exchange Servers\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_UpdateExchangeConnectionSettings",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Server ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "Connection settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExchangeServerConnectionSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the Exchange Server connection '{0}'."
          },
          "400": {
            "description": "Failed to update an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to update an Exchange Server connection because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to update an Exchange Server connection because the user is not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3903 - Failed to update an Exchange Server connection because the mail server was not found.</li><li>3906 - Failed to update the Exchange Server connection '{0}' due to a too long password.</li><li>3908 - Failed to create the Exchange Server connection '{0}' due to a too long password.</li><li>3912 - Failed to update the Exchange Server connection '{0}' because the certificate has expired.</li><li>3913 - Failed to update the Exchange Server connection '{0}' because the certificate was not found.</li></ol>"
          },
          "500": {
            "description": "Failed to update an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/exchange/{referenceId}/testconnection": {
      "put": {
        "tags": [
          "MailServers"
        ],
        "summary": "Tests an existing or modified Exchange Server connection",
        "description": "Tests the Exchange server connection using the settings specified.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_TestIndividualExchangeConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Server ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "(Optional) Updated connection settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExchangeServerConnectionSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully tested the Exchange Server connection to '{0}'."
          },
          "400": {
            "description": "Failed to test an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to test an Exchange Server connection because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to test an Exchange Server connection because the user is not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3911 - Failed to test the Exchange Server connection to '{0}' because you may not have the appropriate permissions to manage this Exchange Server.</li><li>3915 - Failed to test the Exchange Server connection to '{0}' because could not recover password from persisted connection.</li></ol>"
          },
          "500": {
            "description": "Failed to test an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/exchange/publickey": {
      "post": {
        "tags": [
          "MailServers"
        ],
        "summary": "Generates a certificate with private key",
        "description": "<b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "MailServers_GenerateCertificate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully generated a new certificate for Exchange Server connection.",
            "schema": {
              "$ref": "#/definitions/ExchangeSigningCertificateInfo"
            }
          },
          "401": {
            "description": "Failed to generate new Exchange Server connection certificate because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to generate new Exchange Server connection certificate because the user is not authorized."
          },
          "500": {
            "description": "Failed to generate the Exchange Server connection certificate due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/exchange/publickey/{referenceId}": {
      "get": {
        "tags": [
          "MailServers"
        ],
        "summary": "Retrieves the public part of a generated certificate stored in the db",
        "description": "<b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "MailServers_GetPublicKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Failed to retrieve the Exchange Server connection certificate due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to retrieve the Exchange Server connection certificate because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to retrieve the Exchange Server connection certificate because the user is not authorized."
          },
          "500": {
            "description": "Failed to retrieve the Exchange Server connection certificate due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/exchange/regions": {
      "get": {
        "tags": [
          "MailServers"
        ],
        "summary": "Retrieves list of regions endpoints",
        "description": "<b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "MailServers_GetRegions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Region"
              }
            }
          },
          "401": {
            "description": "Failed to retrieve the Azure national clouds because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to retrieve the Azure national clouds because the user is not authorized."
          },
          "500": {
            "description": "Failed to retrieve the Azure national clouds due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/mailservers/exchange/testconnection": {
      "post": {
        "tags": [
          "MailServers"
        ],
        "summary": "Tests Exchange Server connection",
        "description": "Tests the Exchange server connection using the settings specified.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "MailServers_TestExchangeConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "settings",
            "in": "body",
            "description": "Connection settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExchangeServerConnectionSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully tested the Exchange Server connection to '{0}'."
          },
          "400": {
            "description": "Failed to test an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
          },
          "401": {
            "description": "Failed to test an Exchange Server connection because the user from IP '{0}' is not authenticated."
          },
          "403": {
            "description": "Failed to test an Exchange Server connection because the user is not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3911 - Failed to test the Exchange Server connection to '{0}' because you may not have the appropriate permissions to manage this Exchange Server.</li><li>3915 - Failed to test the Exchange Server connection to '{0}' because could not recover password from persisted connection.</li></ol>"
          },
          "500": {
            "description": "Failed to test an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
          }
        },
        "deprecated": false
      }
    },
    "/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Retrieve a List of Packages",
        "description": "Returns a list of all packages in the system including versions of a package. Requires the caller be granted the \"View Packages\" permission.<br /><B>(Available Since MobiControl v14.3.0)</B>",
        "operationId": "Packages_GetPackages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceFamilies",
            "in": "query",
            "description": "Only return packages that are targeting one of the families in this list. Provided as a comma-separated list of Device Family. To get list of All packages user needs to leave device families as blank or pass all device families as comma separated.",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageName",
            "in": "query",
            "description": "Package Name search string",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Package"
              }
            }
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      },
      "post": {
        "tags": [
          "Packages"
        ],
        "summary": "Upload Package",
        "description": "<br />\r\n<b>Packages</b>\r\n<br />\r\n<br />\r\n<b>(Available Since MobiControl v14.0.0)</b>\r\n<br />Uploads a new package (*.pcg file), or a new version of an existing package. A new version of an existing package will be created when the name of the upload package matches an existing package, and when the version of the new package is greater than the existing package version. Requires the caller be granted the \"Manage Packages\" permission.<br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Multipart request body must contain the following parts:<br /><ol><li>package metadata - Contains json-formatted package information with Content-Type: <pre>application/vnd.soti.mobicontrol.package.metadata+json</pre></li><li>package file - Contains binary package file with Content-Type: <pre>application/vnd.soti.mobicontrol.package</pre><br />Optional headers <br />Content-Transfer-Encoding: binary<br />Content-Disposition: attachment; filename=\"{package-filename}\"<br /><br />Request Metadata <br />{\"DeviceFamily\" : \"AndroidPlus\"}<br /></li></ol>Currently, the maximum size of package file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />The example below shows package upload request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.package.metadata+json<br />{ \"DeviceFamily\" : \"AndroidPlus\" }<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.package Content-Transfer-Encoding: Binary Content-Disposition: attachment; filename=\"package_file_name.pcg\"<br />Binary package data --foo_bar_baz--</pre><br /><p><b>Applications</b><br /><br /><b>(Available Since MobiControl v15.0.0)</b><br />In addition to upload package, this interface also uploads an Android application (.apk file) by converting it into a package (.pcg file). If the name and version for the package are not provided, then the name and version will be generated from the manifest file of the Android application (.apk file). A new version of an existing package will be created when the name of the upload Android application file matches an existing package, and when the version of the new Android application file is greater than the existing package version. Requires the caller be granted the \"Manage Packages\" permission.</p><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Multipart request body must contain the following parts:</p><ol><li>application metadata - Contains json-formatted application information with Content-Type: <pre>application/vnd.android.application.metadata+json</pre></li><li>application file - Contains application file with Content-Type: <pre>application/vnd.android.application</pre><br />Optional headers <br />Content-Transfer-Encoding: binary<br />Content-Disposition: attachment; filename=\"{application-filename}\"<br /><br />Request Metadata <br />{\"DeviceFamily\" : \"AndroidPlus\", \"PackageName\": \"package\", \"PackageVersion\": \"1.0\"}<br />The \"PackageName\" and \"PackageVersion\" are optional parameters.<br /></li></ol>Currently, the maximum size of package file or the Android application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />The example below shows application upload request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.android.application.metadata+json<br />{ \"DeviceFamily\" : \"AndroidPlus\", \"PackageName\": \"package\", \"PackageVersion\": \"1.0\"}<br />--foo_bar_baz Content-Type: application/vnd.android.application<br />Content-Disposition: attachment; filename=\"application_name.apk\"<br />application data --foo_bar_baz--</pre>",
        "operationId": "Packages_CreateNewPackage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Package created successfully",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad request, ie. Invalid application or package file contents or metadata"
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "Unsupported content media type"
          },
          "422": {
            "description": "Package verification failure, ie. Invalid Application or Package Platform or Version"
          }
        },
        "deprecated": false
      }
    },
    "/packages/{referenceId}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Retrieve a Package",
        "description": "Returns a package in the system including last version of a package. Requires the caller be granted the \"View Packages\" permission.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "Packages_GetPackage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Packages"
        ],
        "summary": "Delete Package with its all versions",
        "description": "Delete Package with its all versions.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Packages_DeletePackage",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "reference id of package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/packages/{referenceId}/executionStatuses/{versionString}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Retrieve a List of Execution Status by Package",
        "description": "Returns a list of profile status for a package. Requires the caller be granted the \"View Package\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Packages_GetPackageExecution",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The package identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionString",
            "in": "path",
            "description": "Version of Package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageExecutionStatus"
            }
          }
        },
        "deprecated": false
      }
    },
    "/packages/{referenceId}/logs": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Get Package Logs",
        "description": "Returns a list of logs associated with a package. Requires the caller be granted the \"View Packages\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Packages_GetPackageLogs",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The package identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of Package",
            "required": false,
            "type": "string"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "List of log severities to include into result set",
            "required": false,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of a logs based on a package reference id and version",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageLogEntry"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or package reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/packages/{referenceId}/logs/summary": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Get Package Logs",
        "description": "Returns logs summary associated with a package. Requires the caller be granted the \"View Packages\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Packages_GetPackageLogSummaryBySeverity",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The package identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of Package",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of a logs based on a package reference id and version",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntryCount"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or package reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/packages/{referenceId}/profileStatuses": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Retrieve a List of Profiles by Package",
        "description": "Returns a list of profile status for a package. Requires the caller be granted the \"View Package\" and \"View Profile\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Packages_GetProfilesByPackage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionString",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageProfileStatus"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/packages/{referenceId}/version/{version}/download": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Download Package of selected Version",
        "description": "Download Package of selected Version<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Packages_DownloadPackage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The Package identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of Package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/packages/{referenceId}/versions": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Retrieves Versions of a Package",
        "description": "Returns a list of versions for a package identified by its reference ID. Requires the caller be granted the \"View Packages\" permission.<br /><B>(Available Since MobiControl v14.0.0)</B>",
        "operationId": "Packages_GetPackageVersions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageVersion"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/packages/{referenceId}/versions/{versionString}": {
      "delete": {
        "tags": [
          "Packages"
        ],
        "summary": "Delete Package version",
        "description": "Delete Package version.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Packages_DeletePackageVersion",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "reference id of package",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionString",
            "in": "path",
            "description": "version string of package",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildVersion",
            "in": "query",
            "description": "build version of package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/packages/DownloadGeneralFile/{fileName}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Downloads any type of general types",
        "description": "Download any general file type identified by the file name eg: McStudio.exe<br /><B>(Available Since MobiControl v14.3.0)</B>",
        "operationId": "Packages_DownloadFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "File Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the expected file",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "403": {
            "description": "Unauthorized access or the file does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/packages/job/{referenceId}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Retrieve a Package Job which contains status of the Package Creation/Generation",
        "description": "Returns a package generation job in the system. Requires the caller be granted the \"View Packages\" permission. Currently there is a limitation on fetching the completed jobs. The endpoint returns inprogress jobs and pending jobs. For completed jobs, please check packages under MobiControl UI - Packages Tab.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "Packages_GetPackageJob",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The Job Reference ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageGenerationJob"
            }
          }
        },
        "deprecated": false
      }
    },
    "/packages/v2": {
      "post": {
        "tags": [
          "Packages"
        ],
        "summary": "Upload package metadata, package files and script files for multiple platforms to generate a Package",
        "description": "<br />\r\n<b>Packages</b>\r\n<br />\r\n<br />\r\n<b>(Available Since MobiControl v15.3.0)</b>\r\n<br />Uploads package creation metadata, package script files (i.e. pre-install/post-install/pre-uninstall/post-uninstall), package files, package prompt. A new version of Package will be created/generated and stored in Mobicontrol. Requires the caller to be granted the \"Manage Packages\" permission.<br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Multipart request body must contain the following parts:<br /><ol><li>package metadata - Contains json-formatted package information with Content-Type: <pre>application/vnd.soti.mobicontrol.packagearchive.metadata+json<br />OR<br />application/vnd.soti.mobicontrol.packagearchive.metadata</pre></li><li>script file - Contains binary script file with Content-Type: <pre>application/octet-stream</pre></li><li>package file - Contains binary package file with Content-Type: <pre>application/octet-stream</pre><br />Optional headers <br />Content-Transfer-Encoding: binary<br />Content-Disposition: attachment; filename=\"{package-filename}\"<br /><br /><b>Request Metadata</b><br /><b>PackageName</b> field is a required field with maximum length of 100 characters.<br /><b>PackageVersion</b> is a required field and denotes version and is a required field.<br /><b>PackagePlatform</b> is a required field and can have possible values - Android/AndroidPlus/Linux/WindowsDesktop/WindowsCE/WindowsModern/Printer<br /><b>AdditionalSize</b> is a optional field and can have integer value<br /><b>ScriptFiles</b> is a optional field and is a array of script file objects.<br /><b>PackageFiles</b> is a required field and is array of package file objects.<br /><b>PackagePrompt</b> is a optional field that represents object with properties for Package Message Prompt.<br /><br /><b>ScriptFile Object</b> is json object with following format<br /><pre>{ \"FileName\":\"PostInstallScript.cmd\", \"ScriptTrigger\":\"PostInstall\", \"FileSourceType\":\"Binary\" } </pre><dl><dt><b>FileName</b></dt><dd>FileName field is required while adding a script file and is used to for setting the file name in package.</dd><dt><b>ScriptTrigger</b></dt><dd>ScriptTrigger field is required while adding a script file and can have possible value of PreInstall / PostInstall / PreUnInstall / PostUnInstall.</dd><dt><b>FileSourceType</b></dt><dd>FileSourceType field is required while adding a script file and can have possible value of Binary / Url.</dd></dl><br /><br /><b>PackageFile Object</b> is json object with following format<br /><pre>{ \"FileName\":\"Books.apk\", \"FileSourceType\":\"Binary\" }  </pre><dl><dt><b>FileName</b></dt><dd>FileName field is required while adding a package file and is used to for setting the file name in package.</dd><dt><b>FileSourceType</b></dt><dd>FileSourceType field is required while adding a script file and can have possible value of Binary / Url.</dd></dl><br /><br /><b>PackagePrompt Object</b> is json object with following format<br /><pre>{ \"ShowPromptBeforeInstall\": false, \"PromptMessage\":\"Install package PackageName now?\", \"PromptMessageTimeout\":10 }</pre><dl><dt><b>ShowPromptBeforeInstall</b></dt><dd>ShowPromptBeforeInstall is optional field which can have possible values true / false.</dd><dt><b>PromptMessage</b></dt><dd>PromptMessage is optional field and can have alphanumeric character upto 130 characters.</dd><dt><b>PromptMessageTimeout</b></dt><dd>PromptMessageTimeout is optional field and can have value between 10 seconds to 300 seconds. Defaults to 10 seconds.</dd></dl><br /><br /></li></ol>Currently, the maximum size of package file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />The example below shows package upload request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br /><br />--foo_bar_baz<br />Content-Type: application/vnd.soti.mobicontrol.packagearchive.metadata+json<br /><br />{<br />\"PackageName\":\"Test Package 1\", \"PackageVersion\":\"6.4.0\", \"PackagePlatform\":\"Android\", \"AdditionalSize\":\"1024\", <br />\"ScriptFiles\": [{ \"FileName\":\"PreInstallScripts.cmd\", \"ScriptTrigger\": \"PreInstall\", \"FileSourceType\": \"Binary\" }, <br />\t\t   { \"FileName\":\"PostInstallScript.cmd\", \"ScriptTrigger\":\"PostInstall\", \"FileSourceType\":\"Binary\" }, <br />\t\t   { \"FileName\":\"PreUninstallScript.cmd\", \"ScriptTrigger\":\"PreUninstall\", \"FileSourceType\":\"Binary\" }, <br />\t\t   { \"FileName\":\"PostUninstallScript.cmd\", \"ScriptTrigger\":\"PostUninstall\", \"FileSourceType\":\"Binary\" } <br />\t     ], <br />\"PackageFiles\": [{ \"FileName\":\"Books.apk\", \"FileSourceType\":\"Binary\" } ], <br />\"PackagePrompt\": { \"ShowPromptBeforeInstall\": false, \"PromptMessage\":\"Install package PackageName now?\", \"PromptMessageTimeout\":10 }<br />}<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PreInstall.cmd\"<br /><br />Binary package script file for pre install<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PostInstall.cmd\"<br /><br />Binary package script file for post install<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PreUnInstall.cmd\"<br /><br />Binary package script file for pre uninstall<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PostUnInstall.cmd\"<br /><br />Binary package script file for post uninstall<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"chrome.apk\"<br /><br />Binary package file e.g. apk, exe, reg, cab<br /><br />--foo_bar_baz--</pre><br />",
        "operationId": "Packages_CreateNewPackageV2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Package created successfully",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad request, ie. Invalid application or package file contents or metadata"
          },
          "401": {
            "description": "Unauthorized"
          },
          "415": {
            "description": "Unsupported content media type"
          },
          "422": {
            "description": "Package verification failure, ie. Invalid Application or Package Platform or Version"
          }
        },
        "deprecated": false
      }
    },
    "/product/eula": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieve Text of MobiControl EULA",
        "description": "Retrieve the text of the MobiControl End User License Agreement for the current version.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Product_GetEulaText",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "The text of the End User License Agreement was returned successfully",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Forbidden, authorization is required to use this method"
          }
        },
        "deprecated": false
      }
    },
    "/product/licenceFile": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Uploads and Sets Offline Product License File",
        "description": "Uploads and sets a product license file when access to SOTI Services for product registration is not possible. No authorization is required for this endpoint while the product is unlicensed/unregistered or a previous registration code has expired. Once successfully activated, and unauthorized attempt to call this endpoint will fail.<br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Multipart request body must contain the following parts:<br /><ol>Optional headers <br />Content-Type-Encoding: base64<br />Content-Disposition: attachment; filename=\"{license-filename}\"<br /></ol><br /><br />The example below shows offline activation request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: text/xml Content-Type-Encoding: base64 Content-Disposition: attachment; filename=\"license.xml\"<br />Base64-encoded license data --foo_bar_baz--</pre><br />Note: No authorization is required to set license file after installation of a new product or expiry of a previous registration code. Once product is successfully activated, an unauthorized attempt to set license file will fail.<br />",
        "operationId": "Product_SetLicenceFile",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "Product was successfully activated"
          },
          "400": {
            "description": "Bad request, i.e. missing or invalid license file"
          },
          "403": {
            "description": "Forbidden, authorization is required to use this method if product was registered before"
          },
          "415": {
            "description": "Unsupported content media type"
          },
          "422": {
            "description": "Product activation failed, see error message for details"
          }
        },
        "deprecated": false
      }
    },
    "/product/registrationCode": {
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Set Product Registration Code",
        "description": "Sets a product registration code and activates product with SOTI Services. No authorization is required for this endpoint while the product is unlicensed/unregistered or a previous registration code has expired. Once successfully activated, and unauthorized attempt to call this endpoint will fail.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Product_SetRegistrationCode",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "registrationCode",
            "in": "body",
            "description": "The registration data",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product was successfully activated"
          },
          "400": {
            "description": "Bad request, i.e. missing or invalid registration code"
          },
          "403": {
            "description": "Forbidden, authorization is required to use this method if product was registered before"
          },
          "422": {
            "description": "Product activation failed, see error message for details"
          }
        },
        "deprecated": false
      }
    },
    "/profiles": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get a List of Profiles",
        "description": "Returns a list of all profiles in the system. Requires the caller be granted the \"View Profiles\" global permission. Results will be limited to profiles where the caller is granted at least the \"Read\" profile-specific permission.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Profiles_GetProfiles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "nameContains",
            "in": "query",
            "description": "Only return profiles whose name contains this value",
            "required": false,
            "type": "string"
          },
          {
            "name": "withStatuses",
            "in": "query",
            "description": "Only return profiles that have statuses that match one of the values in this list. Provided as a comma-separated list of ProfileVersionStatus values.",
            "required": false,
            "type": "string"
          },
          {
            "name": "forFamilies",
            "in": "query",
            "description": "Only return profiles that are targeting one of the families in this list. Provided as a comma-separated list of DeviceFamily values",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasDraft",
            "in": "query",
            "description": "Only return profiles that have a current draft. When false, only return profiles that do not have a draft. If null, then do not take draft status into account",
            "required": false,
            "type": "boolean",
            "format": "string"
          },
          {
            "name": "hasSchedule",
            "in": "query",
            "description": "Only return profiles that currently have a schedule. When false, only return profiles that do not have a schedule. If null, then do not take schedule status into account",
            "required": false,
            "type": "boolean",
            "format": "string"
          },
          {
            "name": "autoInstallOnly",
            "in": "query",
            "description": "Only return profiles that are automatically installed. When false, this only returns profiles that are self-installed. If null, then do not take install method into account.",
            "required": false,
            "type": "boolean",
            "format": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of profiles",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProfileSummary"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      },
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Creates a New Profile",
        "description": "Creates a new profile in the system. Requires the caller be granted the \"Manage Profiles\" global permission.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Profiles_CreateProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileRequest",
            "in": "body",
            "description": "The details of the profile to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the newly created profile",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Profile request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get a Profile",
        "description": "To retrieve a single profile with the profile reference id being the input parameter.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single profile based on a profile reference id",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Delete a Profile",
        "description": "Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_DeleteProfile",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/actions/disable": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Disable a Profile",
        "description": "Disable this profile, this keeps the profile active for all currently assigned groups and devices but new assignments cannot be made to it. Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_DisableProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the profile based on a profile reference id, after performing disable action",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/actions/retry": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Retry Installing a Profile",
        "description": "Re-installation will be attempted on devices where the profile is either \"Failed\" or \"Partially Installed\". Returns the profile based on a profile reference id, after performing a retry action.<br />Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_ReinstallFailedProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the profile based on a profile reference id, after performing retry action",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/actions/revoke": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Revoke a Profile",
        "description": "Revoking a profile removes its configurations and packages from a device. You can reapply revoked profiles to devices in the future. Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_RevokeProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the profile based on a profile reference id, after performing revoke action",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/assignment": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Assignment Information of a Profile",
        "description": "Returns the assignment information, targets and options of a profile. Requires the caller be granted the \"Manage Profiles\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfileAssignmentInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionNumber",
            "in": "query",
            "description": "The version number of the profile",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the assignment information about a profile",
            "schema": {
              "$ref": "#/definitions/ProfileAssignmentInfo"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference or the profile version does not exist"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Profiles"
        ],
        "summary": "Assign the Profile",
        "description": "Assigns a profile to target groups or devices. Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.<br />Only the following filter properties are supported:<ul><li>OSVersion</li><li>Manufacturer</li><li>Model</li><li>Family</li><li>PasscodeEnabled</li><li>IsEncrypted</li><li>IsSupervised</li><li>LastAgentConnectTime</li><li>LastAgentDisconnectTime</li><li>IsAgentOnline</li><li>PrinterAdminServer.Name</li><li>Memory.TotalMemory</li><li>Memory.AvailableMemory</li><li>Memory.TotalStorage</li><li>Memory.AvailableStorage</li><li>Memory.TotalExternalStorage</li><li>Memory.AvailableExternalStorage</li><li>SIMCarrierNetwork</li><li>CellularCarrier</li><li>SelectedApn</li><li>SupportedApis</li><li>OEMVersion (Android / Android+ only)</li><li>HAS APPLICATION</li><li>HAS UserGroup</li></ul><br />The syntax for HAS APPLICATION and HAS UserGroup is different from the device filters.<br />HAS APPLICATION Examples:<ul><li>HAS APPLICATION WITH (NAME = 'AngryBirds')</li><li>NOT HAS APPLICATION WITH (NAME = 'AngryBirds')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION = '3.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &gt;&lt; '3.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &gt; '1.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &gt;= '1.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &lt; '8.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &lt;= '8.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION BETWEEN '8.1' AND '10')</li></ul><br />HAS UserGroup examples when filtering directory service groups (i.e. LDAP or Azure AD):<ul><li>HAS UserGroup WITH (Name = 'Sales' AND ConnectionName = 'LdapConn1')</li><li>HAS UserGroup WITH (Sid = '1111-1111-1111-1111')</li></ul><br />HAS UserGroup examples when filtering IdP groups:<ul><li>HAS UserGroup WITH (IdPGroupName = 'Sales' AND IdPConnectionName = 'SSO_Connection1')</li></ul><br />Note: For \"Family\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Profiles_AssignProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileAssignment",
            "in": "body",
            "description": "The profile assignment details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the profile that the package is added to",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          },
          "422": {
            "description": "Request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/assignment/targetDeviceGroups": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Add new Target Device Groups to the Profile assignment",
        "description": "Assigns new Target Device Groups to the Profile . Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v15.2.1 and v15.3.0)</b>",
        "operationId": "Profiles_AssignDeviceGroupsToProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceGroupPaths",
            "in": "body",
            "description": "List of device group paths. The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. When using Path it must be (e.g. \\\\\\\\\\\\\\\\My Company\\\\\\\\Sales Devices).<br></br> POST Payload e.g. <br></br>while using paths [\"\\\\\\\\\\\\\\\\My Company\\\\\\\\Sales Devices\",\"\\\\\\\\\\\\\\\\My Company\\\\\\\\Management Devices\"] <br></br> while using reference ids [\"referenceId:9cae0e6e-dac7-4a80-afe9-481ceb87930f\", \"referenceId:72f4191f-379d-47a9-a87d-86a2c7a780b7\"]",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the profile that the package is added to",
            "schema": {
              "$ref": "#/definitions/ProfileAssignment"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          },
          "422": {
            "description": "Request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/assignment/targetDeviceGroups/{deviceGroupPath}": {
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Remove a Target Device Group from a Profile assignment",
        "description": "Remove a Target Device Group from a Profile.  Requires the caller be granted \"Manage Groups\" permission for the specified device group.",
        "operationId": "Profiles_RevokeDevicesGroupFromProfile",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Profile Reference Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceGroupPath",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Device Group has been excluded from profile"
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          },
          "422": {
            "description": "Request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/assignment/targetDevices": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Add new Target Devices to the Profile assignment",
        "description": "Assigns new Target Devices to the Profile. Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v15.2.1 and v15.3.0)</b>",
        "operationId": "Profiles_AssignDevicesToProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceIds",
            "in": "body",
            "description": "List of device Ids. POST Payload e.g. [\"DeviceReferenceId1\",\"DeviceReferenceId2\"]",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the profile that the package is added to",
            "schema": {
              "$ref": "#/definitions/ProfileAssignment"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          },
          "422": {
            "description": "Request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/assignment/targetDevices/{deviceId}": {
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Remove a Device from a Profile Assignment",
        "description": "Remove a Device from a Profile Assignment. Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v15.2.1 and v15.3.0)</b>",
        "operationId": "Profiles_RevokeDevicesFromProfile",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Profile Reference Id Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Device has been excluded from profile"
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          },
          "422": {
            "description": "Request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/description": {
      "put": {
        "tags": [
          "Profiles"
        ],
        "summary": "Create or Update the Description of a Profile",
        "description": "Create a new version of this profile with the provided description. If a draft profile already exists, update the description of the draft to the given value. Blank values will clear the description. Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_UpdateProfileDescription",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "body",
            "description": "The new description for the profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileDescription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns a new profile with the specified description"
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/deviceAssignmentSummary": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Device Assignment Status Summary of a Profile",
        "description": "Return the device assignment status summary for a given profile. Requires the caller be granted the \"View Profiles\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfileDeviceAssignmentSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a device status summary based on a profile reference id",
            "schema": {
              "$ref": "#/definitions/DeviceAssignmentSummary"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/logs": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Profile Logs",
        "description": "Returns a list of logs associated with a profile. Requires the caller be granted the \"View Profiles\" global permission. Ordering is restricted to Timestamp.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfileLogs",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "logSeverities",
            "in": "query",
            "description": "Return the logs whose severity matches that from the array",
            "required": false,
            "x-enumType": "EventSeverity",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Information",
                "Warning",
                "Error"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Return the logs whose date is startDate or later",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Only return the logs whose date is endDate or before",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of a logs based on a profile reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProfileLogEntry"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/profiles/{referenceId}/logs/summary": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Profile logs summary",
        "description": "Returns logs summary associated with a Profile. Requires the caller be granted the \"View Profile\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfileLogSummaryBySeverity",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Return the logs whose date is startDate or later",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Return the logs whose date is endDate or before",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of a logs based on a profile reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogEntryCount"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      }
    },
    "/profiles/{referenceId}/name": {
      "put": {
        "tags": [
          "Profiles"
        ],
        "summary": "Create or Update the Name of a Profile",
        "description": "Create a new version of this profile with the provided name. If a draft already exists, update the name of the draft to the given value. Set the name of the specified profile to the given value. This name cannot be empty and must be unique. Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_UpdateProfileName",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "body",
            "description": "The new name for the profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileName"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns a new profile with the specified name"
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/packages": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Package Info of a Profile",
        "description": "Returns a list of packages associated with a profile. Requires the caller be granted the \"View Profiles\" global permission. Supported sort fields: InstallationOrder, ReferenceId, Version, Name, Size.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfilePackages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of packages based on a profile reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageInfo"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false,
        "x-infoHeader-ItemsTotalCount": true
      },
      "put": {
        "tags": [
          "Profiles"
        ],
        "summary": "Add Packages to Profile",
        "description": "Add packages to a profile in the system. Requires the caller be granted the \"Manage Profiles\" global permission.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Profiles_AddPackageToProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageInfos",
            "in": "body",
            "description": "The package info collection to be added to the profile",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageInfo"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the profile that the package is added to",
            "schema": {
              "$ref": "#/definitions/ProfileSummary"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          },
          "422": {
            "description": "Request validation failed"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/versions": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Version Info of a Profile",
        "description": "Returns a list of versions for a profile. Requires the caller be granted the \"View Profiles\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfileVersions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of versions for a profile",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProfileVersionInfo"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/profiles/{referenceId}/versions/{versionNumber}/packages": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Packages of a Profile Version",
        "description": "Returns a list of packages associated with a specific version of a profile. Requires the caller be granted the \"View Profiles\" global permission.<br />Supported sort fields: InstallationOrder, ReferenceId, Version, Name, Size.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Profiles_GetProfilePackagesByVersion",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference Id of the profile",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionNumber",
            "in": "path",
            "description": "The version number of the profile",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of packages based on a profile reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageInfo"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference or profile version does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/reports/compliancepolicies": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download CSV of filtered compliance policies",
        "description": "Download profiles results of a given search filter as CSV. Requires the caller be granted the \"View Profiles\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "Reports_GetCompliancePoliciesReport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reportHeaderFields",
            "in": "query",
            "description": "Comma separated field names to be included in the report",
            "required": true,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "File format [Currently only csv is supported.]",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "description": "Time zone offset from UTC (in Minutes)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "families",
            "in": "query",
            "description": "If specified, return only policies for the selected families",
            "required": false,
            "x-enumType": "ComplianceDeviceFamily",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "iOS",
                "Android",
                "Linux"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "If specified, return only policies where the name contains the specified string",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "If specified, return only policies having the selected status(es)",
            "required": false,
            "x-enumType": "CompliancePolicyStatus",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Disabled",
                "Active"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "isAssigned",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/reports/compliancepolicies/actions/emailReport": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email compliance policy report based upon filter criteria and configured profiles columns to targeted recipient",
        "description": "<b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "Reports_EmailCompliancePoliciesReport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailCompliancePoliciesReportParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/reports/device/{deviceId}/agentLog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download Device-side Log for a Device",
        "description": "Downloads device-side (agent) log for a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Download Agent Logs\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Reports_GetDeviceAgentLog",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentLogType",
            "in": "query",
            "description": "log type",
            "required": true,
            "x-enumType": "AgentLogType",
            "type": "string",
            "enum": [
              "Debug",
              "Install",
              "FileEncryption",
              "Security",
              "PreRebootSecurity",
              "Adb"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/reports/devices": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Downloads CSV of Device Search Result",
        "description": "Downloads results of a given search filter as CSV. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Reports_GetDeviceReports",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated field names to be included in the report",
            "required": true,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "File format [Currently only csv is supported.]",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupPath",
            "in": "query",
            "description": "The group path.The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter string",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "description": "Time zone offset from UTC",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeSubgroups",
            "in": "query",
            "description": "When group path is specified, determines whether descendant groups should also be included.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Field names are missing"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid search filter or parameters"
          },
          "500": {
            "description": "Internal search engine error"
          }
        },
        "deprecated": false
      }
    },
    "/reports/devices/actions/emailReport": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "",
        "description": "Create the new resource to send the desired report.<br /><b>(Available Since MobiControl v14.2.0)</b>",
        "operationId": "Reports_EmailDeviceReport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailDeviceReportParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "400": {
            "description": "Field names are missing"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid search filter or parameters or the specified email profile did not exist"
          },
          "500": {
            "description": "Internal search engine error"
          }
        },
        "deprecated": false
      }
    },
    "/reports/packages": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Downloads CSV of Package Search Result",
        "description": "Downloads packages results of a given search filter as CSV. Requires the caller be granted the \"View Packages\" permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Reports_GetPackagesReport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reportHeaderFields",
            "in": "query",
            "description": "Comma separated field names to be included in the report",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceFamilies",
            "in": "query",
            "description": "Only return packages that are targeting one of the families in this list. Provided as a comma-separated list of Device Family. To get list of All packages user needs to leave device families as blank or pass all device families as comma separated.",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageName",
            "in": "query",
            "description": "Package Name search string",
            "required": false,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "File format [Currently only csv is supported.]",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "description": "Time zone offset from UTC (in Minutes)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/reports/packages/actions/emailReport": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email packages report based upon filter criteria and configured packages columns to targeted recipient",
        "description": "<b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Reports_EmailPackageReport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailPackageReportParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/reports/profiles": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download CSV of Profiles Search Result",
        "description": "Download profiles results of a given search filter as CSV. Requires the caller be granted the \"View Profiles\" permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Reports_GetProfilesReport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reportHeaderFields",
            "in": "query",
            "description": "Comma separated field names to be included in the report",
            "required": true,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "File format [Currently only csv is supported.]",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "description": "Time zone offset from UTC (in Minutes)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Only return profiles whose name contains this value",
            "required": false,
            "type": "string"
          },
          {
            "name": "withStatuses",
            "in": "query",
            "description": "Only return profiles that have statuses that match one of the values in this list. Provided as a comma-separated list of ProfileVersionStatus values.",
            "required": false,
            "type": "string"
          },
          {
            "name": "forFamilies",
            "in": "query",
            "description": "Only return profiles that are targeting one of the families in this list. Provided as a comma-separated list of DeviceFamily values",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasDraft",
            "in": "query",
            "description": "Only return profiles that have a current draft. When false, only return profiles that do not have a draft. If null, then do not take draft status into account",
            "required": false,
            "type": "boolean",
            "format": "string"
          },
          {
            "name": "hasSchedule",
            "in": "query",
            "description": "Only return profiles that currently have a schedule. When false, only return profiles that do not have a schedule. If null, then do not take schedule status into account",
            "required": false,
            "type": "boolean",
            "format": "string"
          },
          {
            "name": "autoInstallOnly",
            "in": "query",
            "description": "Only return profiles that are automatically installed. When false, this only returns profiles that are self-installed. If null, then do not take install method into account.",
            "required": false,
            "type": "boolean",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/reports/profiles/actions/emailReport": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email profile report based upon filter criteria and configured profiles columns to targeted recipient",
        "description": "<b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Reports_EmailProfileReport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProfileReportParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/search/configuration": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get Search Engine Configuration",
        "description": "Returns current Search Engine configuration information. Requires the caller be granted the \"Administration\" permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
        "operationId": "Search_GetSearchEngineConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchEngineConfiguration"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Set Search Engine Configuration",
        "description": "Updates the Search Engine configuration information using engineConfiguration as a mandatory parameter. Requires the caller be granted the \"Administration\" permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
        "operationId": "Search_SetSearchEngineConfiguration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "engineConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchEngineConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/search/executeRawRequest": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Executes raw MobiControl search request",
        "description": "Executes raw MobiControl Search request. For power users who are familiar with ElasticSearch REST API only.<br />Requires EnableRawElasticSearchRequests to be set to \"1\" in the Settings table<br /><b>(Available Since MobiControl v15.1.0)</b>",
        "operationId": "Search_ExecuteRawRequest",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "elasticSearchRequest",
            "in": "body",
            "description": "Raw MobiControl Search request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ElasticSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/search/health": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get Search Engine Health Status",
        "description": "Returns current Search Engine health status. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Search_GetHealthStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Gets Search Engine Health Status",
            "schema": {
              "$ref": "#/definitions/SearchEngineHealthStatus"
            }
          }
        },
        "deprecated": false
      }
    },
    "/search/index": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get Search Synchronization Results",
        "description": "Returns current and historical MobiControl Search index synchronization results that describes the integrity of the index at the time of completion, or the progress of an indexing process if currently running. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Search_GetStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets synchronization results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SearchEngineStatus"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Starts Incremental Search Synchronization",
        "description": "Initiates synchronization which will compare and update the MobiControl Search index using the MobiControl database as the source of true. During regular operation MobiControl will ensure the index is updated in real-time, and therefore this synchronization process is needed only as a failsafe. Only one synchronization process can be running at a time across all Management Services, and results can be requested periodically via the GET /search/index method. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Search_StartIncrementalSync",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "202": {
            "description": "Indexing started successfully",
            "schema": {
              "$ref": "#/definitions/SearchEngineStatus"
            }
          },
          "406": {
            "description": "Indexing is currently running"
          },
          "409": {
            "description": "Indexing cannot be started because another server is currently starting it"
          }
        },
        "deprecated": false
      }
    },
    "/search/index/all": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Starts Full Search Synchronization",
        "description": "Recreates ElasticSearch indexes and type mapping and synchronizes the data. Use with caution.",
        "operationId": "Search_StartFullSync",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/search/status": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Gets the Health Status of MobiControl Search Engine.",
        "description": "Get the Health Status of MobiControl Search Engine. Requires the caller be granted \"View System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "Search_GetElasticSearchStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ElasticSearchStats"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "deprecated": false
      }
    },
    "/security/{portalName}/externalAuthentication": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Returns the authentication setting for specified portal",
        "description": "Returns the authentication setting for specified portal hosted along with MobiControl<br />Requires the caller be granted the \"Web Console Access\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Security_GetExternalAuthenticationSecurity",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "portalName",
            "in": "path",
            "description": "Security portal name e.g. SSP, IOSProfileCatalog, WebConsole",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns external authentication security settings",
            "schema": {
              "$ref": "#/definitions/EndpointSecuritySettings"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Updates the authentication setting for specified portal",
        "description": "Updates the authentication setting for specified portal hosted along with MobiControl<br />Requires the caller be granted the \"Manage Console Security\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Security_SetExternalAuthenticationSecurity",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "portalName",
            "in": "path",
            "description": "Security portal name e.g. SSP, IOSProfileCatalog and WebConsole",
            "required": true,
            "type": "string"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "Security settings object contains the authentication type and authentication service name.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointSecuritySettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the authentication settings"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/security/accessControlPolicy": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Returns the access control configuration",
        "description": "Returns the access control &amp; password policy configuration<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"WebConsole Access\" permission",
        "operationId": "Security_GetAccessControlPolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Updates the access policy configuration",
        "description": "Updates the access control &amp; password policy configuration<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Console Security\" permission",
        "operationId": "Security_PutAccessControlPolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "contract to define the configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetAccessControlPolicy"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the access control config"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/security/administrator/password": {
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Set Default Administrator's Password",
        "description": "Sets the initial password for the default \"administrator\" user. No authorization is required for this endpoint while the system has console security disabled. Once the administrator account has been configured console security is enabled calls to this endpoint will fail.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_SetAdministratorPassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "password",
            "in": "body",
            "description": "The password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Administrator password was successfully set"
          },
          "400": {
            "description": "Bad request, i.e. missing or invalid password"
          },
          "403": {
            "description": "Forbidden, administrator user already exists"
          }
        },
        "deprecated": false
      }
    },
    "/security/assets/{assetType}/{referenceId}/rights": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Gets rights of an asset with specified asset type and reference id",
        "description": "<br />\r\n<b>(Available Since MobiControl v14.3.0)</b>\r\n<br />Please note: currently only CatalogueItem asset type is supported by this endpoint",
        "operationId": "Security_GetAssetRights",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "assetType",
            "in": "path",
            "description": "Type of the asset.",
            "required": true,
            "x-enumType": "AssetType",
            "type": "string",
            "enum": [
              "Device",
              "DeviceGroup",
              "CatalogueItem"
            ]
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The asset reference identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of asset rights for a specified asset type and reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetRights"
              }
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Device Group asset type is not supported"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Sets rights of an asset with specified asset type and reference id",
        "description": "<br />\r\n<b>(Available Since MobiControl v14.3.0)</b>\r\n<br />Please note: currently only CatalogueItem asset type is supported by this endpoint",
        "operationId": "Security_SetAssetRights",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "assetType",
            "in": "path",
            "description": "Type of the asset.",
            "required": true,
            "x-enumType": "AssetType",
            "type": "string",
            "enum": [
              "Device",
              "DeviceGroup",
              "CatalogueItem"
            ]
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The asset reference identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "assetRights",
            "in": "body",
            "description": "The asset rights.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetRights"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request to update asset rights was processed successfully"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Device Group asset type is not supported"
          }
        },
        "deprecated": false
      }
    },
    "/security/assets/{assetType}/{referenceId}/users/{userName}/rights": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Get rights of an user with specified asset type and reference id",
        "description": "<br />\r\n<b>(Available Since MobiControl v14.3.0)</b>\r\n<br />Please note: currently only CatalogueItem asset type is supported by this endpoint",
        "operationId": "Security_GetAssetRightForPrincipal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "assetType",
            "in": "path",
            "description": "Type of the asset.",
            "required": true,
            "x-enumType": "AssetType",
            "type": "string",
            "enum": [
              "Device",
              "DeviceGroup",
              "CatalogueItem"
            ]
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The asset reference identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of user asset rights for a specified asset type and reference id",
            "schema": {
              "$ref": "#/definitions/UserAssetRights"
            }
          },
          "400": {
            "description": "Contract validation failed"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Device Group asset type is not supported"
          }
        },
        "deprecated": false
      }
    },
    "/security/authentication": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Returns the authentication setting for MC Webconsole",
        "description": "Returns the authentication setting to be used for MC Webconsole<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"WebConsole Access\" permission",
        "operationId": "Security_GetAuthenticationSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Updates the authentication setting for MC webconsole",
        "description": "Updates the authentication setting to be used for MC Webconsole<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Console Security\" permission",
        "operationId": "Security_SetAuthenticationSettings",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "authenticationSettings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the authentication config"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3103 - SOTI Identity is not configured.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/security/catalogueItem/{referenceId}/rights": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Get Catalogue Item Rights",
        "description": "Returns a list of rights associated with a Catalogue Item. Requires the caller be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Security_GetCatalogueRights",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference id of the catalogue item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of rights based on a profile reference id",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Right"
              }
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/security/currentuser/changepassword": {
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Change Current User's Password",
        "description": "Changes the password for the authenticating user. Requires that Console Security allow for change of user's passwords, and that the account is local, not LDAP.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_ChangePassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "passwordChange",
            "in": "body",
            "description": "Current user's old and new password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordChange"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/currentUser/eulaStatus": {
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Sets Acceptance of MobiControl EULA",
        "description": "Sets acceptance of the MobiControl EULA for the authenticating user. At least one MobiControl administrator must have accepted the MobiControl EULA before other calls may be made to the system.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_SetEulaStatus",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "eulaStatus",
            "in": "body",
            "description": "EULA status",
            "required": true,
            "schema": {
              "enum": [
                "Unknown",
                "Accepted",
                "Declined"
              ],
              "type": "string",
              "x-enumType": "EulaStatus"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/currentUser/filterPermissions": {
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Report on access permission for current user",
        "description": "Retrieve information on whether the current user can access / execute a specific action in MobiControl. Actions typically are view profiles, manage rules etc.  This requires the caller to be granted the “Access Web Console” permission.<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Security_FilterUserSpecificPermissions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "permissions",
            "in": "body",
            "description": "The permissions Array that will be filtered if User does not has permission.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/currentUser/rights/{permission}/{assetType}/{referenceId}/IsAllowed": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Report on access permission for current user per asset",
        "description": "Retrieve information on whether the current user can access / execute a specific action on a specific asset (Device / Device Group) in MobiControl. Actions typically are view profiles, manage rules etc.  The “referenceId” refers to the primary identifier of the asset. This requires the caller to be granted the “Access Web Console” permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
        "operationId": "Security_HasPermissionToAsset",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "permission",
            "in": "path",
            "description": "Name of the Permission",
            "required": true,
            "type": "string"
          },
          {
            "name": "assetType",
            "in": "path",
            "description": "Type of the Asset",
            "required": true,
            "x-enumType": "AssetType",
            "type": "string",
            "enum": [
              "Device",
              "DeviceGroup",
              "CatalogueItem"
            ]
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "Identifier of the Asset",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckUserAccessResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/currentUser/rights/{permission}/IsAllowed": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Report on access permission for current user",
        "description": "Retrieve information on whether the current user can access / execute a specific action in MobiControl. Actions typically are  view profiles, manage rules etc.  This requires the caller to be granted the “Access Web Console” permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
        "operationId": "Security_HasPermissionToFeature",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "permission",
            "in": "path",
            "description": "Name of the Permission",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckUserAccessResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/groups": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve List of Groups",
        "description": "Returns all MobiControl console groups or those that match the provided search criteria.<br /><b>(Since MobiControl 14.3.0)</b>",
        "operationId": "Security_GetGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Filter returned group names by this value",
            "required": false,
            "type": "string"
          },
          {
            "name": "memberOf",
            "in": "query",
            "description": "Only return groups that are members of one or more of the specified groups",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Only return groups of this kind",
            "required": false,
            "x-enumType": "UserGroupKind",
            "type": "string",
            "enum": [
              "MobiControlGroup",
              "LdapGroup",
              "SsoGroup"
            ]
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroup"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/passwordpolicy": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve Administrative Password Policy",
        "description": "Returns the administrative password policy configured in Console Security and applies to local administrators. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_GetPasswordPolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPolicy"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Update Password Policy",
        "description": "Updates the administrative password policy configured in Console Security and applies to local administrators.<br /><b>(Available Since MobiControl v15.2.0)</b>",
        "operationId": "Security_PutPasswordPolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "passwordPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordPolicy"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/permissions": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve All System Permissions",
        "description": "Returns the MobiControl permissions tree which includes all possible rights for administrators of the system. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_GetPermissionTrees",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PermissionTree"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/rights": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve Permissions of Current User",
        "description": "Returns the rights granted to the current user. Currently only Device Group, and Self Service Portal permissions are returned. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage User Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_GetCurrentSecurityRights",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRightDetails"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/user/{name}/catalogueItemReferenceId": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve the user referenceID from the Catalogue",
        "description": "Get the Catalogue Item ReferenceId for a specific user. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "Security_GetCatalogueItemReferenceIdOfUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "user name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogueItemReferenceId"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Assign rights to a user based on a catalogue reference",
        "description": "Assign rights associated with a Catalogue Item to a user. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "Security_AssignCatalogueItemReferenceIdOfUser",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "user name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Security"
        ],
        "summary": "Remove the user rights based on the catalogue reference",
        "description": "Remove rights associated with a Catalogue Item to a specific user. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "Security_DeleteCatalogueItemReferenceIdOfUser",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "user name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/userGroup/{name}/catalogueItemReferenceId": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve the user group referenceID from the Catalogue",
        "description": "Get the Catalogue Item ReferenceId for a specific user group. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "Security_GetCatalogueItemReferenceIdOfUserGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "user group name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogueItemReferenceId"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Assign rights to a user group based on a catalogue reference",
        "description": "Assign rights associated with a Catalogue Item to a user group. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "Security_AssignCatalogueItemReferenceIdOfUserGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "user group name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Security"
        ],
        "summary": "Remove the user group rights based on the catalogue reference",
        "description": "Remove rights associated with a Catalogue Item to a specific user group. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "Security_DeleteCatalogueItemReferenceIdOfUserGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "user group name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/users": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve List of Users",
        "description": "Returns all MobiControl console users or those that match the provided search criteria. Hidden users are users implicitly authorized to login to MobiControl through an LDAP group and have logged in at least once.<br /><b>(Since MobiControl 13.3.0)</b>",
        "operationId": "Security_GetUsers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "includeHiddenUsers",
            "in": "query",
            "description": "Filter returned users by their visibility",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Filter returned user names by this value",
            "required": false,
            "type": "string"
          },
          {
            "name": "memberOf",
            "in": "query",
            "description": "Only return users that are members of one or more of the specified groups",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Only returns users of this kind",
            "required": false,
            "x-enumType": "UserKind",
            "type": "string",
            "enum": [
              "MobiControlUser",
              "LdapUser",
              "SsoUser"
            ]
          },
          {
            "name": "order",
            "in": "query",
            "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Input the first X (count) entries that should not be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/users/{userName}": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve a Single User",
        "description": "Returns a named MobiControl console user including users that are implicitly authorized to login to MobiControl through an LDAP group and have logged in at least once (\"hidden\").<br /><b>(Since MobiControl 13.3.0)</b>",
        "operationId": "Security_GetUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/security/users/{userName}/{role}/rights": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieves Permissions for a User",
        "description": "Returns the rights granted to the specified user. Currently only Device Group, and Self Service Portal permissions are returned. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage User Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_GetFeatureSecurityRights",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "description": "The security role",
            "required": true,
            "x-enumType": "RoleType",
            "type": "string",
            "enum": [
              "Any",
              "SystemAdministrator",
              "DeviceOwner"
            ]
          },
          {
            "name": "asset",
            "in": "query",
            "description": "Type of the Asset",
            "required": false,
            "x-enumType": "AssetType",
            "type": "string",
            "enum": [
              "Device",
              "DeviceGroup",
              "CatalogueItem"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRightDetails"
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Sets Permissions for a User",
        "description": "Replaces the permissions for a given user with those defined. Currently only Device Group, and Self Service Portal permissions are supported. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage User Security\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_SetFeatureSecurityRights",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "description": "The role",
            "required": true,
            "x-enumType": "RoleType",
            "type": "string",
            "enum": [
              "Any",
              "SystemAdministrator",
              "DeviceOwner"
            ]
          },
          {
            "name": "rights",
            "in": "body",
            "description": "Security rights",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InputRightsGroupItem"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Security"
        ],
        "summary": "Removes Role Permissions from a User",
        "description": "Removes all rights granted in a given role for the specified user. Currently only Device Group, and Self Service Portal permissions are supported. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage User Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_DeleteFeatureSecurityRights",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "description": "The role",
            "required": true,
            "x-enumType": "RoleType",
            "type": "string",
            "enum": [
              "Any",
              "SystemAdministrator",
              "DeviceOwner"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/users/{username}/catalogueitem/{referenceId}/rights": {
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Set the view/edit rights of the user for a specified catalogue item",
        "description": "Sets the individual permissions of a user on a catalogue item.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Security_SetCatalogueItemRights",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference id of the catalogue item",
            "required": true,
            "type": "string"
          },
          {
            "name": "userRight",
            "in": "body",
            "description": "The user's rights for the specified catalogue item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogueItemUserRight"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/users/{userName}/catalogueItem/{referenceId}/rights": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Get Catalogue Item Rights for a User",
        "description": "Returns the user right associated with a Catalogue Item. Requires the caller be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><b>(Available Since MobiControl v14.3.0)</b>",
        "operationId": "Security_GetCatalogueRightsForPrincipal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceId",
            "in": "path",
            "description": "The reference id of the catalogue item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the right based on a profile reference id and the username",
            "schema": {
              "$ref": "#/definitions/Right"
            }
          },
          "403": {
            "description": "Unauthorized access or profile reference does not exist"
          }
        },
        "deprecated": false
      }
    },
    "/security/users/{userName}/group/{path}/rights": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieves Device Group Permissions for a User",
        "description": "Returns all rights granted on given device group for the specified user. Requires the caller be granted the \"Manage User Security\" permission. Requires the caller be granted the \"Manage User Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_GetDeviceGroupSecurityRights",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRightDetails"
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Sets Device Group Permissions for a User",
        "description": "Replaces the device group permissions for a given user with those defined. Requires the caller be granted the \"Manage User Security\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_SetDeviceGroupSecurityRights",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          },
          {
            "name": "rights",
            "in": "body",
            "description": "Security rights",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InputRightsGroupItem"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Security"
        ],
        "summary": "Deletes Device Group Permissions from a User",
        "description": "Removes all rights granted on given device group for the specified user. Requires the caller be granted the \"Manage User Security\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
        "operationId": "Security_DeleteDeviceGroupSecurityRights",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "path",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/security/users/{userName}/groups": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieve User's Group",
        "description": "Returns a list of groups that a given user is a member of including users that are implicitly authorized to login to MobiControl through an LDAP group and have logged in at least once (\"hidden\").<br /><b>(Since MobiControl 13.3.0)</b>",
        "operationId": "Security_GetUserGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
            "required": true,
            "type": "string"
          },
          {
            "name": "showGroupInheritance",
            "in": "query",
            "description": "Whether to show inherited groups",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroup"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Get All Servers",
        "description": "Returns a list of Management and Deployment Servers powering the MobiControl environment. Requires the caller be granted \"Web Console Access\" permission.<br /><B>(Available Since MobiControl v13.2.0)</B>",
        "operationId": "Servers_GetServers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "forceDsStatusRefresh",
            "in": "query",
            "description": "Force the Deployment Servers to report on their latest status.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "getAdditionalCertificates",
            "in": "query",
            "description": "Get additional certificates including DSE, APNS, etc",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Servers"
            }
          }
        },
        "deprecated": false
      }
    },
    "/servers/database/status": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Gets the Health Status of SQL Server and MobiControl databases.",
        "description": "Get the health status of SQL Server and MobiControl databases. This API also returns information about your MobiControl archive database and the temporary database. Requires the caller be granted \"View System Health\" permission.<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Servers_GetSqlServerHealth",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SqlServerHealth"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/servers/deploymentServer/{dsName}/status": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Gets the status of a specific Deployment Server.",
        "description": "Get the status detail of a specific Deployment Server powering the MobiControl environment. Requires the caller be granted \"View System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "Servers_GetDSStatusDetail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dsName",
            "in": "path",
            "description": "Host name of the Deployment Server",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeploymentServerHealthDetails"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/servers/deploymentServer/status": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Gets the status of the Deployment Servers.",
        "description": "Get the status of all Deployment Servers powering the MobiControl environment. Requires the caller be granted \"View System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "Servers_GetDSStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentServerHealth"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/servers/logLevels": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Returns a list of Log Levels",
        "description": "Returns a list of Log Levels currently set for each of the MobiControl's functional areas<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "Servers_GetLogLevels",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SystemLogLevel"
            }
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Servers"
        ],
        "summary": "Updates the specific Log Level",
        "description": "Update the Log Levels for the specific MobiControl's functional area. Multiple functional areas can be updated in single attempt.<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "Servers_SetLogLevels",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "systemLogLevel",
            "in": "body",
            "description": "Define the values in key value format for the desired MC functional area. Check Model for details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemLogLevel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully set log levels"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      }
    },
    "/servers/managementServer/{msName}/status": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Gets the status of a specific Management Server.",
        "description": "Get the status detail of a specific Management Server powering the MobiControl environment. Requires the caller be granted \"View System Health\" permission.<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Servers_GetMsStatusDetail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msName",
            "in": "path",
            "description": "Host name of the Management Server",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ManagementServerHealthDetails"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/servers/managementServer/status": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Gets the status of the Management Servers.",
        "description": "Get the status of all Management Servers powering the MobiControl environment. Requires the caller be granted \"View System Health\" permission.<br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Servers_GetMsStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManagementServerHealth"
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/smtp/connections": {
      "get": {
        "tags": [
          "Smtp"
        ],
        "summary": "Get all SMTP server connections",
        "description": "Retrieves details about all SMTP server connections. Requires the caller be granted \"Web Console\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Smtp_GetAllSmtpConnections",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Connection returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmtpConnectionSummary"
              }
            }
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Smtp"
        ],
        "summary": "Create a new SMTP server connection",
        "description": "Creates an SMTP connection as specified. Requires the caller be granted \"Global Settings\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Smtp_CreateSmtpConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "connection",
            "in": "body",
            "description": "Details of SMTP connection to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmtpConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SMTP connection summary",
            "schema": {
              "$ref": "#/definitions/SmtpConnectionSummary"
            }
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request's body is missing.</li><li>If the connection authentication mode is unknown.</li><li>If the connection host is invalid.</li><li>If the connection email address is invalid</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6001 - If the connection name is a duplicate.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/smtp/connections/{referenceId}": {
      "get": {
        "tags": [
          "Smtp"
        ],
        "summary": "Get a single SMTP server connection by referenceId",
        "description": "Retrieves details about an SMTP server connection. Requires the caller be granted \"Web Console\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Smtp_GetSmtpConnectionSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the SMTP connection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection returned",
            "schema": {
              "$ref": "#/definitions/SmtpConnectionSummary"
            }
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the requested Reference ID is not a valid GUID.</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Unauthorized access"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Smtp"
        ],
        "summary": "Updates an existing SMTP server connection.",
        "description": "Updates SMTP connection as specified. Requires the caller be granted \"Global Setting\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Smtp_UpdateSmtpConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of SMTP connection to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "connection",
            "in": "body",
            "description": "Details of SMTP connection to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmtpConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SMTP connection summary",
            "schema": {
              "$ref": "#/definitions/SmtpConnectionSummary"
            }
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the requested Reference ID is not a valid GUID.</li><li>If the request's body is missing.</li><li>If the connection authentication mode is unknown.</li><li>If the connection host is invalid.</li><li>If the connection email address is invalid</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6001 - If the connection name is a duplicate.</li></ol>"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Smtp"
        ],
        "summary": "Delete an SMTP server connection by reference Id",
        "description": "Delete an SMTP connection. Requires the caller be granted \"Global Settings\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Smtp_DeleteSmtpConnection",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "description": "Reference ID of the SMTP connection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Connection has been deleted"
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the requested Reference ID is not a valid GUID.</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6002 - Email sender is in use.</li></ol><ol><li>6003 - Email sender is in use.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/smtp/connections/actions": {
      "post": {
        "tags": [
          "Smtp"
        ],
        "summary": "Send a test email with specified SMTP connection.",
        "description": "Test SMTP connection settings. Requires the caller be granted \"Web Console\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
        "operationId": "Smtp_ExecuteSmtpAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "action",
            "in": "body",
            "description": "Action to execute",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestSmtpConnection"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action dispatched"
          },
          "400": {
            "description": "Bad request.<br /><ol><li>If the request's body is missing.</li><li>If the connection authentication mode is unknown.</li><li>If the connection host is invalid.</li><li>If the connection email address is invalid.</li><li>If the email priority is unknown.</li><li>If the recipients are missing.</li><li>If the recipient's email address is invalid.</li><li>If the recipient's email address type is unknown.</li></ol>"
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "Unauthorized access"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6000 - Sending test email failed.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/sotiOne/assist": {
      "get": {
        "tags": [
          "SotiAssistConfiguration"
        ],
        "summary": "Returns the SOTI Assist URL configuration",
        "description": "Returns the configuration of SOTI Assist server<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SotiAssistConfiguration_RetrieveSotiAssistConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "URL configuration returned successfully",
            "schema": {
              "$ref": "#/definitions/SotiAssistConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SotiAssistConfiguration"
        ],
        "summary": "Updates the SOTI Assist URL configuration",
        "description": "Updates the configuration of SOTI Assist server<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SotiAssistConfiguration_AddSotiAssistConfiguration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "sotiAssistConfiguration",
            "in": "body",
            "description": "Define the values in key value format for the SOTI Assist URI. Only http/https URIs are allowed.Check Model for details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SotiAssistConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully add SOTI Assist Configuration"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/sotiOne/connect": {
      "get": {
        "tags": [
          "SotiConnectConfiguration"
        ],
        "summary": "Returns the SOTI Connect URL configuration",
        "description": "Returns the configuration of SOTI Connect server<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SotiConnectConfiguration_RetrieveSotiConnectConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "URL configuration returned successfully",
            "schema": {
              "$ref": "#/definitions/SotiConnectConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SotiConnectConfiguration"
        ],
        "summary": "Updates the SOTI Connect URL configuration",
        "description": "Updates the configuration of SOTI Connect server<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SotiConnectConfiguration_AddSotiConnectConfiguration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "sotiConnectConfiguration",
            "in": "body",
            "description": "Define the values in key value format for the SOTI Connect URI. Only http/https URIs are allowed.Check Model for details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SotiConnectConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully add SOTI Connect Configuration"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/sotiOne/snap": {
      "get": {
        "tags": [
          "SotiSnapConfiguration"
        ],
        "summary": "Returns the SOTI Snap URL configuration",
        "description": "Returns the configuration of SOTI Snap server<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SotiSnapConfiguration_RetrieveSotiSnapConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "URL configuration returned successfully",
            "schema": {
              "$ref": "#/definitions/SotiSnapConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SotiSnapConfiguration"
        ],
        "summary": "Updates the SOTI Snap URL configuration",
        "description": "Updates the configuration of SOTI Snap server<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SotiSnapConfiguration_AddSotiSnapConfiguration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "sotiSnapConfiguration",
            "in": "body",
            "description": "Define the values in key value format for the SOTI Snap URI. Only http/https URIs are allowed.Check Model for details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SotiSnapConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully add SOTI Snap Configuration"
          },
          "400": {
            "description": "Contract validation failed"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/systemconfiguration/cloudlinkagent": {
      "get": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Retrieve CloudLink settings",
        "description": "Retrieve CloudLink settings, such as compatible CloudLink version and URI for CloudLink installer<br /><B>(Available Since MobiControl v15.0.0)</B>",
        "operationId": "SystemConfiguration_GetCloudLinkAgentSetting",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudLinkAgentSetting"
            }
          }
        },
        "deprecated": false
      }
    },
    "/systemconfiguration/globalproxy": {
      "get": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Retrieve Global Proxy Configuration",
        "description": "Returns the current global proxy configuration.<br />Requires the caller be granted \"Web Console Access\" permission.<br /><B>(Available Since MobiControl v14.3.1)</B>",
        "operationId": "SystemConfiguration_GetProxySetting",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProxySetting"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Replace Global Proxy Configuration",
        "description": "Adds or updates global proxy configuration. If configuration already exists then this action will update it, otherwise configuration will be added.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.3.1)</B>",
        "operationId": "SystemConfiguration_UpdateProxySetting",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "proxySetting",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxySetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProxySetting"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Delete Global Proxy Configuration",
        "description": "Deletes global proxy configuration.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.3.1)</B>",
        "operationId": "SystemConfiguration_DeleteProxySetting",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/systemconfiguration/globalproxy/isenabled": {
      "put": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Enable/Disable Global Proxy",
        "description": "Enables/Disables global proxy.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.3.1)</B>",
        "operationId": "SystemConfiguration_EnableProxySetting",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "enable",
            "in": "query",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProxySetting"
            }
          }
        },
        "deprecated": false
      }
    },
    "/systemconfiguration/globalproxy/validate": {
      "post": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Validate Global Proxy Configuration",
        "description": "Validate global proxy configuration.<br /><B>(Available Since MobiControl v14.3.1)</B><br />Requires the caller be granted the \"Manage Servers and Global Settings.",
        "operationId": "SystemConfiguration_ValidateProxySetting",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "proxySetting",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxySetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/systemconfiguration/syslog": {
      "get": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Retrieve Syslog Configuration",
        "description": "Returns the current Syslog configuration.<br /><B>(Available Since MobiControl v14.2.0)</B>",
        "operationId": "SystemConfiguration_GetSyslogConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyslogConfiguration"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Update Syslog Configuration",
        "description": "Update Syslog configuration to the global setting.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.2.0)</B>",
        "operationId": "SystemConfiguration_UpdateSyslogConfiguration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "configuration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyslogConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyslogConfiguration"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Delete Syslog Configuration",
        "description": "Delete Syslog configuration from the global setting.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.2.0)</B>",
        "operationId": "SystemConfiguration_DeleteAllSyslogConfiguration",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/systemconfiguration/syslog/tests": {
      "post": {
        "tags": [
          "SystemConfiguration"
        ],
        "summary": "Test Syslog Connectivity",
        "description": "Test Syslog connectivity<br />Requires the caller be granted the \"Manage Servers and Global Setting\" permission.\"<br /><B>(Available Since MobiControl v14.2.0)</B>",
        "operationId": "SystemConfiguration_TestSyslogConnection",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "syslogConfigurationTest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyslogConfigurationTest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyslogConfigurationTest"
            }
          }
        },
        "deprecated": false
      }
    },
    "/systemHealth/metrics": {
      "get": {
        "tags": [
          "SystemHealth"
        ],
        "summary": "Gets System Health metrics data for specified servers",
        "description": "Gets the metrics data for specified servers. You can specify start and end date time to see metrics data for the specified time period given the data is available. System Health metrics is only available with SOTI Premium Plus and Enterprise Plus Service. Requires the caller be granted \"View System Health\" permission.  <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SystemHealth_GetMetricPointData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "description": "Start Date Time. Format Year-Month-DayTHour:Minutes:SecondsZ (e.g. 2020-12-14T19:00:00Z)",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End Date Time. Format Year-Month-DayTHour:Minutes:SecondsZ (e.g. 2020-12-14T20:00:00Z)",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ds",
            "in": "query",
            "description": "Host name of the Deployment Server (e.g. ds1 ds2)",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ms",
            "in": "query",
            "description": "Host name of the Management Server (e.g. ms1 ms2)",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "m",
            "in": "query",
            "description": "Metric name (e.g. CPU Usage Available RAM Check-Ins)",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "timeDensity",
            "in": "query",
            "description": "Time Density Frequency to define the time interval between each data point. Format [[h]ours | [m]inutes | [s]econds]:value (e.g. m:5)",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeSummary",
            "in": "query",
            "description": "Should the summary be included in output",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeStatistics",
            "in": "query",
            "description": "Should the statistics be included in output",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeHeader",
            "in": "query",
            "description": "Should the header be included in output",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "initialLoad",
            "in": "query",
            "description": "This is the initial or first load of data required, use internal mechanisms to retrieve necessary data",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns System Health metrics",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6602 - Failed to retrieve System Health metrics because the MobiControl server does not have the required support contract. System Health metrics are only available with SOTI Premium Plus and Enterprise Plus Service.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/systemHealth/settings": {
      "get": {
        "tags": [
          "SystemHealth"
        ],
        "summary": "Gets the System Health Advanced Analytics Settings.",
        "description": "Get the status of System Health advanced analytics charts and if data is being collected by MobiControl to display the charts. This API also gets the rate at which the data is being collected from MobiControl to be displayed in charts. This API is only available with SOTI Premium Plus and Enterprise Plus Service. Requires the caller be granted \"Manage System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SystemHealth_GetSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SystemHealthSettingsResponse"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6600 - Failed to retrieve System Health settings because the MobiControl server does not have the required support contract. System Health settings are only available with SOTI Premium Plus and Enterprise Plus Service.</li></ol>"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SystemHealth"
        ],
        "summary": "Update the System Health Advanced Analytics Settings.",
        "description": "This API is only available with SOTI Premium Plus and Enterprise Plus Service. When collect system data setting is disabled, the advanced analytics charts will not be shown and MobiControl system metrics data will not be collected. This API also allows to configure the rate at which the metrics data is collected from MobiControl to be displayed in charts. Requires the caller be granted \"Manage System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "SystemHealth_PutSettings",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "systemHealthSettings",
            "in": "body",
            "description": "System Health Settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemHealthSettingsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "System Health Settings have been updated"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6601 - Failed to update System Health settings because the MobiControl server does not have the required support contract. System Health settings are only available with SOTI Premium Plus and Enterprise Plus Service.</li></ol>"
          }
        },
        "deprecated": false
      }
    },
    "/windows/enterpriseapps/aetxstatus": {
      "get": {
        "tags": [
          "WindowsEnterpriseAppsConfiguration"
        ],
        "summary": "Retrieves Application Enrollment Token (.AETX) validity",
        "description": "Retrieves the validity of Application Enrollment Token (.AETX)\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsEnterpriseAppsConfiguration_CheckToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Token validity information was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/WindowsCompanyHubTokenValidityInfo"
            }
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Not authorized."
          },
          "500": {
            "description": "Failed to retrieve the Application Enrollment Token Status due to an unknown error."
          }
        },
        "deprecated": false
      }
    },
    "/windows/enterpriseapps/configuration": {
      "get": {
        "tags": [
          "WindowsEnterpriseAppsConfiguration"
        ],
        "summary": "Retrieves Enterprise Application Configuration",
        "description": "Retrieves Enterprise Application Configuration\r\n             <br /><B> (Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsEnterpriseAppsConfiguration_GetCompanyHub",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the Company Hub configuration.",
            "schema": {
              "$ref": "#/definitions/WindowsCompanyHubSummary"
            }
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Not authorized."
          },
          "500": {
            "description": "Failed to retrieve the Company Hub configuration due to an unknown error."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "WindowsEnterpriseAppsConfiguration"
        ],
        "summary": "Set the enterprise hub configuration",
        "description": "Set or unset the hub application.\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsEnterpriseAppsConfiguration_SetEnterpriseCompanyHubConfiguration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "configuration",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnterpriseCompanyHubConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the Company Hub configuration."
          },
          "400": {
            "description": "Failed to update the Company Hub configuration due to an invalid parameter."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5300 - The application cannot be validated without a valid token</li><li>5301 - The token is invalid</li><li>5303 - File not correctly signed with the token or expired certificate</li><li>5307 - Invalid application reference id</li></ol>"
          },
          "500": {
            "description": "Failed to retrieve the Company Hub configuration due to an unknown error."
          }
        },
        "deprecated": false
      }
    },
    "/windows/enterpriseapps/token": {
      "post": {
        "tags": [
          "WindowsEnterpriseAppsConfiguration"
        ],
        "summary": "Updates Application Enrollment Token (.AETX)",
        "description": "Updates Application Enrollment Token (.AETX)\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br /></p><p>The request's body:\r\n             <ol><li>Should be multipart request comprising of metadata and token content encoded in base64.</li><li>Supported values of Content-Type for token part of request's body: application/c-x509-ca-cert.</li></ol></p><p>Sample request's body:\r\n             <pre>\r\n             --mobicontrol_boundary\r\n                Content-Type: application/c-x509-ca-cert\r\n                Content-Transfer-Encoding: base64\r\n                Content-Disposition: attachment; filename=\"Token.aetx\"\r\n             <br />\r\n             BASE64_ENCODED_TOKEN_CONTENT_HERE\r\n             --mobicontrol_boundary--\r\n             </pre></p>",
        "operationId": "WindowsEnterpriseAppsConfiguration_UpdateToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully saved new Application Enrollment Token.",
            "schema": {
              "$ref": "#/definitions/WindowsCompanyHubTokenId"
            }
          },
          "400": {
            "description": "Failed due to bad/incorrect file type."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Not authorized."
          },
          "415": {
            "description": "Unsupported media type provided."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5301 - The token is invalid.</li><li>5403 - The token file has an incorrect extension. Should be an .aetx file.</li></ol>"
          },
          "500": {
            "description": "Failed to save a new Application Enrollment Token due to an unknown error."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "WindowsEnterpriseAppsConfiguration"
        ],
        "summary": "Deletes Enterprise Application Token (.AETX)",
        "description": "Deletes the Enterprise Application Token (.AETX)\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsEnterpriseAppsConfiguration_DeleteToken",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "Successfully deleted the Application Enrollment Token."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Not authorized."
          },
          "500": {
            "description": "Failed to delete a new Application Enrollment Token due to an unknown error."
          }
        },
        "deprecated": false
      }
    },
    "/windows/healthattestation/server/configuration": {
      "get": {
        "tags": [
          "WindowsModernHealthAttestation"
        ],
        "summary": "Gets the current Health Attestation Server Summary",
        "description": "This gets the current Health Attestation Server summary.\r\n              <br />Requires the caller to be granted Global Setting permission\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsModernHealthAttestation_GetServerConfiguration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ServerSummary"
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "WindowsModernHealthAttestation"
        ],
        "summary": "Sets the Health Attestation Server configuration",
        "description": "This updates the Health Attestation Server configuration.\r\n             This API confirms that the server is reachable by attempting to establish a connection before saving the configuration.\r\n              <br />Requires the caller to be granted Global Setting permission\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsModernHealthAttestation_UpdateServerConfiguration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "configuration",
            "in": "body",
            "description": "The server configuration for the HAS",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Server configuration updated"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "WindowsModernHealthAttestation"
        ],
        "summary": "Delete the current Health Attestation Server configuration",
        "description": "This will delete the current Health Attestation Server configuration and set the default configuration.\r\n             The default configuration uses the Microsoft Servers: https://has.spserv.microsoft.com/HealthAttestation/ValidateHealthCertificate/v1\r\n              <br />Requires the caller to be granted Global Setting permission\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsModernHealthAttestation_DeleteServerConfiguration",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "Server configuration deleted"
          },
          "401": {
            "description": "Unauthorized access"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/windows/wns": {
      "get": {
        "tags": [
          "WindowsNotificationService"
        ],
        "summary": "Gets the Windows Notification Service (WNS) configuration",
        "description": "Retrieves the configured Windows Notification Services (WNS) details.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsNotificationService_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "User is not authorized to perform the operation."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "WindowsNotificationService"
        ],
        "summary": "Saves the Windows Notification Service (WNS) configuration",
        "description": "Configures Windows Notification Services (WNS), which enables MobiControl to send push notifications to Windows devices on demand.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
        "operationId": "WindowsNotificationService_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "wnsConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WnsConfiguration"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized attempt to execute the method"
          },
          "403": {
            "description": "User is not authorized to perform the operation."
          },
          "422": {
            "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5700 - Failed to update the Windows Notification Service configuration due to an unknown error.</li><li>5701 - Failed to update the Windows Notification Service configuration because the service failed to obtain a token.</li></ol>"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "MatchDeviceCriteria": {
      "description": "Re-Enrollment Device match Criteria",
      "type": "object",
      "properties": {
        "MatchCriteria": {
          "description": "gets and sets Device match Criteria on Re-Enrollment",
          "enum": [
            "DeviceId",
            "HardwareId"
          ],
          "type": "string",
          "x-enumType": "DeviceMatchCriteria"
        }
      }
    },
    "AndroidEnterpriseCertificateInfo": {
      "description": "Android Enterprise Certificate Info which is specific to an OEM    \r\n            ----------------\r\n            An OEM is different from manufacturer in the following way.\r\n            For example Honeywell OEM can have Honeywell, Inc or intermec or Honeywell as its manufacturers. \r\n            or a Zebra as an OEM can have Zebra Technologies as its manufacturer\r\n            --------------",
      "type": "object",
      "properties": {
        "SubjectName": {
          "description": "",
          "type": "string"
        },
        "IssuerName": {
          "description": "",
          "type": "string"
        },
        "NotBeforeDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "NotAfterDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "Thumbprint": {
          "description": "",
          "type": "string"
        },
        "Oem": {
          "description": "OEM",
          "enum": [
            "ACER",
            "AMAZON",
            "BQ",
            "CASIO",
            "CROSSMATCH",
            "DATALOGIC",
            "DRS",
            "ELO",
            "GARMIN",
            "GENERIC",
            "GETAC",
            "GOOGLE",
            "HONEYWELL",
            "HUAWEI",
            "HUAWEIEMUI",
            "INTERMEC",
            "JANAM",
            "KYOCERA",
            "KYOCERAPS",
            "LENOVO",
            "LG",
            "M3",
            "Matsunichi",
            "MOTOROLA",
            "PANASONIC",
            "PIDION",
            "POINTMOBILE",
            "SAMSUNG",
            "SONIM",
            "SONY",
            "SOTI",
            "UNITECH",
            "UROVO",
            "WORKMATE",
            "ZEBRA"
          ],
          "type": "string",
          "x-enumType": "AndroidOEM"
        }
      }
    },
    "AndroidFirmwareUpgradeClient": {
      "description": "Android Firmware Upgrade Client",
      "type": "object",
      "properties": {
        "ClientId": {
          "description": "Gets Client Id value",
          "type": "string"
        },
        "ClientSecret": {
          "description": "Gets Client Secret Hash value",
          "type": "string"
        }
      }
    },
    "AndroidFirmwareUpgradeClientStatus": {
      "description": "Android Firmware Upgrade Client State",
      "type": "object",
      "properties": {
        "ClientState": {
          "description": "Android Firmware Upgrade Client State",
          "enum": [
            "Unregistered",
            "Inprogress",
            "Registered"
          ],
          "type": "string",
          "x-enumType": "AndroidFirmwareUpgradeClientState"
        }
      }
    },
    "AndroidFirmwareUpgradeClientSummary": {
      "type": "object",
      "properties": {
        "TotalDevices": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDevicesAppFeedbackEnabled": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDevicesEnrolled": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDevicesFotaReady": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AndroidFirmwareUpgradeAuthorizationGrant": {
      "type": "object",
      "properties": {
        "AuthorizationGrantUrl": {
          "type": "string"
        },
        "GeneratedOn": {
          "format": "date-time",
          "type": "string"
        },
        "ExpiresIn": {
          "format": "int32",
          "type": "integer"
        },
        "Interval": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AndroidFirmwareVersionContract": {
      "type": "object",
      "properties": {
        "FirmwareVersion": {
          "type": "string"
        },
        "OsVersion": {
          "type": "string"
        },
        "FirmwareType": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ReleaseDate": {
          "format": "date-time",
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        }
      }
    },
    "AndroidFirmwareUpgradeClientSyncStatus": {
      "type": "object",
      "properties": {
        "ClientSyncStatusType": {
          "enum": [
            "InProgress",
            "Successful",
            "Failure"
          ],
          "type": "string",
          "x-enumType": "AndroidFirmwareUpgradeClientSyncStatusType"
        }
      }
    },
    "AndroidFirmwareUpgradeLicenseRequest": {
      "description": "Android Firmware Upgrade License",
      "type": "object",
      "properties": {
        "ClientType": {
          "description": "Gets or sets Android Firmware Upgrade Client Type",
          "enum": [
            "None",
            "Samsung",
            "Zebra"
          ],
          "type": "string",
          "x-enumType": "AndroidFirmwareUpgradeClientType"
        },
        "License": {
          "$ref": "#/definitions/AndroidFirmwareUpgradeLicense",
          "description": "Gets or sets Android Firmware Upgrade License"
        },
        "GroupId": {
          "description": "Gets or sets Group Id",
          "type": "string"
        }
      }
    },
    "AndroidFirmwareUpgradeLicense": {
      "description": "Represents Firmware Upgrade License",
      "type": "object",
      "properties": {
        "LicenseName": {
          "description": "Gets or sets License Name",
          "type": "string"
        },
        "CustomerId": {
          "description": "Gets or sets Customer Id",
          "type": "string"
        },
        "LicenseKey": {
          "description": "Gets or sets a license key",
          "type": "string"
        },
        "ExpirationDate": {
          "format": "date-time",
          "description": "Gets or sets expiration date",
          "type": "string"
        },
        "TotalSeats": {
          "format": "int32",
          "description": "Gets or sets a total number of devices that can use this license",
          "type": "integer"
        },
        "UsedSeats": {
          "format": "int32",
          "description": "Gets or sets a number of used seats for devices",
          "type": "integer"
        }
      }
    },
    "AndroidFirmwareUpgradeLicenseGroupRequest": {
      "description": "Android Firmware Upgrade License Group Request",
      "type": "object",
      "properties": {
        "GroupId": {
          "description": "Gets or sets Android Firmware Upgrade License Group Id",
          "type": "string"
        },
        "ClientType": {
          "description": "Gets or sets Client Type",
          "enum": [
            "None",
            "Samsung",
            "Zebra"
          ],
          "type": "string",
          "x-enumType": "AndroidFirmwareUpgradeClientType"
        }
      }
    },
    "AndroidFirmwareUpgradeGroup": {
      "description": "Android Firmware Upgrade License Group",
      "type": "object",
      "properties": {
        "GroupId": {
          "description": "Gets or sets Android Firmware Upgrade License Group Id",
          "type": "string"
        },
        "UsedSeats": {
          "format": "int32",
          "description": "Number of license used in group",
          "type": "integer"
        }
      }
    },
    "AndroidFirmwareUpgradeLicenseChange": {
      "description": "Represents Firmware Upgrade License Change",
      "type": "object",
      "properties": {
        "TargetLicenseName": {
          "description": "Gets or sets Target License Name",
          "type": "string"
        },
        "TargetLicenseKey": {
          "description": "Gets or sets Target License Key",
          "type": "string"
        }
      }
    },
    "ConfigurationInfo": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Active",
            "Expired",
            "Invalid"
          ],
          "type": "string",
          "x-enumType": "ConfigurationStatus"
        },
        "AppleId": {
          "type": "string"
        },
        "Topic": {
          "type": "string"
        },
        "AddedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string"
        },
        "SerialNumber": {
          "type": "string"
        }
      }
    },
    "CancellationToken": {
      "type": "object",
      "properties": {
        "IsCancellationRequested": {
          "type": "boolean",
          "readOnly": true
        },
        "CanBeCanceled": {
          "type": "boolean",
          "readOnly": true
        },
        "WaitHandle": {
          "$ref": "#/definitions/WaitHandle",
          "readOnly": true
        }
      }
    },
    "WaitHandle": {
      "type": "object",
      "properties": {
        "Handle": {
          "$ref": "#/definitions/Object"
        },
        "SafeWaitHandle": {
          "$ref": "#/definitions/SafeWaitHandle"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {}
    },
    "SafeWaitHandle": {
      "type": "object",
      "properties": {
        "IsInvalid": {
          "type": "boolean",
          "readOnly": true
        },
        "IsClosed": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "UpdateConfigurationAppleId": {
      "type": "object",
      "properties": {
        "AppleId": {
          "type": "string"
        }
      }
    },
    "VppReconcileAccount": {
      "type": "object",
      "properties": {
        "EnableVppLicenseRemovalNotification": {
          "type": "boolean"
        }
      }
    },
    "VppUpdateAccountName": {
      "type": "object",
      "properties": {
        "AccountName": {
          "type": "string"
        }
      }
    },
    "VppAccount": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string"
        },
        "LastRefreshed": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "OrganizationName": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Normal",
            "PendingDeletion",
            "Deleted",
            "NotOwned",
            "Invalid",
            "Expired"
          ],
          "type": "string",
          "x-enumType": "VppAccountStatuses"
        },
        "LocationName": {
          "type": "string"
        },
        "LocationId": {
          "type": "string"
        },
        "VppProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VppProduct"
          }
        },
        "CountryCode": {
          "type": "string"
        }
      }
    },
    "VppProduct": {
      "type": "object",
      "properties": {
        "BundleId": {
          "type": "string"
        },
        "DeviceAssignable": {
          "type": "boolean"
        },
        "LicensesAvailable": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "ProductId": {
          "format": "int64",
          "type": "integer"
        },
        "ProductType": {
          "type": "string"
        },
        "TotalLicenses": {
          "format": "int32",
          "type": "integer"
        },
        "Seller": {
          "type": "string"
        }
      }
    },
    "VppSettings": {
      "type": "object",
      "properties": {
        "EnableVppLicenseRemovalNotification": {
          "type": "boolean"
        }
      }
    },
    "SigningCertificateInfo": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "ExpireTime": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AccountInfo": {
      "type": "object",
      "properties": {
        "AccountReferenceId": {
          "type": "string"
        },
        "AccountName": {
          "type": "string"
        },
        "CertificateReferenceId": {
          "type": "string"
        },
        "CertificateExpiryDate": {
          "format": "date-time",
          "type": "string"
        },
        "LastSyncTime": {
          "format": "date-time",
          "type": "string"
        },
        "TokenExpiryDate": {
          "format": "date-time",
          "type": "string"
        },
        "AccountState": {
          "enum": [
            "Active",
            "PendingDelete",
            "Deleted",
            "Invalid"
          ],
          "type": "string",
          "x-enumType": "DeviceAccountState"
        },
        "MDMServerName": {
          "type": "string"
        },
        "MDMServerId": {
          "type": "string"
        },
        "AdminAppleId": {
          "type": "string"
        },
        "OrganizationName": {
          "type": "string"
        },
        "DefaultRuleReferenceId": {
          "type": "string"
        },
        "DefaultRuleName": {
          "type": "string"
        }
      }
    },
    "AccountName": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        }
      }
    },
    "AddDeviceRule": {
      "type": "object",
      "properties": {
        "RuleReferenceId": {
          "type": "string"
        },
        "RuleName": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "DefaultAccountRule": {
          "type": "boolean"
        }
      }
    },
    "DefaultRuleModel": {
      "type": "object",
      "properties": {
        "RuleReferenceId": {
          "type": "string"
        }
      }
    },
    "EnterpriseApplicationDetails": {
      "type": "object",
      "properties": {
        "AppPackageId": {
          "type": "string"
        },
        "AppName": {
          "type": "string"
        },
        "AppVersion": {
          "type": "string"
        },
        "AppAuthor": {
          "type": "string"
        },
        "AppDescription": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "AppOriginType": {
          "enum": [
            "InternalApplication",
            "ExternalApplication"
          ],
          "type": "string",
          "x-enumType": "CustomerApplicationOriginType"
        },
        "AppUrl": {
          "type": "string"
        },
        "AppIconUrl": {
          "type": "string"
        }
      }
    },
    "UpdateApplicationRequest": {
      "type": "object",
      "properties": {
        "AppAuthor": {
          "type": "string"
        },
        "AppDescription": {
          "type": "string"
        }
      }
    },
    "AddExternalApplicationRequest": {
      "type": "object",
      "properties": {
        "AppUrl": {
          "type": "string"
        }
      }
    },
    "GooglePlayStoreApplication": {
      "type": "object",
      "properties": {
        "AppPackageId": {
          "type": "string"
        },
        "AppName": {
          "type": "string"
        },
        "AppVersion": {
          "type": "string"
        },
        "AppAuthor": {
          "type": "string"
        },
        "AppDescription": {
          "type": "string"
        },
        "AppIconUrl": {
          "type": "string"
        },
        "AppDetailsUrl": {
          "type": "string"
        },
        "Screenshots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AppPrice": {
          "format": "double",
          "type": "number"
        },
        "AppPriceCurrency": {
          "type": "string"
        }
      }
    },
    "DataRetrievalOptionsSkipTakeOnly": {
      "type": "object",
      "properties": {
        "Skip": {
          "format": "int32",
          "type": "integer"
        },
        "Take": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ApplicationFeedback": {
      "type": "object",
      "properties": {
        "DeviceName": {
          "type": "string"
        },
        "Key": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "Data": {
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Severity": {
          "enum": [
            "Unspecified",
            "Info",
            "Error"
          ],
          "type": "string",
          "x-enumType": "Severity"
        }
      }
    },
    "ApplicationFeedbackSeverityCount": {
      "type": "object",
      "properties": {
        "Severity": {
          "enum": [
            "Unspecified",
            "Info",
            "Error"
          ],
          "type": "string",
          "x-enumType": "Severity"
        },
        "Count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AndroidAppCatalogRuleSummary": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "RuleStatus": {
          "enum": [
            "Draft",
            "Assigned",
            "Disabled"
          ],
          "type": "string",
          "x-enumType": "RuleStatus"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "RuleKind": {
          "enum": [
            "Undefined",
            "ManagedGooglePlay",
            "Classic"
          ],
          "type": "string",
          "x-enumType": "AndroidAppCatalogRuleKind"
        },
        "Enterprise": {
          "$ref": "#/definitions/Enterprise"
        },
        "AuditInfo": {
          "$ref": "#/definitions/AuditInfo"
        },
        "AssignmentInfo": {
          "$ref": "#/definitions/AssignmentInfo"
        }
      }
    },
    "Enterprise": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "GoogleDomain",
            "ManagedGooglePlay"
          ],
          "type": "string",
          "x-enumType": "EnterpriseType"
        }
      }
    },
    "AuditInfo": {
      "type": "object",
      "properties": {
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedBy": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedBy": {
          "type": "string"
        }
      }
    },
    "AssignmentInfo": {
      "type": "object",
      "properties": {
        "AuditInfo": {
          "$ref": "#/definitions/AuditInfoShort"
        },
        "AssignmentSchedule": {
          "$ref": "#/definitions/AssignmentSchedule"
        }
      }
    },
    "AuditInfoShort": {
      "type": "object",
      "properties": {
        "ModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedBy": {
          "type": "string"
        }
      }
    },
    "AssignmentSchedule": {
      "type": "object",
      "properties": {
        "AssignDate": {
          "format": "date-time",
          "type": "string"
        },
        "DisableDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateAndroidAppCatalogRuleRequest": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "CreateAndroidAppCatalogRuleRequest": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "EnterpriseReferenceId": {
          "type": "string"
        },
        "RuleKind": {
          "enum": [
            "Undefined",
            "ManagedGooglePlay",
            "Classic"
          ],
          "type": "string",
          "x-enumType": "AndroidAppCatalogRuleKind"
        }
      }
    },
    "UpdateAndroidAppCatalogRuleEnterpriseRequest": {
      "type": "object",
      "properties": {
        "EnterpriseReferenceId": {
          "type": "string"
        }
      }
    },
    "CustomerAppCatalogRuleItemAppInventory": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "IsMandatory": {
          "type": "boolean"
        },
        "AppPriority": {
          "format": "int32",
          "type": "integer"
        },
        "AppPackageId": {
          "type": "string"
        },
        "AppName": {
          "type": "string"
        },
        "AppVersion": {
          "type": "string"
        },
        "AppAuthor": {
          "type": "string"
        },
        "AppDescription": {
          "type": "string"
        },
        "AppOriginType": {
          "enum": [
            "InternalApplication",
            "ExternalApplication"
          ],
          "type": "string",
          "x-enumType": "CustomerApplicationOriginType"
        },
        "AppUrl": {
          "type": "string"
        },
        "AppIconUrl": {
          "type": "string"
        }
      }
    },
    "CustomerAppCatalogRuleItem": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "IsMandatory": {
          "type": "boolean"
        },
        "AppPriority": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "GooglePlayStoreAppCatalogRuleItemAppInventory": {
      "type": "object",
      "properties": {
        "IsMandatory": {
          "type": "boolean"
        },
        "IsApproved": {
          "type": "boolean"
        },
        "AppPriority": {
          "format": "int32",
          "type": "integer"
        },
        "AppConfiguration": {
          "type": "string"
        },
        "AppConfigurationSchema": {
          "type": "string"
        },
        "AppIconUrl": {
          "type": "string"
        },
        "Screenshots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AppPackageId": {
          "type": "string"
        },
        "AppName": {
          "type": "string"
        },
        "AppVersion": {
          "type": "string"
        },
        "AppAuthor": {
          "type": "string"
        },
        "AppDescription": {
          "type": "string"
        },
        "AppPrice": {
          "format": "double",
          "type": "number"
        },
        "AppPriceCurrency": {
          "type": "string"
        }
      }
    },
    "GooglePlayStoreAppCatalogRuleItem": {
      "type": "object",
      "properties": {
        "AppPackageId": {
          "type": "string"
        },
        "IsMandatory": {
          "type": "boolean"
        },
        "AppConfiguration": {
          "type": "string"
        },
        "AppPriority": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CatalogueItemReference": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        }
      }
    },
    "IosEnterpriseApplicationMetadata": {
      "type": "object",
      "properties": {
        "ApplicationIdOrUrl": {
          "type": "string"
        },
        "EnterpriseAppBuildVersion": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "StrongId": {
          "type": "string"
        },
        "SupportedDevices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Version": {
          "type": "string"
        },
        "ApplicationOrigin": {
          "enum": [
            "InternalApplication",
            "ExternalApplication"
          ],
          "type": "string",
          "x-enumType": "AppleEnterpriseApplicationOriginType"
        },
        "IconReferenceId": {
          "type": "string"
        },
        "IconUrl": {
          "type": "string"
        }
      }
    },
    "AddExternalFileRequest": {
      "type": "object",
      "properties": {
        "Url": {
          "type": "string"
        }
      }
    },
    "AppleStoreApplicationMetadata": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "AppStoreId": {
          "format": "int64",
          "type": "integer"
        },
        "Version": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Seller": {
          "type": "string"
        },
        "StrongId": {
          "type": "string"
        },
        "SupportedDevices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ScreenshotUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CountryCode": {
          "type": "string"
        },
        "MinimumOsVersion": {
          "type": "string"
        },
        "CurrentVersionReleaseDate": {
          "format": "date-time",
          "type": "string"
        },
        "ApplicationViewUrl": {
          "type": "string"
        },
        "Price": {
          "format": "double",
          "type": "number"
        },
        "Currency": {
          "type": "string"
        },
        "IconReferenceId": {
          "type": "string"
        },
        "IconUrl": {
          "type": "string"
        }
      }
    },
    "MacEnterpriseApplicationMetadata": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "ApplicationIdOrUrl": {
          "type": "string"
        },
        "StrongId": {
          "type": "string"
        },
        "MD5Hash": {
          "type": "string"
        },
        "ApplicationType": {
          "type": "string"
        },
        "ApplicationOrigin": {
          "enum": [
            "InternalApplication",
            "ExternalApplication"
          ],
          "type": "string",
          "x-enumType": "AppleEnterpriseApplicationOriginType"
        },
        "IconReferenceId": {
          "type": "string"
        },
        "IconUrl": {
          "type": "string"
        }
      }
    },
    "AddExternalMacAppRequest": {
      "type": "object",
      "properties": {
        "AppUrl": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "BundleId": {
          "type": "string"
        },
        "ApplicationType": {
          "type": "string"
        }
      }
    },
    "ForceApplicationUpdateRequest": {
      "type": "object",
      "properties": {
        "AppPolicyReferenceId": {
          "type": "string"
        },
        "UpdateAll": {
          "type": "boolean"
        },
        "ApplicationStrongId": {
          "type": "string"
        }
      }
    },
    "AppleAppCatalogRule": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "RuleKind": {
          "enum": [
            "Undefined",
            "Ios",
            "Mac"
          ],
          "type": "string",
          "x-enumType": "AppleAppCatalogRuleKind"
        }
      }
    },
    "AppleAppCatalogRuleSummary": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "RuleKind": {
          "enum": [
            "Undefined",
            "Ios",
            "Mac"
          ],
          "type": "string",
          "x-enumType": "AppleAppCatalogRuleKind"
        },
        "RuleStatus": {
          "enum": [
            "Draft",
            "Assigned",
            "Disabled"
          ],
          "type": "string",
          "x-enumType": "RuleStatus"
        },
        "AuditInfo": {
          "$ref": "#/definitions/AuditInfo"
        },
        "AssignmentInfo": {
          "$ref": "#/definitions/AssignmentInfo"
        }
      }
    },
    "AppleAppCatalogRuleUpdateRequest": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "AssociateMacAppsWithAppCatalogRuleRequest": {
      "type": "object",
      "properties": {
        "MacEnterpriseApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MacEnterpriseAppConfiguration"
          }
        },
        "AppleStoreApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppleStoreAppConfiguration"
          }
        }
      }
    },
    "MacEnterpriseAppConfiguration": {
      "type": "object",
      "properties": {
        "AppVersionReferenceId": {
          "type": "string"
        },
        "AppCatalogRuleReferenceId": {
          "type": "string"
        },
        "IsMandatory": {
          "type": "boolean"
        },
        "Seller": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "AppleStoreAppConfiguration": {
      "type": "object",
      "properties": {
        "AppVersionReferenceId": {
          "type": "string"
        },
        "AppCatalogRuleReferenceId": {
          "type": "string"
        },
        "ConfigurationUri": {
          "type": "string"
        },
        "AppConfiguration": {
          "type": "string"
        },
        "ManagedAssociatedDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UpdateConfiguredDevices": {
          "type": "boolean"
        },
        "IsUpdateEnforced": {
          "type": "boolean"
        },
        "IsAutoUpdateVersionEnabled": {
          "type": "boolean"
        },
        "LastVersionSearchTime": {
          "format": "date-time",
          "type": "string"
        },
        "IsMandatory": {
          "type": "boolean"
        },
        "PromptToInstall": {
          "type": "boolean"
        },
        "TimesPromptToInstall": {
          "format": "int32",
          "type": "integer"
        },
        "AssignmentType": {
          "enum": [
            "AppleIdBased",
            "DeviceBased"
          ],
          "type": "string",
          "x-enumType": "AssignmentType"
        },
        "VppAccountGuid": {
          "type": "string"
        },
        "VppApplicationReferenceId": {
          "type": "string"
        },
        "IsVppUsed": {
          "type": "boolean"
        },
        "IsVppUsedExclusively": {
          "type": "boolean"
        },
        "IsB2B": {
          "type": "boolean"
        },
        "IsAppRemovedOnUnenroll": {
          "type": "boolean"
        },
        "IsBackupPrevented": {
          "type": "boolean"
        },
        "IsFeedbackRequired": {
          "type": "boolean"
        }
      }
    },
    "AppCatalogRuleMacApps": {
      "type": "object",
      "properties": {
        "AppleStoreApplications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppleStoreApplication"
          }
        },
        "EnterpriseApplications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MacEnterpriseApplication"
          }
        }
      }
    },
    "AppleStoreApplication": {
      "type": "object",
      "properties": {
        "ApplicationConfiguration": {
          "$ref": "#/definitions/AppleStoreAppConfiguration"
        },
        "ApplicationMetadata": {
          "$ref": "#/definitions/AppleStoreApplicationMetadata"
        }
      }
    },
    "MacEnterpriseApplication": {
      "type": "object",
      "properties": {
        "ApplicationConfiguration": {
          "$ref": "#/definitions/MacEnterpriseAppConfiguration"
        },
        "ApplicationMetadata": {
          "$ref": "#/definitions/MacEnterpriseApplicationMetadata"
        }
      }
    },
    "AssociateIosAppsWithAppCatalogRuleRequest": {
      "type": "object",
      "properties": {
        "IosEnterpriseApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IosEnterpriseAppConfiguration"
          }
        },
        "AppleStoreApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppleStoreAppConfiguration"
          }
        }
      }
    },
    "IosEnterpriseAppConfiguration": {
      "type": "object",
      "properties": {
        "AppVersionReferenceId": {
          "type": "string"
        },
        "AppCatalogRuleReferenceId": {
          "type": "string"
        },
        "ProvisioningProfileReferenceId": {
          "type": "string"
        },
        "Seller": {
          "type": "string"
        },
        "ConfigurationUri": {
          "type": "string"
        },
        "AppConfiguration": {
          "type": "string"
        },
        "ManagedAssociatedDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Description": {
          "type": "string"
        },
        "IsMandatory": {
          "type": "boolean"
        },
        "PromptToInstall": {
          "type": "boolean"
        },
        "TimesPromptToInstall": {
          "format": "int32",
          "type": "integer"
        },
        "IsAppRemovedOnUnenroll": {
          "type": "boolean"
        },
        "IsBackupPrevented": {
          "type": "boolean"
        },
        "UpdateConfiguredDevices": {
          "type": "boolean"
        },
        "IsUpdateEnforced": {
          "type": "boolean"
        },
        "IsFeedbackRequired": {
          "type": "boolean"
        },
        "ProvisioningProfileFileName": {
          "type": "string"
        }
      }
    },
    "AppCatalogRuleIosApps": {
      "type": "object",
      "properties": {
        "AppleStoreApplications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppleStoreApplication"
          }
        },
        "EnterpriseApplications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IosEnterpriseApplication"
          }
        }
      }
    },
    "IosEnterpriseApplication": {
      "type": "object",
      "properties": {
        "ApplicationConfiguration": {
          "$ref": "#/definitions/IosEnterpriseAppConfiguration"
        },
        "ApplicationMetadata": {
          "$ref": "#/definitions/IosEnterpriseApplicationMetadata"
        }
      }
    },
    "RedemptionCodesRequest": {
      "type": "object",
      "properties": {
        "AppPolicyReferenceId": {
          "type": "string"
        },
        "UseCodes": {
          "type": "boolean"
        },
        "UseCodesExclusive": {
          "type": "boolean"
        }
      }
    },
    "RedemptionCodeApplicationInfo": {
      "type": "object",
      "properties": {
        "Application": {
          "$ref": "#/definitions/RedemptionCodeApplication"
        },
        "Statistics": {
          "$ref": "#/definitions/RedemptionCodeStatistics"
        }
      }
    },
    "RedemptionCodeApplication": {
      "type": "object",
      "properties": {
        "ApplicationId": {
          "type": "string"
        },
        "OrderNumber": {
          "type": "string"
        },
        "Product": {
          "type": "string"
        },
        "Purchaser": {
          "type": "string"
        },
        "AppPolicyReferenceId": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        }
      }
    },
    "RedemptionCodeStatistics": {
      "type": "object",
      "properties": {
        "Available": {
          "format": "int32",
          "type": "integer"
        },
        "RedeemPending": {
          "format": "int32",
          "type": "integer"
        },
        "Redeemed": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RedemptionCodeApplicationExtendedInfo": {
      "type": "object",
      "properties": {
        "Result": {
          "enum": [
            "Success",
            "CollisionByBundleId",
            "ObsoleteFile",
            "ProductNameMismatch",
            "AlreadyUsed"
          ],
          "type": "string",
          "x-enumType": "RedemptionCodeUpdateResult"
        },
        "ProductName": {
          "type": "string"
        },
        "ProductVersion": {
          "type": "string"
        },
        "Application": {
          "$ref": "#/definitions/RedemptionCodeApplication"
        },
        "Statistics": {
          "$ref": "#/definitions/RedemptionCodeStatistics"
        }
      }
    },
    "RedemptionCode": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        },
        "DeviceName": {
          "type": "string"
        },
        "UserName": {
          "type": "string"
        },
        "LastUpdate": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "Available",
            "RedeemPending",
            "Redeemed"
          ],
          "type": "string",
          "x-enumType": "RedemptionCodeStatus"
        },
        "Url": {
          "type": "string"
        }
      }
    },
    "AppCatalogRuleLog": {
      "type": "object",
      "properties": {
        "TimeStamp": {
          "format": "date-time",
          "type": "string"
        },
        "EventSeverity": {
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "Message": {
          "type": "string"
        },
        "EventId": {
          "format": "int32",
          "type": "integer"
        },
        "EventCode": {
          "type": "string"
        },
        "SourceName": {
          "type": "string"
        },
        "EventOriginator": {
          "enum": [
            "Unknown",
            "User",
            "Device",
            "Server",
            "System"
          ],
          "type": "string",
          "x-enumType": "EventOriginator"
        }
      }
    },
    "Assignment": {
      "type": "object",
      "properties": {
        "TargetDeviceGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceGroup2"
          }
        },
        "TargetDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceInfo2"
          }
        },
        "DeviceFilterExpression": {
          "type": "string"
        },
        "UserGroupsFilterExpression": {
          "type": "string"
        },
        "AssignmentOptions": {
          "$ref": "#/definitions/AssignmentOptions"
        }
      }
    },
    "TargetDeviceGroup2": {
      "type": "object",
      "properties": {
        "DeviceGroupPath": {
          "type": "string"
        },
        "Excluded": {
          "type": "boolean"
        }
      }
    },
    "TargetDeviceInfo2": {
      "type": "object",
      "properties": {
        "ParentPath": {
          "type": "string"
        },
        "DeviceName": {
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        },
        "Excluded": {
          "type": "boolean"
        }
      }
    },
    "AssignmentOptions": {
      "type": "object",
      "properties": {
        "AssignDate": {
          "format": "date-time",
          "type": "string"
        },
        "DisableDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AssignmentSummary": {
      "type": "object",
      "properties": {
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "TargetDeviceGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceGroup2"
          }
        },
        "TargetDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceInfo2"
          }
        },
        "DeviceFilterExpression": {
          "type": "string"
        },
        "UserGroupsFilterExpression": {
          "type": "string"
        },
        "AssignmentOptions": {
          "$ref": "#/definitions/AssignmentOptions"
        }
      }
    },
    "RuleLogEntryCount": {
      "type": "object",
      "properties": {
        "EventSeverity": {
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "EventOriginator": {
          "enum": [
            "Unknown",
            "User",
            "Device",
            "Server",
            "System"
          ],
          "type": "string",
          "x-enumType": "EventOriginator"
        },
        "EventId": {
          "format": "int32",
          "type": "integer"
        },
        "Count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DataRetrievalOptions": {
      "type": "object",
      "properties": {
        "Order": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataRetrievalOrder"
          }
        },
        "Skip": {
          "format": "int32",
          "type": "integer"
        },
        "Take": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DataRetrievalOrder": {
      "type": "object",
      "properties": {
        "By": {
          "type": "string"
        },
        "Descending": {
          "type": "boolean"
        }
      }
    },
    "RuleSummary": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Draft",
            "Assigned",
            "Disabled"
          ],
          "type": "string",
          "x-enumType": "RuleStatus"
        },
        "Family": {
          "enum": [
            "Android",
            "Apple",
            "Windows"
          ],
          "type": "string",
          "x-enumType": "RuleFamily"
        },
        "Kind": {
          "enum": [
            "Undefined",
            "AndroidEnterprise",
            "AndroidClassic",
            "AppleIOS",
            "AppleMac",
            "WindowsModern"
          ],
          "type": "string",
          "x-enumType": "RuleSummaryPlatformKind"
        },
        "Description": {
          "type": "string"
        },
        "DisabledDate": {
          "format": "date-time",
          "type": "string"
        },
        "Apps": {
          "format": "int32",
          "type": "integer"
        },
        "AssignedBy": {
          "type": "string"
        },
        "AutoAssignDate": {
          "format": "date-time",
          "type": "string"
        },
        "AssignedDate": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedBy": {
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "LastModified": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "RuleAction": {
      "type": "object",
      "properties": {
        "Action": {
          "enum": [
            "Enable",
            "Disable"
          ],
          "type": "string",
          "x-enumType": "RuleActionType"
        }
      }
    },
    "WindowsApplicationSummaryBase": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "AppKind": {
          "enum": [
            "Unknown",
            "ModernEnterprise",
            "ClassicDesktop",
            "Enterprise"
          ],
          "type": "string",
          "x-enumType": "ApplicationKind"
        },
        "PackageFormat": {
          "enum": [
            "Appx",
            "AppxBundle",
            "Xap",
            "Msi"
          ],
          "type": "string",
          "x-enumType": "PackageFormatType"
        },
        "DisplayName": {
          "type": "string"
        },
        "Architectures": {
          "enum": [
            "None",
            "ARM",
            "X86",
            "X64",
            "ARM64",
            "Neutral"
          ],
          "type": "string",
          "x-enumType": "ProcessorArchitectures"
        },
        "Version": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "AddExternalEnterpriseAppRequest": {
      "type": "object",
      "properties": {
        "PackageDownloadUrl": {
          "type": "string"
        }
      }
    },
    "WindowsModernAppSummary": {
      "type": "object",
      "properties": {
        "PackageFullName": {
          "type": "string"
        },
        "PackageUrl": {
          "type": "string"
        },
        "Platforms": {
          "enum": [
            "None",
            "Windows8x",
            "WindowsPhone8x",
            "WindowsMobile",
            "WindowsDesktop",
            "WindowsTeam",
            "WindowsHolographic",
            "WindowsUniversal"
          ],
          "type": "string",
          "x-enumType": "PlatformTypes"
        },
        "PackageIdentityName": {
          "type": "string"
        },
        "Dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnterpriseAppDependency"
          }
        },
        "Author": {
          "type": "string"
        },
        "Publisher": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "AppKind": {
          "enum": [
            "Unknown",
            "ModernEnterprise",
            "ClassicDesktop",
            "Enterprise"
          ],
          "type": "string",
          "x-enumType": "ApplicationKind"
        },
        "PackageFormat": {
          "enum": [
            "Appx",
            "AppxBundle",
            "Xap",
            "Msi"
          ],
          "type": "string",
          "x-enumType": "PackageFormatType"
        },
        "DisplayName": {
          "type": "string"
        },
        "Architectures": {
          "enum": [
            "None",
            "ARM",
            "X86",
            "X64",
            "ARM64",
            "Neutral"
          ],
          "type": "string",
          "x-enumType": "ProcessorArchitectures"
        },
        "Version": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "EnterpriseAppDependency": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Publisher": {
          "type": "string"
        },
        "MinVersion": {
          "type": "string"
        }
      }
    },
    "EnterpriseAppQueryInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "PublisherIdName": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Architectures": {
          "enum": [
            "None",
            "ARM",
            "X86",
            "X64",
            "ARM64",
            "Neutral"
          ],
          "type": "string",
          "x-enumType": "ProcessorArchitectures"
        },
        "MatchHigherVersion": {
          "type": "boolean"
        }
      }
    },
    "WindowsAppCatalogRule": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "WindowsAppCatalogRuleSummary": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "RuleStatus": {
          "enum": [
            "Draft",
            "Assigned",
            "Disabled"
          ],
          "type": "string",
          "x-enumType": "RuleStatus"
        },
        "AuditInfo": {
          "$ref": "#/definitions/AuditInfo"
        },
        "AssignmentInfo": {
          "$ref": "#/definitions/AssignmentInfo"
        }
      }
    },
    "UpdateWindowsAppCatalogRuleAppsRequest": {
      "type": "object",
      "properties": {
        "RuleReferenceId": {
          "type": "string"
        },
        "WindowsApplicationConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppCatalogRuleWindowsAppConfiguration"
          }
        }
      }
    },
    "AppCatalogRuleWindowsAppConfiguration": {
      "type": "object",
      "properties": {
        "AppReferenceId": {
          "type": "string"
        },
        "AppKind": {
          "type": "string"
        }
      }
    },
    "WindowsAppCatalogRuleAppsSummary": {
      "type": "object",
      "properties": {
        "RuleReferenceId": {
          "type": "string"
        },
        "AppCatalogRuleWindowsApplications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppCatalogRuleWindowsApplication"
          }
        }
      }
    },
    "AppCatalogRuleWindowsApplication": {
      "type": "object",
      "properties": {}
    },
    "CertificationAuthoritySummary": {
      "type": "object",
      "properties": {
        "NumberOfCertificateTemplates": {
          "format": "int32",
          "type": "integer"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "CertificationAuthority": {
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "AdcsPkiDcomCertificationAuthority": {
      "type": "object",
      "properties": {
        "EnrollmentCertificateFileInfo": {
          "type": "string"
        },
        "RootCertificateFileInfo": {
          "type": "string"
        },
        "ServerHostName": {
          "type": "string"
        },
        "CloudLinkAgentName": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "AdcsPkiHttpsCertificationAuthority": {
      "type": "object",
      "properties": {
        "PolicyServiceUrl": {
          "type": "string"
        },
        "EnrolmentServiceUrl": {
          "type": "string"
        },
        "RootCertificateInfo": {
          "type": "string"
        },
        "EnrolmentCertificateInfo": {
          "type": "string"
        },
        "AuthenticationType": {
          "enum": [
            "None",
            "Certificate",
            "UserNamePassword",
            "Kerberos"
          ],
          "type": "string",
          "x-enumType": "AdcsAuthenticationType"
        },
        "CertificateInfo": {
          "type": "string"
        },
        "UserName": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "CloudLinkAgentName": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "AdcsScepCertificationAuthority": {
      "type": "object",
      "properties": {
        "UserName": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "UseClient": {
          "type": "boolean"
        },
        "MaxRetries": {
          "format": "int32",
          "type": "integer"
        },
        "RetryTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "ServiceUrl": {
          "type": "string"
        },
        "ChallengeUrl": {
          "type": "string"
        },
        "UseStaticChallenge": {
          "type": "boolean"
        },
        "StaticChallenge": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "CloudLinkAgentName": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "EntrustCertificationAuthority": {
      "type": "object",
      "properties": {
        "UserName": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "ServiceUrl": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "GenericScepCertificationAuthority": {
      "type": "object",
      "properties": {
        "UseClient": {
          "type": "boolean"
        },
        "ServiceUrl": {
          "type": "string"
        },
        "UseStaticChallenge": {
          "type": "boolean"
        },
        "StaticChallenge": {
          "type": "string"
        },
        "MaxRetries": {
          "format": "int32",
          "type": "integer"
        },
        "RetryTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "Fingerprint": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "SymantecCertificationAuthority": {
      "type": "object",
      "properties": {
        "ServiceUrl": {
          "type": "string"
        },
        "FileInfo": {
          "type": "string"
        },
        "CertificateFileName": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityType": {
          "enum": [
            "None",
            "AdcsPkiDcom",
            "AdcsPkiHttps",
            "AdcsScep",
            "Entrust",
            "GenericScep",
            "SymantecPki"
          ],
          "type": "string",
          "x-enumType": "CertificationAuthorityType"
        }
      }
    },
    "CertificateInfo": {
      "type": "object",
      "properties": {
        "SerialNumber": {
          "type": "string"
        },
        "SubjectName": {
          "type": "string"
        },
        "Issuer": {
          "type": "string"
        },
        "HasPrivateKey": {
          "type": "boolean"
        },
        "NotBeforeDate": {
          "format": "date-time",
          "type": "string"
        },
        "NotAfterDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsRevoked": {
          "type": "boolean"
        },
        "WasRenewed": {
          "type": "boolean"
        },
        "WasStoredWithPrivateKey": {
          "type": "boolean"
        },
        "Hash": {
          "type": "string"
        }
      }
    },
    "CertificateTemplate": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "CertificationAuthorityReferenceId": {
          "type": "string"
        },
        "CertificationAuthorityTemplateName": {
          "type": "string"
        },
        "CertificateTarget": {
          "enum": [
            "Device",
            "User"
          ],
          "type": "string",
          "x-enumType": "CertificateTarget"
        },
        "SubjectTemplate": {
          "type": "string"
        },
        "AlternativeSubjectTemplate": {
          "type": "string"
        },
        "CertificateUsage": {
          "enum": [
            "None",
            "Signing",
            "Encryption",
            "SigningAndEncryption"
          ],
          "type": "string",
          "x-enumType": "CertificateUsage"
        },
        "KeySize": {
          "format": "int32",
          "type": "integer"
        },
        "ShouldRemoveAfterRenewal": {
          "type": "boolean"
        },
        "UseAutoRenewal": {
          "type": "boolean"
        },
        "NumberOfDaysForAutoRenewal": {
          "format": "int32",
          "type": "integer"
        },
        "PreservePrivateKey": {
          "type": "boolean"
        },
        "Disabled": {
          "type": "boolean"
        },
        "PublishToLdap": {
          "type": "boolean"
        },
        "KeyProtection": {
          "enum": [
            "Protected",
            "ProtectedIfSupported",
            "NotProtected"
          ],
          "type": "string",
          "x-enumType": "KeyProtection"
        },
        "HashAlgorithm": {
          "enum": [
            "Sha1",
            "Sha2",
            "Sha3"
          ],
          "type": "string",
          "x-enumType": "HashAlgorithm"
        },
        "ValuePeriod": {
          "enum": [
            "Days",
            "Months",
            "Years"
          ],
          "type": "string",
          "x-enumType": "ValuePeriod"
        },
        "ValuePeriodUnits": {
          "format": "int32",
          "type": "integer"
        },
        "CertificateTemplateGuid": {
          "type": "string"
        },
        "Ekus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EkuEntry"
          }
        },
        "RequireUserAuthentication": {
          "type": "boolean"
        }
      }
    },
    "EkuEntry": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Oid": {
          "type": "string"
        },
        "IsCustom": {
          "type": "boolean"
        },
        "ReferenceId": {
          "type": "string"
        }
      }
    },
    "CompliancePolicy": {
      "description": "Compliance Policy",
      "required": [
        "CriteriaExpression",
        "Name"
      ],
      "type": "object",
      "properties": {
        "CriteriaExpression": {
          "description": "Conditions of this compliance policy",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Description": {
          "description": "Description of this compliance policy",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Target device family",
          "enum": [
            "iOS",
            "Android",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "ComplianceDeviceFamily"
        },
        "Name": {
          "description": "Name of this compliance policy",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Status": {
          "description": "Status of the policy",
          "enum": [
            "Disabled",
            "Active"
          ],
          "type": "string",
          "x-enumType": "CompliancePolicyStatus"
        }
      }
    },
    "CompliancePolicySummary": {
      "description": "Summary of a compliance policy",
      "type": "object",
      "properties": {
        "Assigned": {
          "format": "int32",
          "description": "Number of devices that the compliance policy is assigned to",
          "type": "integer"
        },
        "AssignedBy": {
          "description": "User the policy was assigned by",
          "type": "string"
        },
        "AssignedDate": {
          "format": "date-time",
          "description": "Date the policy was assigned",
          "type": "string"
        },
        "Compliant": {
          "format": "int32",
          "description": "Number of compliant devices",
          "type": "integer"
        },
        "CreatedBy": {
          "description": "User who created the compliance policy",
          "type": "string"
        },
        "CreatedDate": {
          "format": "date-time",
          "description": "Created date",
          "type": "string"
        },
        "CriteriaExpression": {
          "description": "Conditions of this compliance policy",
          "type": "string"
        },
        "Description": {
          "description": "Description of this compliance policy",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Target device family",
          "enum": [
            "iOS",
            "Android",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "ComplianceDeviceFamily"
        },
        "IsAssigned": {
          "description": "",
          "type": "boolean"
        },
        "LastModified": {
          "format": "date-time",
          "description": "Updated date",
          "type": "string"
        },
        "LastModifiedBy": {
          "description": "User who updated the compliance policy",
          "type": "string"
        },
        "Name": {
          "description": "Name of this compliance policy",
          "type": "string"
        },
        "NonCompliant": {
          "format": "int32",
          "description": "Number of non compliant devices",
          "type": "integer"
        },
        "Pending": {
          "format": "int32",
          "description": "Number of devices that are pending compliance evaluation",
          "type": "integer"
        },
        "ReferenceId": {
          "description": "Reference ID of this compliance policy",
          "type": "string"
        },
        "Status": {
          "description": "Status of the policy",
          "enum": [
            "Disabled",
            "Active"
          ],
          "type": "string",
          "x-enumType": "CompliancePolicyStatus"
        },
        "Actions": {
          "format": "int32",
          "description": "Number of Actions",
          "type": "integer"
        }
      }
    },
    "CompliancePolicyAssignmentSummary": {
      "description": "Assignment of a compliance policy",
      "type": "object",
      "properties": {
        "DeviceFilterExpression": {
          "description": "Gets or sets device filter expression",
          "type": "string"
        },
        "UserGroupsFilterExpression": {
          "description": "Gets or sets user groups filter expression",
          "type": "string"
        },
        "TargetDeviceGroups": {
          "description": "The target device groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceGroup"
          }
        },
        "TargetDevices": {
          "description": "The target devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplianceTargetDeviceInfo"
          }
        },
        "AssignDate": {
          "format": "date-time",
          "description": "Assignment date",
          "type": "string"
        },
        "AssignedBy": {
          "description": "Assignment user",
          "type": "string"
        }
      }
    },
    "TargetDeviceGroup": {
      "description": "Target device group",
      "required": [
        "DeviceGroupPath"
      ],
      "type": "object",
      "properties": {
        "DeviceGroupPath": {
          "description": "Device group path",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Excluded": {
          "description": "Indicates whether the device group is excluded.",
          "type": "boolean"
        }
      }
    },
    "ComplianceTargetDeviceInfo": {
      "description": "The target device definition",
      "required": [
        "DeviceId"
      ],
      "type": "object",
      "properties": {
        "ParentPath": {
          "description": "Parent Path",
          "type": "string"
        },
        "DeviceName": {
          "description": "Device Name",
          "type": "string"
        },
        "DeviceId": {
          "description": "Device id",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Excluded": {
          "description": "Indicates whether the device is excluded",
          "type": "boolean"
        }
      }
    },
    "CompliancePolicyAssignment": {
      "description": "Assignment of a compliance policy",
      "type": "object",
      "properties": {
        "TargetDeviceGroups": {
          "description": "The target device groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceGroup"
          }
        },
        "TargetDevices": {
          "description": "The target devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDevice"
          }
        },
        "DeviceFilterExpression": {
          "description": "Gets or sets device filter expression",
          "type": "string"
        },
        "UserGroupsFilterExpression": {
          "description": "Gets or sets user groups filter expression",
          "type": "string"
        }
      }
    },
    "TargetDevice": {
      "description": "The target device definition",
      "required": [
        "DeviceId"
      ],
      "type": "object",
      "properties": {
        "DeviceId": {
          "description": "Device id",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Excluded": {
          "description": "Indicates whether the device is excluded",
          "type": "boolean"
        }
      }
    },
    "ComplianceAction": {
      "description": "Compliance action base",
      "type": "object",
      "properties": {
        "ExecutionDelay": {
          "format": "int32",
          "description": "Execution delay",
          "type": "integer"
        },
        "ExecutionDelayUnit": {
          "description": "Execution delay unit type",
          "enum": [
            "Hours",
            "Days"
          ],
          "type": "string",
          "x-enumType": "ExecutionDelayUnitType"
        },
        "ActionInformation": {
          "description": "Information based on compliance action",
          "type": "string"
        },
        "Type": {
          "description": "Compliance action type",
          "enum": [
            "Exchange",
            "EmailNotification"
          ],
          "type": "string",
          "readOnly": true,
          "x-enumType": "ComplianceActionType"
        },
        "ActionInfoDescriptor": {
          "description": "Action Info Descriptor",
          "enum": [
            "Na",
            "ExchangeServerName",
            "EmailRecipient"
          ],
          "type": "string",
          "x-enumType": "ComplianceActionInfoDescriptor"
        }
      }
    },
    "CompliancePolicyLogEntry": {
      "description": "Contains information for a compliance policy log entry",
      "type": "object",
      "properties": {
        "Timestamp": {
          "format": "date-time",
          "description": "Log entry timestamp",
          "type": "string"
        },
        "EventSeverity": {
          "description": "Log entry severity",
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "Message": {
          "description": "Log entry message",
          "type": "string"
        },
        "SourceName": {
          "description": "Log entry source name",
          "type": "string"
        },
        "EventId": {
          "format": "int32",
          "description": "Log entry event identifier",
          "type": "integer"
        },
        "EventCode": {
          "description": "Log entry event identifier",
          "type": "string"
        },
        "EventOriginator": {
          "description": "Log entry source type",
          "enum": [
            "Unknown",
            "User",
            "Device",
            "Server",
            "System"
          ],
          "type": "string",
          "x-enumType": "EventOriginator"
        }
      }
    },
    "LogEntryCount": {
      "description": "Contains count of device log entries for given breakdown",
      "type": "object",
      "properties": {
        "EventSeverity": {
          "description": "Log entries severity",
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "LogSource": {
          "description": "Log entries source type",
          "enum": [
            "Unknown",
            "User",
            "Device",
            "Server",
            "System"
          ],
          "type": "string",
          "x-enumType": "EventOriginator"
        },
        "Count": {
          "format": "int32",
          "description": "Log entries count",
          "type": "integer"
        }
      }
    },
    "CustomAttribute": {
      "description": "Custom attribute type information",
      "required": [
        "Name",
        "CustomAttributeDataType",
        "PropagateToDevice"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Custom attribute type name",
          "maxLength": 80,
          "minLength": 0,
          "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            },
            {
              "type": "regexValidator",
              "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
              "errorMessage": "msg_invalidChar"
            },
            {
              "type": "stringLengthValidator",
              "min": 0,
              "max": 80,
              "errorMessage": "msg_max80Character_customAttributeName"
            }
          ]
        },
        "CustomAttributeDataType": {
          "description": "Custom attribute data type",
          "enum": [
            "Boolean",
            "Numeric",
            "Text",
            "DateTime",
            "Enumerator",
            "Date"
          ],
          "type": "string",
          "x-enumType": "CustomAttributeDataType",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "EnumValues": {
          "description": "List of possible values, if the custom attribute type is enumeration",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PropagateToDevice": {
          "description": "Defines if the custom attribute is propagated to devices",
          "type": "boolean",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "CatalogueItemReferenceId": {
      "description": "Contract for CatalogueItem ReferenceId to manage access rights",
      "type": "object",
      "properties": {
        "Id": {
          "description": "ReferenceId of CatalogueItem",
          "type": "string"
        }
      }
    },
    "CustomData": {
      "description": "Custom data type information",
      "required": [
        "Name",
        "PhysicalType",
        "DeviceFamily"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Custom data name",
          "maxLength": 80,
          "minLength": 0,
          "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            },
            {
              "type": "regexValidator",
              "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
              "errorMessage": "msg_invalidChar"
            },
            {
              "type": "stringLengthValidator",
              "min": 0,
              "max": 80,
              "errorMessage": "msg_max80Character_customDataName"
            }
          ]
        },
        "BuiltinDataTypeName": {
          "description": "Builtin datatype name",
          "enum": [
            "BatterySerialNumber",
            "BatteryTemperature",
            "BatteryPartNumber",
            "BatteryManufacturerDate",
            "BatteryHealthPercentage",
            "BatteryChargeCycle",
            "TotalMemory",
            "TotalStorage",
            "MACAddress",
            "DeviceName",
            "DeviceID",
            "PrinterZbiBasicForcedRuntimeError",
            "PrinterRibbonOut",
            "PrinterRibbonLow",
            "PrinterRibboninWarning",
            "PrinterRfidError",
            "PrinterRewindFull",
            "PrinterReplaceHead",
            "PrinterPaused",
            "PrinterPqJobCompleted",
            "PrinterPowerSupplyOverTemp",
            "PrinterPowerOn",
            "PrinterPaperOut",
            "PrinterMediaLow",
            "PrinterLabelReady",
            "PrinterHeadTooHot",
            "PrinterHeadOpen",
            "PrinterHeadElementBad",
            "PrinterHeadCold",
            "PrinterCutterJammed",
            "PrinterAvailableSdCardStorage",
            "PrinterCleanPrinthead",
            "PrinterBatteryLow",
            "FailedPasswordAttempts",
            "ForegroundApp",
            "MissedCalls",
            "SuccessCalls",
            "DroppedCalls",
            "AvailableExternalStorage",
            "AvailableInternalStorage",
            "OperatingSystemVersion",
            "CallLog",
            "TrafficCellularTethered",
            "TrafficCellularRoaming",
            "TrafficCellular",
            "TrafficWifi",
            "TrafficUsb",
            "BSSID",
            "CellularSignalStrength",
            "CellularCarrier",
            "IPAddress",
            "RSSI",
            "SSID",
            "Location",
            "AvailableStorage",
            "AvailableMemory",
            "BatteryStatus"
          ],
          "type": "string",
          "x-enumType": "DeviceCollectedDataType"
        },
        "Expression": {
          "description": "Custom data expression",
          "type": "string"
        },
        "PhysicalType": {
          "description": "Custom data type",
          "enum": [
            "String",
            "Float",
            "Int",
            "Byte",
            "SmallInt",
            "BigInt",
            "Location",
            "NetworkTraffic",
            "UnsignedInt",
            "CallLog",
            "NetworkConnectionType",
            "None"
          ],
          "type": "string",
          "x-enumType": "PhysicalType",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Description": {
          "description": "Custom data description",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Applicable device family",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "DeviceKinds": {
          "description": "Applicable device families",
          "type": "array",
          "items": {
            "enum": [
              "AndroidForWork",
              "AndroidElm",
              "AndroidKnox",
              "AndroidPlus",
              "AndroidGeneric",
              "Ios",
              "Mac",
              "WindowsCE",
              "WindowsDesktop",
              "WindowsDesktopLegacy",
              "WindowsPhone",
              "WindowsRuntime",
              "ZebraPrinter",
              "Linux",
              "WindowsHoloLens",
              "WindowsXtHub",
              "Unknown"
            ],
            "type": "string",
            "x-enumType": "DeviceKind"
          }
        }
      }
    },
    "DeviceGroup": {
      "description": "Represents a base class for device groups",
      "required": [
        "Name",
        "Path",
        "Icon",
        "Kind"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the device group",
          "maxLength": 255,
          "minLength": 0,
          "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator",
              "errorMessage": "msg_requiredProperty"
            },
            {
              "type": "regexValidator",
              "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
              "errorMessage": "msg_invalidChar"
            },
            {
              "type": "stringLengthValidator",
              "min": 0,
              "max": 255,
              "errorMessage": "msg_max255Character_deviceGroupName"
            }
          ]
        },
        "Path": {
          "description": "The full device group path (includes device group Name)",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator",
              "errorMessage": "msg_requiredProperty"
            }
          ]
        },
        "Icon": {
          "description": "Device group icon",
          "enum": [
            "Yellow",
            "Red",
            "Green",
            "Blue",
            "Purple",
            "Cyan",
            "None"
          ],
          "type": "string",
          "x-enumType": "DeviceGroupIcon",
          "x-validators": [
            {
              "type": "requiredValidator",
              "errorMessage": "msg_requiredProperty"
            }
          ]
        },
        "Kind": {
          "description": "Device group kind",
          "enum": [
            "Regular",
            "Virtual"
          ],
          "type": "string",
          "x-enumType": "DeviceGroupKind",
          "x-validators": [
            {
              "type": "requiredValidator",
              "errorMessage": "msg_requiredProperty"
            }
          ]
        },
        "ReferenceId": {
          "description": "Device group reference id",
          "type": "string"
        }
      }
    },
    "VirtualDeviceGroupFilter": {
      "description": "Represents a filter for a virtual device group",
      "type": "object",
      "properties": {
        "Expression": {
          "description": "The virtual group filter expression.",
          "type": "string"
        },
        "FilterScope": {
          "description": "The scope for the virtual group filter",
          "enum": [
            "ParentGroup",
            "Global"
          ],
          "type": "string",
          "x-enumType": "FilterScope"
        }
      }
    },
    "CustomAttributeInfo": {
      "description": "Device Label",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the name of the custom attribute. Must be unique.",
          "type": "string"
        },
        "OriginName": {
          "description": "Gets or sets group name from where label originated",
          "type": "string"
        },
        "IsInherited": {
          "description": "Gets or sets a value indicating whether the label defined for current group/device or is inherited",
          "type": "boolean"
        },
        "Value": {
          "description": "Gets or sets the value of the custom attribute",
          "type": "string"
        },
        "DataType": {
          "description": "Gets or sets the data type",
          "enum": [
            "Boolean",
            "Numeric",
            "Text",
            "DateTime",
            "Enumerator",
            "Date"
          ],
          "type": "string",
          "x-enumType": "CustomAttributeDataType"
        }
      }
    },
    "CustomAttributeParameters": {
      "description": "List of key value pairs for updating device custom attributes",
      "type": "object",
      "properties": {
        "Attributes": {
          "description": "The attribute names and values to be updated",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomAttributeUpdateValue"
          }
        }
      }
    },
    "CustomAttributeUpdateValue": {
      "description": "Update details for a given custom attribute",
      "type": "object",
      "properties": {
        "AttributeName": {
          "description": "The name of the target attribute",
          "type": "string"
        },
        "AttributeValue": {
          "description": "The new value for the target attribute",
          "type": "string"
        }
      }
    },
    "DeviceLocation": {
      "description": "Represents a device location",
      "type": "object",
      "properties": {
        "DeviceId": {
          "description": "Gets device string id",
          "type": "string"
        },
        "Latitude": {
          "format": "double",
          "description": "Gets device latitude",
          "type": "number"
        },
        "Longitude": {
          "format": "double",
          "description": "Gets device longitude",
          "type": "number"
        },
        "Speed": {
          "format": "float",
          "description": "Gets device speed",
          "type": "number"
        },
        "Heading": {
          "format": "float",
          "description": "Gets device heading",
          "type": "number"
        },
        "CollectionTimestamp": {
          "format": "date-time",
          "description": "Gets device's location collection time Stamp",
          "type": "string"
        }
      }
    },
    "BulkDeviceActionStatus": {
      "description": "Represents Status of Bulk Device Action",
      "type": "object",
      "properties": {
        "Succeeded": {
          "format": "int32",
          "description": "Gets or Sets the number of successfully located devices",
          "type": "integer"
        },
        "Failed": {
          "format": "int32",
          "description": "Gets or Sets the number of devices which failed to locate",
          "type": "integer"
        },
        "Pending": {
          "format": "int32",
          "description": "Gets or Sets the number of devices which still pending location",
          "type": "integer"
        }
      }
    },
    "ActionBase": {
      "description": "Defines device action with relevant parameters",
      "type": "object",
      "properties": {
        "Action": {
          "description": "The action kind to be executed",
          "enum": [
            "CheckIn",
            "Wipe",
            "Lock",
            "Unenroll",
            "SendMessage",
            "Locate",
            "SendScript",
            "Delete",
            "Disable",
            "Enable",
            "Rename",
            "SetPasscode",
            "AppleSoftwareUpdateScan",
            "AppleSoftwareUpdateSchedule",
            "AppleSoftwareUpdateRefreshStatus",
            "SetDeviceName",
            "ResetPasscode",
            "AllowSotiSurf",
            "BlockSotiSurf",
            "ClearRestrictions",
            "BypassActivationLock",
            "SoftReset",
            "RemoteRing",
            "TurnOffSuspend",
            "StartTracking",
            "StopTracking",
            "ClearSotiSurfCache",
            "BlockSotiHub",
            "AllowSotiHub",
            "ClearSotiHubCache",
            "DisablePasscodeLock",
            "ScanForViruses",
            "UpdateVirusDefinitions",
            "SendTestPage",
            "FactoryReset",
            "EnableWorkProfile",
            "DisableWorkProfile",
            "SendSmsMessage",
            "SetWallpaper",
            "ResetUserBinding",
            "EnableLostMode",
            "DisableLostMode",
            "BlockExchangeAccess",
            "AllowExchangeAccess",
            "EnableAgentUpgrade",
            "DisableAgentUpgrade",
            "MigrateToELMAgent",
            "UpgradeAgentNow",
            "SyncFilesNow",
            "SendScriptViaSms",
            "EnrollInEFOTA",
            "LinuxSoftwareUpdateSchedule",
            "UpgradeFirmware",
            "UpdateManagementProfile",
            "SendScriptViaPns",
            "ResetContainerPasscode",
            "UpgradeAgent",
            "UpdateLicense",
            "PlaySound",
            "LinuxSoftwareUpdateScan",
            "SetFirmwarePassword",
            "UnlockUserAccount",
            "MigrateToAndroidEnterprise",
            "SharedDeviceLogout",
            "DeleteUser",
            "AdsInstallPlugIns",
            "SharedDeviceTroubleshoot",
            "MoveDevice",
            "ResetAccount",
            "ResetExchangeAccess",
            "AppFeedbackUpdate",
            "RefreshCellularPlans",
            "UpgradeFirmwareZebra",
            "EnableAdminMode",
            "DisableAdminMode",
            "EnableKioskMode",
            "DisableKioskMode"
          ],
          "type": "string",
          "readOnly": true,
          "x-enumType": "DeviceAction"
        }
      }
    },
    "BulkDeviceGroupAction": {
      "description": "Contains the action plus search filter to select devices in group for action.",
      "required": [
        "ActionInfo"
      ],
      "type": "object",
      "properties": {
        "ActionInfo": {
          "$ref": "#/definitions/ActionBase",
          "description": "Additional action info (if any)",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Filter": {
          "description": "Search filter for the device search",
          "type": "string"
        }
      }
    },
    "DeviceGroupAdvancedSettingsStatus": {
      "description": "",
      "type": "object",
      "properties": {
        "GroupSettings": {
          "description": "The collection of {Soti.MobiControl.Contracts.PublicApi.DeviceGroupSettings.DeviceGroupAdvancedSetting} elements",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceGroupFamilyAdvancedSetting"
          }
        }
      }
    },
    "DeviceGroupFamilyAdvancedSetting": {
      "description": "A {Soti.MobiControl.Contracts.PublicApi.DeviceGroupSettings.DeviceGroupFamilyAdvancedSetting} represents a collection of \r\n            advanced settings that apply to a device group for a given device family",
      "type": "object",
      "properties": {
        "TargetFamily": {
          "description": "The family for which the contained settings apply",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily"
        },
        "GroupAdvancedSettings": {
          "description": "The collection of {Soti.MobiControl.Contracts.PublicApi.DeviceGroupSettings.DeviceGroupAdvancedSetting} elements",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceGroupAdvancedSetting"
          }
        }
      }
    },
    "DeviceGroupAdvancedSetting": {
      "description": "A {Soti.MobiControl.Contracts.PublicApi.DeviceGroupSettings.DeviceGroupAdvancedSetting} represents an individual advanced setting/configuration\r\n            on a device group and includes whether the given setting has an inherited value and where the inherited\r\n            value comes from if applicable",
      "type": "object",
      "properties": {
        "SettingName": {
          "description": "The name of the advanced setting",
          "type": "string"
        },
        "IsInherited": {
          "description": "Whether this setting has a value that is inherited",
          "type": "boolean"
        },
        "InheritsFrom": {
          "description": "If the value is inherited, this will be the name of the group it inherits from",
          "type": "string"
        },
        "LastUpdate": {
          "format": "date-time",
          "description": "Gets or sets the time this configuration was last updated.",
          "type": "string"
        },
        "ConfiguredBy": {
          "description": "If the value is inherited, this will be the name of the User",
          "type": "string"
        }
      }
    },
    "Note": {
      "description": "Note",
      "type": "object",
      "properties": {
        "Type": {
          "description": "Type",
          "enum": [
            "NotSet",
            "DeviceNote",
            "GroupNote"
          ],
          "type": "string",
          "x-enumType": "NoteType"
        },
        "Subject": {
          "description": "Subject",
          "type": "string"
        },
        "Description": {
          "description": "Description",
          "type": "string"
        },
        "Icon": {
          "description": "Icon",
          "enum": [
            "Red",
            "Blue",
            "Green",
            "Purple",
            "Cyan",
            "Yellow",
            "None"
          ],
          "type": "string",
          "x-enumType": "NoteIcon"
        },
        "EditDate": {
          "format": "date-time",
          "description": "Edit Date",
          "type": "string"
        },
        "UserName": {
          "description": "User Name",
          "type": "string"
        },
        "ReferenceId": {
          "description": "Unique identifier for note.",
          "type": "string"
        }
      }
    },
    "MemberNote": {
      "description": "A note belonging to a device in a group.",
      "type": "object",
      "properties": {
        "DeviceName": {
          "description": "The name of the device to which this note belongs.",
          "type": "string"
        },
        "DeviceId": {
          "description": "The public ID of the device to which the note belongs.",
          "type": "string"
        },
        "Type": {
          "description": "Type",
          "enum": [
            "NotSet",
            "DeviceNote",
            "GroupNote"
          ],
          "type": "string",
          "x-enumType": "NoteType"
        },
        "Subject": {
          "description": "Subject",
          "type": "string"
        },
        "Description": {
          "description": "Description",
          "type": "string"
        },
        "Icon": {
          "description": "Icon",
          "enum": [
            "Red",
            "Blue",
            "Green",
            "Purple",
            "Cyan",
            "Yellow",
            "None"
          ],
          "type": "string",
          "x-enumType": "NoteIcon"
        },
        "EditDate": {
          "format": "date-time",
          "description": "Edit Date",
          "type": "string"
        },
        "UserName": {
          "description": "User Name",
          "type": "string"
        },
        "ReferenceId": {
          "description": "Unique identifier for note.",
          "type": "string"
        }
      }
    },
    "DeviceKindActionSchema": {
      "description": "Schema that represents actions a given device kind can perform",
      "type": "object",
      "properties": {
        "Kind": {
          "description": "The device kind",
          "enum": [
            "AndroidForWork",
            "AndroidElm",
            "AndroidKnox",
            "AndroidPlus",
            "AndroidGeneric",
            "Ios",
            "Mac",
            "WindowsCE",
            "WindowsDesktop",
            "WindowsDesktopLegacy",
            "WindowsPhone",
            "WindowsRuntime",
            "ZebraPrinter",
            "Linux",
            "WindowsHoloLens",
            "WindowsXtHub",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "DeviceKind"
        },
        "AvailableActions": {
          "description": "Actions that can be performed on this device kind",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionItemSchema"
          }
        }
      }
    },
    "ActionItemSchema": {
      "description": "Schema for an individual action for a device",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the action",
          "type": "string"
        },
        "MultipleDevicesAccepted": {
          "description": "Whether this action can affect one or multiple devices",
          "type": "boolean"
        },
        "ApplicableInstanceType": {
          "description": "Whether this action can be executed only on real devices, virtual \r\n            devices, or all instances",
          "type": "string"
        },
        "ActionParameters": {
          "description": "Parameters for this action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionParameter"
          }
        }
      }
    },
    "ActionParameter": {
      "description": "Base class for all parameters",
      "type": "object",
      "properties": {
        "IsRequired": {
          "description": "Whether this parameter is required for execution of this action",
          "type": "boolean"
        }
      }
    },
    "DeviceConfigurationSchema": {
      "description": "A device configuration payload",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name",
          "type": "string"
        },
        "IsAdvanced": {
          "description": "Whether this is an advanced payload",
          "type": "boolean"
        }
      }
    },
    "DeviceBase": {
      "description": "Base class for all device types",
      "type": "object",
      "properties": {
        "Kind": {
          "description": "Gets or sets device Kind",
          "enum": [
            "AndroidForWork",
            "AndroidElm",
            "AndroidKnox",
            "AndroidPlus",
            "AndroidGeneric",
            "Ios",
            "Mac",
            "WindowsCE",
            "WindowsDesktop",
            "WindowsDesktopLegacy",
            "WindowsPhone",
            "WindowsRuntime",
            "ZebraPrinter",
            "Linux",
            "WindowsHoloLens",
            "WindowsXtHub",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "DeviceKind"
        },
        "CompliancePolicyStatus": {
          "description": "Gets or sets the device compliance policy status",
          "enum": [
            "Pending",
            "NonCompliant",
            "Compliant"
          ],
          "type": "string",
          "x-enumType": "DeviceCompliancePolicyStatus"
        },
        "ComplianceStatus": {
          "description": "Gets or sets ComplianceStatus",
          "type": "boolean"
        },
        "ComplianceItems": {
          "description": "Gets or sets ComplianceItems",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplianceItem"
          }
        },
        "DeviceId": {
          "description": "Gets or sets DeviceId",
          "type": "string"
        },
        "DeviceName": {
          "description": "Gets or sets DeviceName",
          "type": "string"
        },
        "EnrollmentType": {
          "description": "Indicate if this is user enrollment or device enrollment.",
          "enum": [
            "NotApplicable",
            "Device",
            "User"
          ],
          "type": "string",
          "x-enumType": "EnrollmentType"
        },
        "EnrollmentTime": {
          "format": "date-time",
          "description": "Gets or sets EnrollmentTime",
          "type": "string"
        },
        "Family": {
          "description": "Gets or sets Family",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily"
        },
        "HostName": {
          "description": "Gets or sets HostName",
          "type": "string"
        },
        "IsAgentOnline": {
          "description": "Gets or sets IsAgentOnline",
          "type": "boolean"
        },
        "CustomAttributes": {
          "description": "Gets or sets CustomAttributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceCustomAttribute"
          }
        },
        "MACAddress": {
          "description": "Gets or sets MACAddress",
          "type": "string"
        },
        "BluetoothMAC": {
          "description": "Gets or sets BluetoothMac Address",
          "type": "string"
        },
        "WifiMAC": {
          "description": "Gets or sets WifiMACAddress",
          "type": "string"
        },
        "Manufacturer": {
          "description": "Gets or sets Manufacturer",
          "type": "string"
        },
        "Mode": {
          "description": "Gets or sets Mode",
          "enum": [
            "Active",
            "Disabled",
            "UnenrollPendingUser",
            "UnenrollPendingAdmin",
            "UnenrolledByUser",
            "UnenrolledByAdmin"
          ],
          "type": "string",
          "x-enumType": "DeviceMode"
        },
        "Model": {
          "description": "Gets or sets Model",
          "type": "string"
        },
        "OSVersion": {
          "description": "Gets or sets OSVersion",
          "type": "string"
        },
        "Path": {
          "description": "Gets or sets Path",
          "type": "string"
        },
        "Platform": {
          "description": "Gets or sets Platform",
          "enum": [
            "Unknown",
            "CESimulator",
            "DOS",
            "WindowsCE",
            "HPCPro",
            "HPC2000",
            "PocketPC",
            "WindowsMobile",
            "Smartphone",
            "WindowsCEDotNet",
            "Windows",
            "Windows95",
            "Windows98",
            "WindowsME",
            "WindowsNT351",
            "WindowsNT40DomainController",
            "WindowsNT40Server",
            "WindowsNT40Workstation",
            "Windows2000DomainController",
            "Windows2000Server",
            "Windows2000Professional",
            "WindowsXPProfessional",
            "WindowsXPHome",
            "Windows2003Server",
            "WindowsVista",
            "WindowsVista64",
            "Windows2008Server",
            "Windows2008Server64",
            "WindowsSeven",
            "WindowsSeven64",
            "Windows2008ServerR2",
            "Windows2008ServerR264",
            "WindowsEight",
            "WindowsEight64",
            "Windows2012Server",
            "Windows2012Server64",
            "WindowsEightOne",
            "WindowsEightOne64",
            "Windows2012ServerR2",
            "Windows2012ServerR264",
            "WindowsTen",
            "WindowsTen64",
            "Windows2016Server",
            "Windows2016Server64",
            "HHPImager",
            "Android",
            "iOS",
            "macOS",
            "AndroidPlus",
            "ScannerPlatformGeneral",
            "WindowsSeven32BitDeviceManager",
            "WindowsSeven64BitDeviceManager",
            "WindowsXPDeviceManager",
            "WEPosDeviceManager",
            "PosReadyDeviceManager",
            "RemHub",
            "RemScanner",
            "RemBiopticScanner",
            "RemMaximal",
            "WindowsPhone",
            "WindowsPhone81",
            "WindowsPhone10",
            "WindowsDesktop10",
            "WindowsPhone10RS1",
            "WindowsDesktop10RS1",
            "WindowsHolographic10",
            "WindowsHolographic10RS1",
            "ZebraPrinter",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DevicePlatform"
        },
        "ServerName": {
          "description": "Gets or sets ServerName",
          "type": "string"
        }
      }
    },
    "ComplianceItem": {
      "description": "Dictates a single compliance item related to a device's being in compliance.",
      "type": "object",
      "properties": {
        "ComplianceType": {
          "description": "Compliance type (rooted, deviceadmin, wiped, disabled, unenrolled, etc.)",
          "enum": [
            "None",
            "IsSecured",
            "IsDeviceAdmin",
            "NotWiped",
            "IsEnabled",
            "IsEnrolled"
          ],
          "type": "string",
          "x-enumType": "ComplianceItemType"
        },
        "ComplianceValue": {
          "description": "Determines if Compliance type is true/false or null.",
          "type": "boolean"
        }
      }
    },
    "DeviceCustomAttribute": {
      "description": "Represents a Label assigned to Device",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets name of the label. Must be unique.",
          "type": "string"
        },
        "Value": {
          "description": "Gets or sets value of the label",
          "type": "string"
        },
        "DataType": {
          "description": "Gets or sets custom attribute data type",
          "enum": [
            "Boolean",
            "Numeric",
            "Text",
            "DateTime",
            "Enumerator",
            "Date"
          ],
          "type": "string",
          "x-enumType": "CustomAttributeDataType"
        }
      }
    },
    "AggregationRequest": {
      "description": "Represents device summary aggregation request",
      "required": [
        "DevicePropertyName"
      ],
      "type": "object",
      "properties": {
        "DevicePropertyName": {
          "description": "The device property name",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "AggregationName": {
          "description": "Gets the aggregation name (optional)",
          "type": "string"
        },
        "DateRanges": {
          "description": "The date ranges for aggregation. Cannot be used with numeric ranges at the same time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateRange"
          }
        },
        "NumericRanges": {
          "description": "The numeric ranges for aggregation. Cannot be used with date ranges at the same time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumericRange"
          }
        },
        "Size": {
          "format": "int32",
          "description": "Determines how many top entries to return. Ignored when ranges are used.",
          "type": "integer"
        },
        "ChildAggregations": {
          "description": "The child aggregations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationRequest"
          }
        }
      }
    },
    "DateRange": {
      "description": "The date range",
      "type": "object",
      "properties": {
        "From": {
          "format": "date-time",
          "description": "The lower end of the date range",
          "type": "string"
        },
        "To": {
          "format": "date-time",
          "description": "The upper end of the date range",
          "type": "string"
        }
      }
    },
    "NumericRange": {
      "description": "The numeric range",
      "type": "object",
      "properties": {
        "From": {
          "format": "double",
          "description": "The lower end of the numeric range",
          "type": "number"
        },
        "To": {
          "format": "double",
          "description": "The upper end of the numeric range",
          "type": "number"
        }
      }
    },
    "AggregationResult": {
      "description": "The aggregation result",
      "type": "object",
      "properties": {
        "AggregationName": {
          "description": "The aggregation name",
          "type": "string"
        },
        "OtherCount": {
          "format": "int32",
          "description": "The number of records that don't belong to any buckets",
          "type": "integer"
        },
        "Buckets": {
          "description": "The aggregation buckets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bucket"
          }
        }
      }
    },
    "Bucket": {
      "description": "The aggregation bucket",
      "type": "object",
      "properties": {
        "Count": {
          "format": "int32",
          "description": "The number of records in a bucket",
          "type": "integer"
        },
        "Value": {
          "description": "The value associated with the bucket. Not used when ranges are applied.",
          "type": "string"
        },
        "DateRange": {
          "$ref": "#/definitions/DateRange",
          "description": "The date range of the bucket"
        },
        "NumericRange": {
          "$ref": "#/definitions/NumericRange",
          "description": "The numeric range of the bucket"
        },
        "ChildAggregationResults": {
          "description": "The child aggregation results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResult"
          }
        }
      }
    },
    "CollectedDataItem": {
      "description": "Describes a single data point collected from a device.",
      "type": "object",
      "properties": {
        "DeviceId": {
          "description": "The ID of the device the collected data is applicable to",
          "type": "string"
        },
        "Kind": {
          "description": "Kind of collected data",
          "enum": [
            "Integer",
            "Location",
            "NetworkTraffic",
            "String",
            "CallLog",
            "Float"
          ],
          "type": "string",
          "readOnly": true,
          "x-enumType": "CollectedDataKind"
        },
        "Timestamp": {
          "format": "date-time",
          "description": "Specifies the date and time when the data was collected",
          "type": "string"
        },
        "StatTypeId": {
          "description": "Name of the Collected Data Item",
          "type": "string"
        }
      }
    },
    "InstalledApplication": {
      "description": "Contains information for an installed application for a device",
      "type": "object",
      "properties": {
        "DeviceId": {
          "description": "Device Id",
          "type": "string"
        },
        "ApplicationId": {
          "description": "Application Id",
          "type": "string"
        },
        "Name": {
          "description": "Name of installed application",
          "type": "string"
        },
        "Version": {
          "description": "Gets or sets the program's version number.",
          "type": "string"
        },
        "ShortVersion": {
          "description": "Gets or sets the program's short version number. Available in iOS 5.0 and later.",
          "type": "string"
        },
        "SizeInBytes": {
          "format": "int64",
          "description": "Gets or sets the size of the program image.",
          "type": "integer"
        },
        "DataSizeInBytes": {
          "format": "int64",
          "description": "Gets or sets the size of the program's data.",
          "type": "integer"
        },
        "Status": {
          "description": "Gets or sets the installed program status.",
          "enum": [
            "Unknown",
            "Installed",
            "Failed",
            "Managed",
            "NeedsRedemption",
            "Redeeming",
            "Prompting",
            "Installing",
            "ManagedButUninstalled",
            "UserInstalledApp",
            "UserRejected",
            "PendingUninstallation",
            "Uninstalled",
            "Queued",
            "PromptingForUpdate",
            "UpdateRejected",
            "QueuedForUpdate",
            "PromptingForManagement",
            "Updating",
            "PromptingForLogin",
            "Provisioning",
            "Provisioned",
            "Unprovisioned",
            "Staged",
            "ManagementRejected",
            "RetryingInstallation"
          ],
          "type": "string",
          "x-enumType": "InstalledApplicationStatus"
        },
        "LicenseInfo": {
          "$ref": "#/definitions/VppToken",
          "description": "Gets or sets the license info that the app."
        },
        "CanChangeManagementState": {
          "description": "Gets or sets weather the installed program can be set to managed.\r\n            <remarks>Apps can be managed using App Catalog rule </remarks>",
          "type": "boolean"
        },
        "InstalledOn": {
          "format": "date-time",
          "description": "Date app was installed on the device",
          "type": "string"
        },
        "Build": {
          "description": "Gets or sets the program's build (short version) number. Available in iOS 5.0 and later.s",
          "type": "string"
        },
        "ExternalVersionIdentifier": {
          "format": "int32",
          "description": "Gets or sets The applicationʼs external version ID",
          "type": "integer"
        },
        "AppStoreVendable": {
          "description": "Gets or sets a value whether the app came from the store and can participate in store features\r\n            If true, the app came from the store and can participate in store features.\r\n            However, for device-based VPP apps, this will always be false.",
          "type": "boolean"
        },
        "DeviceBasedVpp": {
          "description": "Gets or sets a value whether the app is distributed to the device without requiring an Apple ID\r\n            If true, the app is distributed to the device without requiring an Apple ID",
          "type": "boolean"
        },
        "BetaApp": {
          "description": "Gets or sets a value whether the app is part of the Beta program\r\n            If true, the app is part of the Beta program",
          "type": "boolean"
        },
        "AdHocCodeSigned": {
          "description": "Gets or sets a value whether the app is ad-hoc code is signed\r\n            If true, the app is ad-hoc code signed",
          "type": "boolean"
        },
        "HasUpdateAvailable": {
          "description": "Gets or sets a value whether the app has an update available\r\n            If true, the app has an update available. This key will only be\r\n            present for App Store apps. On macOS, this key will only be\r\n            present for VPP apps",
          "type": "boolean"
        },
        "IsRedemptionCodeUsed": {
          "description": "Gets or sets the redemption code that the app.",
          "type": "boolean"
        }
      }
    },
    "VppToken": {
      "description": "VppToken information for an installed application",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Vpp Account Name",
          "type": "string"
        },
        "Id": {
          "description": "Vpp Account Id",
          "type": "string"
        },
        "IsRevocable": {
          "description": "Gets or sets a value indicating whether or not the license is revokable.",
          "type": "boolean"
        },
        "AssignmentType": {
          "description": "Gets or sets the assignment type.",
          "enum": [
            "AppleIdBased",
            "DeviceBased"
          ],
          "type": "string",
          "x-enumType": "VppTokenAssignmentType"
        }
      }
    },
    "ProvisioningProfile": {
      "description": "Contains information for an provision profile for a device",
      "type": "object",
      "properties": {
        "DeviceId": {
          "description": "Device Id",
          "type": "string"
        },
        "ApplicationId": {
          "description": "Application Id",
          "type": "string"
        },
        "ApplicationName": {
          "description": "Name of installed application",
          "type": "string"
        },
        "Status": {
          "description": "Gets or sets the installed program status.",
          "enum": [
            "Unknown",
            "NotExpired",
            "Expired",
            "Expiring"
          ],
          "type": "string",
          "x-enumType": "ProvisioningProfileStatus"
        },
        "ProfileName": {
          "description": "Name of provisioning profile",
          "type": "string"
        },
        "ExpirationDate": {
          "format": "date-time",
          "description": "Gets or sets the expiration date.",
          "type": "string"
        }
      }
    },
    "InstalledApplicationAction": {
      "description": "Installed application action",
      "type": "object",
      "properties": {
        "ActionKind": {
          "description": "The action type to be executed",
          "enum": [
            "RemoveProgram",
            "WipeProgramData",
            "SetAsManagedApplication",
            "UpdateProgram",
            "RetryInstallation"
          ],
          "type": "string",
          "x-enumType": "InstalledApplicationActionKind"
        }
      }
    },
    "DeviceKindActionInfo": {
      "description": "Request entity to check for device action compatibility",
      "required": [
        "DesiredAction",
        "DeviceIds"
      ],
      "type": "object",
      "properties": {
        "DesiredAction": {
          "description": "The action to check compatibility for",
          "enum": [
            "CheckIn",
            "Wipe",
            "Lock",
            "Unenroll",
            "SendMessage",
            "Locate",
            "SendScript",
            "Delete",
            "Disable",
            "Enable",
            "Rename",
            "SetPasscode",
            "AppleSoftwareUpdateScan",
            "AppleSoftwareUpdateSchedule",
            "AppleSoftwareUpdateRefreshStatus",
            "SetDeviceName",
            "ResetPasscode",
            "AllowSotiSurf",
            "BlockSotiSurf",
            "ClearRestrictions",
            "BypassActivationLock",
            "SoftReset",
            "RemoteRing",
            "TurnOffSuspend",
            "StartTracking",
            "StopTracking",
            "ClearSotiSurfCache",
            "BlockSotiHub",
            "AllowSotiHub",
            "ClearSotiHubCache",
            "DisablePasscodeLock",
            "ScanForViruses",
            "UpdateVirusDefinitions",
            "SendTestPage",
            "FactoryReset",
            "EnableWorkProfile",
            "DisableWorkProfile",
            "SendSmsMessage",
            "SetWallpaper",
            "ResetUserBinding",
            "EnableLostMode",
            "DisableLostMode",
            "BlockExchangeAccess",
            "AllowExchangeAccess",
            "EnableAgentUpgrade",
            "DisableAgentUpgrade",
            "MigrateToELMAgent",
            "UpgradeAgentNow",
            "SyncFilesNow",
            "SendScriptViaSms",
            "EnrollInEFOTA",
            "LinuxSoftwareUpdateSchedule",
            "UpgradeFirmware",
            "UpdateManagementProfile",
            "SendScriptViaPns",
            "ResetContainerPasscode",
            "UpgradeAgent",
            "UpdateLicense",
            "PlaySound",
            "LinuxSoftwareUpdateScan",
            "SetFirmwarePassword",
            "UnlockUserAccount",
            "MigrateToAndroidEnterprise",
            "SharedDeviceLogout",
            "DeleteUser",
            "AdsInstallPlugIns",
            "SharedDeviceTroubleshoot",
            "MoveDevice",
            "ResetAccount",
            "ResetExchangeAccess",
            "AppFeedbackUpdate",
            "RefreshCellularPlans",
            "UpgradeFirmwareZebra",
            "EnableAdminMode",
            "DisableAdminMode",
            "EnableKioskMode",
            "DisableKioskMode"
          ],
          "type": "string",
          "x-enumType": "DeviceAction",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "DeviceIds": {
          "description": "The devices to check compatibility against",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "DeviceActionCompatibilityReport": {
      "description": "Response object to report compatibility statistics",
      "type": "object",
      "properties": {
        "Incompatible": {
          "description": "List of device kinds that are not compatible with the specified action but were in the request",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceActionIncompatibilityItem"
          }
        },
        "ActionPermissionDenied": {
          "description": "List of devices, grouped by kind, that the user does not have permission to perform the action on, but were in the request",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CompatibleAccessibleDevices": {
          "description": "List of the devices id for which user has access to perform requested action. This list includes only devices that support the action.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TotalIncompatibleOrNotPermitted": {
          "format": "int32",
          "description": "The total count of all devices that are either not compatible or for which the user does not have suitable permissions",
          "type": "integer"
        }
      }
    },
    "DeviceActionIncompatibilityItem": {
      "description": "Individual report item that details the number of incompatible devices, their identifiers,\r\n            and the reason they are not compatible",
      "type": "object",
      "properties": {
        "Count": {
          "format": "int32",
          "description": "The number of incompatible devices",
          "type": "integer",
          "readOnly": true
        },
        "Reason": {
          "description": "The detailed reason why these devices are not compatible with the action",
          "type": "string"
        },
        "Identifiers": {
          "description": "The identifiers of all devices that are not compatible for the specified reason",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ErrorCode": {
          "format": "int32",
          "description": "The error code related to the failure reason",
          "type": "integer"
        }
      }
    },
    "DeviceKindActionContextInfo": {
      "description": "Request used to obtain compatibility information including the current\r\n            state of the device action.",
      "required": [
        "DesiredAction",
        "DeviceIds",
        "ActionState"
      ],
      "type": "object",
      "properties": {
        "DesiredAction": {
          "description": "The action to check compatibility for",
          "enum": [
            "CheckIn",
            "Wipe",
            "Lock",
            "Unenroll",
            "SendMessage",
            "Locate",
            "SendScript",
            "Delete",
            "Disable",
            "Enable",
            "Rename",
            "SetPasscode",
            "AppleSoftwareUpdateScan",
            "AppleSoftwareUpdateSchedule",
            "AppleSoftwareUpdateRefreshStatus",
            "SetDeviceName",
            "ResetPasscode",
            "AllowSotiSurf",
            "BlockSotiSurf",
            "ClearRestrictions",
            "BypassActivationLock",
            "SoftReset",
            "RemoteRing",
            "TurnOffSuspend",
            "StartTracking",
            "StopTracking",
            "ClearSotiSurfCache",
            "BlockSotiHub",
            "AllowSotiHub",
            "ClearSotiHubCache",
            "DisablePasscodeLock",
            "ScanForViruses",
            "UpdateVirusDefinitions",
            "SendTestPage",
            "FactoryReset",
            "EnableWorkProfile",
            "DisableWorkProfile",
            "SendSmsMessage",
            "SetWallpaper",
            "ResetUserBinding",
            "EnableLostMode",
            "DisableLostMode",
            "BlockExchangeAccess",
            "AllowExchangeAccess",
            "EnableAgentUpgrade",
            "DisableAgentUpgrade",
            "MigrateToELMAgent",
            "UpgradeAgentNow",
            "SyncFilesNow",
            "SendScriptViaSms",
            "EnrollInEFOTA",
            "LinuxSoftwareUpdateSchedule",
            "UpgradeFirmware",
            "UpdateManagementProfile",
            "SendScriptViaPns",
            "ResetContainerPasscode",
            "UpgradeAgent",
            "UpdateLicense",
            "PlaySound",
            "LinuxSoftwareUpdateScan",
            "SetFirmwarePassword",
            "UnlockUserAccount",
            "MigrateToAndroidEnterprise",
            "SharedDeviceLogout",
            "DeleteUser",
            "AdsInstallPlugIns",
            "SharedDeviceTroubleshoot",
            "MoveDevice",
            "ResetAccount",
            "ResetExchangeAccess",
            "AppFeedbackUpdate",
            "RefreshCellularPlans",
            "UpgradeFirmwareZebra",
            "EnableAdminMode",
            "DisableAdminMode",
            "EnableKioskMode",
            "DisableKioskMode"
          ],
          "type": "string",
          "x-enumType": "DeviceAction",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "DeviceIds": {
          "description": "The devices to check compatibility against",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "ActionState": {
          "$ref": "#/definitions/ActionBase",
          "description": "The current state of the device action to test compatibility against",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "BulkDeviceAction": {
      "description": "Contains array of devices ids plus the action to be performed on the device. Some actions allow extra parameters.",
      "required": [
        "ActionInfo"
      ],
      "type": "object",
      "properties": {
        "DeviceIds": {
          "description": "Array of devices ids to which action request will be applied",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ActionInfo": {
          "$ref": "#/definitions/ActionBase",
          "description": "Additional action info (if any)",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Filter": {
          "description": "Search filter for the device search",
          "type": "string"
        }
      }
    },
    "CsvProcessingOperationStatus": {
      "description": "Indicates the result of assigning device users via a csv file\r\n            upload",
      "type": "object",
      "properties": {
        "ProcessingFailures": {
          "description": "A collection of all device identifiers from the file for which\r\n            a failure was encountered during assignment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TotalRecordsProcessed": {
          "format": "int32",
          "description": "The total number of items that were processed from the uploaded\r\n            csv file, including failed",
          "type": "integer"
        }
      }
    },
    "DeviceProfile": {
      "description": "Profile information that should be available to device",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Gets or sets Profile reference Id",
          "type": "string"
        },
        "Name": {
          "description": "Gets or sets Profile name",
          "type": "string"
        },
        "VersionNumber": {
          "format": "int32",
          "description": "Gets or sets Profile version number",
          "type": "integer"
        },
        "Status": {
          "description": "Gets or sets Profile status on a device",
          "enum": [
            "Unknown",
            "InstallPending",
            "InstallFailed",
            "Installed",
            "InstalledPartially",
            "RemovalPending",
            "RemovalFailed",
            "NotInstalled",
            "AdministrativelyRemoved",
            "InstallationDisabled"
          ],
          "type": "string",
          "x-enumType": "DeviceProfileStatus"
        },
        "IsMandatory": {
          "description": "Gets or sets a value indicating whether this profile is mandatory",
          "type": "boolean"
        },
        "AssignmentDate": {
          "format": "date-time",
          "description": "Gets or sets Assignment Date",
          "type": "string"
        },
        "Configurations": {
          "description": "Gets or sets Profile payloads",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceConfiguration"
          }
        },
        "Packages": {
          "description": "The list of packages available with the profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DevicePackage"
          }
        },
        "DeviceFamilyQualification": {
          "description": "Gets or sets the device family qualification",
          "enum": [
            "Regular",
            "Knox",
            "AndroidWork",
            "Windows10Phone",
            "Windows10Desktop",
            "AppleIOS",
            "AppleMACUser",
            "AppleMACDevice",
            "WindowsHoloLens",
            "AndroidWorkProfileOwner",
            "AndroidCope"
          ],
          "type": "string",
          "x-enumType": "DeviceFamilyQualification"
        }
      }
    },
    "DeviceConfiguration": {
      "description": "Model for new DeviceConfiguration",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets Payload name",
          "type": "string"
        },
        "DeviceConfigurationType": {
          "$ref": "#/definitions/DeviceConfigurationType",
          "description": "Gets or sets Unique payload characteristics"
        },
        "Status": {
          "description": "Gets or sets payload's status",
          "enum": [
            "Unspecified",
            "InstallPending",
            "Delivered",
            "Installed",
            "InstallFailed",
            "InstallFailing",
            "Diagnosing",
            "Disabled",
            "Ignored",
            "UninstallPending",
            "Uninstalled",
            "UninstallFailed"
          ],
          "type": "string",
          "x-enumType": "DevicePayloadStatus"
        }
      }
    },
    "DevicePackage": {
      "description": "Profile package details",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets Package name",
          "type": "string"
        },
        "Version": {
          "description": "Gets or sets package version",
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "description": "Gets or sets package file size",
          "type": "integer"
        },
        "Status": {
          "description": "Gets or sets package status",
          "enum": [
            "Installed",
            "PendingInstall",
            "ForceInstall",
            "Downloaded",
            "Uninstalled",
            "PendingUninstall",
            "AnotherVersionAlreadyInstalled",
            "CircularDependency",
            "NotSupported",
            "PrescriptAbort",
            "MissingDependency",
            "UserAborted",
            "InvalidPackage",
            "IncompatiblePlatform",
            "InsufficientFreeSpace",
            "DuplicatedPackage",
            "LowerVersion",
            "FileIO",
            "CreateFile",
            "PackageFileNotFound",
            "CommunicationError",
            "FailedToInstall"
          ],
          "type": "string",
          "x-enumType": "DevicePackageStatus"
        },
        "ReferenceId": {
          "description": "Gets or sets package referenceId",
          "type": "string"
        }
      }
    },
    "DeviceConfigurationType": {
      "description": "Represents valid device configuration types",
      "type": "object",
      "properties": {
        "ConfigurationType": {
          "$ref": "#/definitions/DeviceConfigurationTypeInformation",
          "description": "Information about device configuration type"
        },
        "Subtype": {
          "$ref": "#/definitions/DeviceConfigurationTypeInformation",
          "description": "Information about device configuration subtype; used for multiaccount configurations"
        }
      }
    },
    "DeviceConfigurationTypeInformation": {
      "description": "Class to contain information related to device configurations",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of this configuration type",
          "type": "string"
        }
      }
    },
    "DevicePackageAndContainingProfile": {
      "description": "",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets Package name",
          "type": "string"
        },
        "Version": {
          "description": "Gets or sets package version",
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "description": "Gets or sets package file size",
          "type": "integer"
        },
        "InstallationOrder": {
          "format": "int32",
          "description": "The order that a package is installed on a device",
          "type": "integer"
        },
        "Status": {
          "description": "Gets or sets package status",
          "enum": [
            "Installed",
            "PendingInstall",
            "ForceInstall",
            "Downloaded",
            "Uninstalled",
            "PendingUninstall",
            "AnotherVersionAlreadyInstalled",
            "CircularDependency",
            "NotSupported",
            "PrescriptAbort",
            "MissingDependency",
            "UserAborted",
            "InvalidPackage",
            "IncompatiblePlatform",
            "InsufficientFreeSpace",
            "DuplicatedPackage",
            "LowerVersion",
            "FileIO",
            "CreateFile",
            "PackageFileNotFound",
            "CommunicationError",
            "FailedToInstall"
          ],
          "type": "string",
          "x-enumType": "DevicePackageStatus"
        },
        "ReferenceId": {
          "description": "Gets or sets package referenceId",
          "type": "string"
        },
        "ContainingProfileName": {
          "description": "The profile containing the package",
          "type": "string"
        }
      }
    },
    "DeviceRule": {
      "description": "Contains information about a rule associated with a device.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the rule.",
          "type": "string"
        },
        "RuleType": {
          "description": "The rule type",
          "enum": [
            "WindowsCEAddDevices",
            "FileSync",
            "WindowsCEDeviceRelocation",
            "DataCollection",
            "CommonAlert",
            "iOSAddDevices",
            "iOSApplicationCatalog",
            "AndroidAddDevices",
            "AndroidApplicationCatalog",
            "WindowsDesktopAddDevices",
            "WindowsDesktopDeviceRelocation",
            "AndroidSamsungAddDevices",
            "ScannersAddDevices",
            "TermsAndConditions",
            "TEM",
            "AndroidSamsungDeviceRelocation",
            "WindowsPhoneAddDevices",
            "WindowsPhoneApplicationCatalog",
            "WindowsPhoneDeviceRelocation",
            "PrinterAddDevices",
            "LinuxAddDevices",
            "LinuxDeviceRelocation",
            "ContentManagement"
          ],
          "type": "string",
          "x-enumType": "RuleType"
        },
        "IsEnabled": {
          "description": "Indicates whether the rule is enabled.",
          "type": "boolean"
        },
        "DeviceFamily": {
          "description": "Device family the rule is linked with.",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily"
        },
        "StartDate": {
          "format": "date-time",
          "description": "The time when the rule is active",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "The time when the rule is inactive",
          "type": "string"
        }
      }
    },
    "DeviceAppPolicy": {
      "description": "App Catalog Rule summary",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Reference Id",
          "type": "string"
        },
        "Name": {
          "description": "Rule Name",
          "type": "string"
        },
        "Status": {
          "description": "Status",
          "enum": [
            "Draft",
            "Assigned",
            "Disabled"
          ],
          "type": "string",
          "x-enumType": "DeviceAppCatalogRuleStatus"
        },
        "Family": {
          "description": "Rule Family",
          "enum": [
            "Android",
            "Apple",
            "Windows"
          ],
          "type": "string",
          "x-enumType": "DeviceAppCatalogRuleFamily"
        },
        "AssignedDate": {
          "format": "date-time",
          "description": "Assigned Date",
          "type": "string"
        },
        "AutoAssignDate": {
          "format": "date-time",
          "description": "Auto Assignment Date",
          "type": "string"
        },
        "DisabledDate": {
          "format": "date-time",
          "description": "Disabled Date",
          "type": "string"
        },
        "AppCount": {
          "format": "int32",
          "description": "Application Count",
          "type": "integer"
        }
      }
    },
    "DevicePackageAction": {
      "description": "Package Action",
      "type": "object",
      "properties": {
        "ActionKind": {
          "description": "Action type to be executed",
          "enum": [
            "ForceReinstall"
          ],
          "type": "string",
          "x-enumType": "DevicePackageActionKind"
        }
      }
    },
    "SupportContactInformation": {
      "description": "Support contact details for a given device or device group.",
      "type": "object",
      "properties": {
        "Email": {
          "description": "The email address of the specified device support contact",
          "type": "string"
        },
        "Phone": {
          "description": "The phone number for the device support contact",
          "type": "string"
        },
        "CompanyName": {
          "description": "The company name of the support contact",
          "type": "string"
        },
        "Address": {
          "description": "The physical address of the support contact",
          "type": "string"
        },
        "ServicesManaged": {
          "description": "The particular services this support contact manages",
          "type": "string"
        }
      }
    },
    "DeviceCertificate": {
      "description": "Device certificate",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Reference identifier",
          "type": "string",
          "readOnly": true
        },
        "SerialNumber": {
          "description": "The serial number.",
          "type": "string"
        },
        "SubjectName": {
          "description": "Subject name",
          "type": "string"
        },
        "Subject": {
          "description": "The certificate subject (full)",
          "type": "string"
        },
        "IssuerName": {
          "description": "The certificate issuer name",
          "type": "string"
        },
        "Issuer": {
          "description": "The certificate issuer (full)",
          "type": "string"
        },
        "NotBeforeDate": {
          "format": "date-time",
          "description": "Not before date.",
          "type": "string"
        },
        "NotAfterDate": {
          "format": "date-time",
          "description": "Not after date.",
          "type": "string"
        },
        "HasPrivateKey": {
          "description": "Value indicating whether the certificate has private key.",
          "type": "boolean"
        },
        "IsRevoked": {
          "description": "Value indicating whether the certificate is revoked.",
          "type": "boolean"
        },
        "WasRenewed": {
          "description": "Value indicating whether the certificate was renewed.",
          "type": "boolean"
        },
        "TemplateName": {
          "description": "Certificate template name",
          "type": "string"
        },
        "Usage": {
          "description": "Certificate usage",
          "enum": [
            "None",
            "Signing",
            "Encryption",
            "SigningAndEncryption"
          ],
          "type": "string",
          "x-enumType": "CertificateUsage"
        },
        "Status": {
          "description": "Certificate deployment status",
          "enum": [
            "Unknown",
            "Pushed",
            "Installed",
            "Deleted",
            "InstalledAndPreserved"
          ],
          "type": "string",
          "x-enumType": "CertificateDeploymentStatus"
        },
        "Thumbprint": {
          "description": "Gets or sets certificate thumbprint",
          "type": "string"
        },
        "CanRevoke": {
          "description": "If this certificate is revokable",
          "type": "boolean"
        }
      }
    },
    "DeviceCertificateAction": {
      "description": "Device certificate action",
      "type": "object",
      "properties": {
        "ActionKind": {
          "description": "The action type to be executed",
          "enum": [
            "Renew",
            "Revoke"
          ],
          "type": "string",
          "x-enumType": "DeviceCertificateActionKind"
        }
      }
    },
    "QuarantineItem": {
      "description": "Quarantine item",
      "type": "object",
      "properties": {
        "QuarantineItemType": {
          "description": "Type of the quarantine item.",
          "enum": [
            "Application",
            "File"
          ],
          "type": "string",
          "x-enumType": "QuarantineItemType"
        },
        "Name": {
          "description": "Name of the quarantine item",
          "type": "string"
        },
        "FileSize": {
          "format": "int32",
          "description": "File size, if applicable",
          "type": "integer"
        },
        "Checksum": {
          "description": "Checksum, if applicable",
          "type": "string"
        }
      }
    },
    "DeviceUser": {
      "description": "Device User entity.",
      "type": "object",
      "properties": {
        "UserName": {
          "description": "Gets or sets User Name.",
          "type": "string"
        },
        "FirstName": {
          "description": "Gets or sets First Name.",
          "type": "string"
        },
        "MiddleName": {
          "description": "Gets or sets Middle Name.",
          "type": "string"
        },
        "LastName": {
          "description": "Gets or sets Last Name.",
          "type": "string"
        },
        "DomainName": {
          "description": "Gets or sets Domain Name.",
          "type": "string"
        },
        "UPN": {
          "description": "Gets or sets UPN.",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "Gets or sets Phone Number.",
          "type": "string"
        },
        "Email": {
          "description": "Gets or sets Email.",
          "type": "string"
        },
        "CustomProperty1": {
          "description": "Gets or sets CustomProperty1.",
          "type": "string"
        },
        "CustomProperty2": {
          "description": "Gets or sets CustomProperty2.",
          "type": "string"
        },
        "CustomProperty3": {
          "description": "Gets or sets CustomProperty3.",
          "type": "string"
        },
        "Identifier": {
          "description": "Gets or sets unique SID.",
          "type": "string"
        }
      }
    },
    "DeviceAdvancedConfiguration": {
      "description": "Contains information for device advanced configurations",
      "type": "object",
      "properties": {
        "Configuration": {
          "description": "Name of the configuration currently assigned",
          "type": "string"
        },
        "Origin": {
          "description": "The origin where this configuration is assigned",
          "type": "string"
        },
        "LastUpdate": {
          "format": "date-time",
          "description": "Gets or sets the time this configuration was last updated.",
          "type": "string"
        },
        "ConfiguredBy": {
          "description": "If the value is inherited, this will be the name of the User",
          "type": "string"
        },
        "IsEditable": {
          "description": "If the value is true, the device configuration is editable.",
          "type": "boolean"
        }
      }
    },
    "DeviceHealthAttestationComplianceReport": {
      "description": "Windows Phone Device Health Attestation Report",
      "type": "object",
      "properties": {
        "ComplianceType": {
          "description": "Health Attestation Compliance Policy Compliance Type",
          "enum": [
            "Any",
            "All"
          ],
          "type": "string",
          "x-enumType": "ComplianceType"
        },
        "ComplianceStatus": {
          "description": "The compliance status of the Windows Modern device with MobiControl",
          "enum": [
            "None",
            "Pass",
            "Warning",
            "Fail"
          ],
          "type": "string",
          "x-enumType": "ComplianceStatus"
        },
        "ReportDate": {
          "format": "date-time",
          "description": "The last date a report was created",
          "type": "string"
        },
        "ReportProperties": {
          "description": "Properties of the health attestation report",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthReportProperty"
          }
        },
        "LastAttemptDate": {
          "format": "date-time",
          "description": "Last date a health attestation report was attempted",
          "type": "string"
        },
        "LastAttemptHealthAttestationStatus": {
          "description": "Status received when a report was requested last",
          "enum": [
            "Unknown",
            "PreparingRequest",
            "WaitingForResponse",
            "DataReady",
            "TpmNotReady",
            "TpmKnownProblem",
            "TpmNotCompatible",
            "OldReportReceived",
            "CertificateReceived",
            "ReportReceived",
            "ServerRequestFailed",
            "VerifyRequestNotAnswered",
            "HealthStatusNotDetected",
            "CachedNonceNotFound"
          ],
          "type": "string",
          "x-enumType": "HealthAttestationStatus"
        },
        "HealthAttestationComplianceStatus": {
          "description": "Health Attestation Compliance Status",
          "enum": [
            "None",
            "Pass",
            "Warning",
            "Fail"
          ],
          "type": "string",
          "x-enumType": "ComplianceStatus"
        },
        "IsHealthAttestationCompliancePolicyApplied": {
          "description": "Whether the compliance policy is applied to the device",
          "type": "boolean"
        }
      }
    },
    "HealthReportProperty": {
      "description": "Properties related to the final report returned",
      "type": "object",
      "properties": {
        "PropertyType": {
          "description": "Type of health property being reported on",
          "enum": [
            "Unknown",
            "Issued",
            "AikPresent",
            "ResetCount",
            "RestartCount",
            "DepPolicy",
            "BitLockerStatus",
            "BootManagerRevListVersion",
            "CodeIntegrityRevListVersion",
            "SecureBootEnabled",
            "BootDebuggingEnabled",
            "OsKernelDebuggingEnabled",
            "CodeIntegrityEnabled",
            "TestSigningEnabled",
            "SafeMode",
            "WinPreInstallationEnvironment",
            "ElamDriverLoaded",
            "VsmEnabled",
            "Pcr0",
            "CodeIntegrityPolicyHash",
            "SbcpPolicyHash",
            "SecureBootConfigurationHash",
            "BootRevListInfo",
            "OsRevListInfo",
            "BootAppSvn",
            "BootManagerSvn",
            "CIPolicy"
          ],
          "type": "string",
          "x-enumType": "HealthReportPropertyType"
        },
        "PropertyName": {
          "description": "Name of the health property being reported on",
          "type": "string"
        },
        "Value": {
          "description": "Value of the health property being reported on",
          "type": "string"
        },
        "ComplianceStatus": {
          "description": "Compliance status of the health property being reported on",
          "enum": [
            "None",
            "Pass",
            "Warning",
            "Fail"
          ],
          "type": "string",
          "x-enumType": "ComplianceStatus"
        },
        "Status": {
          "description": "Actual status of the health property",
          "enum": [
            "NotReported",
            "NotPresent",
            "Detected",
            "Disabled",
            "Enabled",
            "DoesNotMatch",
            "Overdue",
            "OutOfDate"
          ],
          "type": "string",
          "x-enumType": "HealthPropertyStatus"
        },
        "IsCompliancePolicyApplied": {
          "description": "Whether there is a compliance policy on device or not",
          "type": "boolean"
        }
      }
    },
    "TpmVersion": {
      "description": "Version of the TPM",
      "type": "object",
      "properties": {
        "TpmSpecVersion": {
          "description": "TPM spec version.",
          "type": "string"
        },
        "TpmSpecLevel": {
          "description": "TPM spec level.",
          "type": "string"
        },
        "TpmSpecRevision": {
          "description": "TPM spec revision.",
          "type": "string"
        }
      }
    },
    "DeviceADEInfo": {
      "description": "Information pertaining to Apple device DEP profile enrollment",
      "type": "object",
      "properties": {
        "ProfileName": {
          "description": "Automated Device Enrollment Profile name",
          "type": "string"
        },
        "AssetTag": {
          "description": "Automated Device Enrollment Profile asset tag",
          "type": "string"
        },
        "AssignDate": {
          "format": "date-time",
          "description": "Automated Device Enrollment Profile assignment date",
          "type": "string"
        },
        "AssignedBy": {
          "description": "Email/Username of person that assigned Automated Device Enrollment Profile",
          "type": "string"
        },
        "ProfileStatus": {
          "description": "Automated Device Enrollment Profile status",
          "enum": [
            "Unknown",
            "Empty",
            "Assigned",
            "Pushed",
            "Removed"
          ],
          "type": "string",
          "x-enumType": "ProfileStatus"
        },
        "ProfileAssignTime": {
          "format": "date-time",
          "description": "When Automated Device Enrollment Profile was assigned to device",
          "type": "string"
        },
        "ProfilePushTime": {
          "format": "date-time",
          "description": "When Automated Device Enrollment Profile was pushed to device",
          "type": "string"
        }
      }
    },
    "DeviceAppleVppInfo": {
      "description": "Returns information about the device's usage of App Store License accounts.",
      "type": "object",
      "properties": {
        "ItunesUserHash": {
          "description": "iTunes User Id Hash",
          "type": "string"
        },
        "MultipleDevicesHoldByUser": {
          "description": "Boolean value indicating whether the device user is holding multiple devices, \r\n            will be null when ItunesUserHash is null.",
          "type": "boolean"
        },
        "AvailableAccounts": {
          "description": "Collection of App Store License account names and user status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppleVppAccountInfo"
          }
        }
      }
    },
    "AppleVppAccountInfo": {
      "description": "Represents a class for device VPP account info",
      "type": "object",
      "properties": {
        "AccountName": {
          "description": "App Store License account name",
          "type": "string"
        },
        "UserStatus": {
          "description": "App Store License account user status",
          "enum": [
            "None",
            "Registered",
            "Associated",
            "Retired",
            "Deleted"
          ],
          "type": "string",
          "x-enumType": "AppleVppUserStatus"
        }
      }
    },
    "ContentFile": {
      "description": "Content Library File",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Friendly Name",
          "type": "string"
        },
        "Extension": {
          "description": "Gets or sets the extension.",
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "description": "File Size",
          "type": "integer"
        },
        "Version": {
          "description": "File Version",
          "type": "string"
        },
        "Status": {
          "description": "Content deployment status",
          "enum": [
            "Downloaded",
            "OnDemand",
            "Downloading",
            "Viewed",
            "NotUntil",
            "Expired",
            "Removed",
            "PendingRemove",
            "DownloadFailInsufficientStorage",
            "DownloadFail",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ContentStatus"
        }
      }
    },
    "GenerateUnlockCode": {
      "description": "Generate Unlock Code information for a windows CE device",
      "type": "object",
      "properties": {
        "UnlockCode": {
          "description": "Unlock Code",
          "type": "string"
        }
      }
    },
    "EncryptedFile": {
      "description": "Encrypted file",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Gets ot sets a reference Id for the encrypted file",
          "type": "string"
        }
      }
    },
    "SoftwareUpdates": {
      "description": "Represents a class for device Software Updates",
      "type": "object",
      "properties": {
        "AvailableUpdates": {
          "description": "Gets collection of device Available Updates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppleSoftwareUpdate"
          }
        },
        "LastAvailableScanTime": {
          "format": "date-time",
          "description": "Gets last Scan Time for available device software updates",
          "type": "string"
        },
        "DeviceId": {
          "description": "Gets collection of device Available Updates",
          "type": "string"
        }
      }
    },
    "AppleSoftwareUpdate": {
      "description": "Represents a class for device Apple Software Update",
      "type": "object",
      "properties": {
        "SoftwareVersion": {
          "$ref": "#/definitions/AppleSoftwareVersion",
          "description": "Gets Software Version value"
        },
        "UpdateStatus": {
          "description": "Gets Update Status value",
          "enum": [
            "Idle",
            "Downloading",
            "DownloadFailed",
            "DownloadRequiresComputer",
            "DownloadInsufficientSpace",
            "DownloadInsufficientPower",
            "DownloadInsufficientNetwork",
            "Installing",
            "InstallInsufficientSpace",
            "InstallInsufficientPower",
            "InstallInsufficientNetwork",
            "InstallPhoneCallInProgress",
            "InstallFailed"
          ],
          "type": "string",
          "x-enumType": "UpdateStatus"
        },
        "LastUpdateStatusTime": {
          "format": "date-time",
          "description": "Gets Last Update Status Time value",
          "type": "string"
        },
        "DownloadPercentComplete": {
          "format": "double",
          "description": "Gets or sets a value indicating Percentage of download that is complete. Floating point\r\n            number (0.0 to 1.0)",
          "type": "number"
        },
        "IsDownloaded": {
          "description": "Gets or sets a value indicating if the update is downloaded",
          "type": "boolean"
        }
      }
    },
    "AppleSoftwareVersion": {
      "description": "Represents a class Apple Software Version",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "description": "Gets or sets version Id value",
          "type": "integer"
        },
        "ProductName": {
          "description": "Gets or sets Product Name value",
          "type": "string"
        },
        "ProductKey": {
          "description": "Gets or sets Product Key value",
          "type": "string"
        },
        "SoftwareVersion": {
          "description": "Gets or sets Version value",
          "type": "string"
        },
        "Build": {
          "description": "Gets or sets Build value",
          "type": "string"
        },
        "DownloadSize": {
          "format": "int64",
          "description": "Gets or sets Download Size value",
          "type": "integer"
        },
        "InstallSize": {
          "format": "int64",
          "description": "Gets or sets Install Size value",
          "type": "integer"
        },
        "IsCritical": {
          "description": "Gets or sets a value indicating whether the update is critical",
          "type": "boolean"
        },
        "IsRestartRequired": {
          "description": "Gets or sets a value indicating whether the restart is required after update installation",
          "type": "boolean"
        },
        "IsAllowInstallLater": {
          "description": "Gets or sets a value indicating whether the update can be installed later",
          "type": "boolean"
        },
        "HumanReadableName": {
          "description": "Gets or sets humanReadableName",
          "type": "string"
        }
      }
    },
    "LinuxOSSoftwareUpdate": {
      "description": "Represents a class for Linux Device OS Software Update",
      "type": "object",
      "properties": {
        "AvailableOSVersion": {
          "description": "Gets Available OS Version for update",
          "type": "string"
        },
        "LastAvailableScanTime": {
          "format": "date-time",
          "description": "Gets last Scan Time for available OS update",
          "type": "string"
        }
      }
    },
    "DeviceCompliancePolicy": {
      "description": "Compliance policy status on a specific device",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Reference ID of this compliance policy",
          "type": "string"
        },
        "DeviceId": {
          "description": "Device Id",
          "type": "string"
        },
        "Name": {
          "description": "Name of this compliance policy",
          "type": "string"
        },
        "Status": {
          "description": "Status of the policy applied on the device",
          "enum": [
            "Pending",
            "NonCompliant",
            "Compliant"
          ],
          "type": "string",
          "x-enumType": "DeviceCompliancePolicyStatus"
        },
        "Description": {
          "description": "Description of this compliance policy",
          "type": "string"
        },
        "NonComplianceDate": {
          "format": "date-time",
          "description": "If Status = 'Non-compliant', the UTC date/time of when the device was first found to be non-compliant with this compliance policy",
          "type": "string"
        },
        "LastComplianceCheckDate": {
          "format": "date-time",
          "description": "The UTC date/time of the last time the compliance policy was evaluated for this device",
          "type": "string"
        }
      }
    },
    "ExecutedActionInfo": {
      "description": "Executable compliance action",
      "type": "object",
      "properties": {
        "CreateDate": {
          "format": "date-time",
          "description": "Created date",
          "type": "string"
        },
        "ActionType": {
          "description": "Executable action type",
          "enum": [
            "Unknown",
            "ExchangeBlockAccess",
            "ExchangeAllowAccess",
            "ExchangeDefaultAccess",
            "EmailNotification"
          ],
          "type": "string",
          "x-enumType": "ExecutableActionTypeId"
        },
        "Status": {
          "description": "Executable action status",
          "enum": [
            "Pending",
            "Success",
            "Failure",
            "Rejected"
          ],
          "type": "string",
          "x-enumType": "ExecutableActionStatus"
        },
        "UpdateDate": {
          "format": "date-time",
          "description": "Update time",
          "type": "string"
        },
        "ActionInfoDescriptor": {
          "description": "Action Info Descriptor",
          "enum": [
            "Na",
            "ExchangeServerName",
            "EmailRecipient"
          ],
          "type": "string",
          "x-enumType": "ComplianceActionInfoDescriptor"
        },
        "Details": {
          "description": "Executed action details",
          "type": "string"
        }
      }
    },
    "CurrentMetricsData": {
      "description": "Current Metrics Data",
      "type": "object",
      "properties": {
        "Timestamp": {
          "format": "date-time",
          "description": "Data and Time the Data Samples were taken",
          "type": "string"
        },
        "ServerMetricsData": {
          "description": "Collection of Server Metrics Data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServerMetricsData"
          }
        }
      }
    },
    "ServerMetricsData": {
      "description": "Server Metrics Data",
      "type": "object",
      "properties": {
        "ServerName": {
          "description": "Server Name",
          "type": "string"
        },
        "MetricsData": {
          "description": "Collection of Metrics Data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsData"
          }
        }
      }
    },
    "MetricsData": {
      "description": "Metrics Data",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Metrics Name",
          "type": "string"
        },
        "Value": {
          "format": "double",
          "description": "Metrics Data Value",
          "type": "number"
        },
        "Units": {
          "description": "Metrics Data Units",
          "type": "string"
        }
      }
    },
    "DirectoryEntry": {
      "description": "Directory entry details",
      "type": "object",
      "properties": {
        "Kind": {
          "description": "The directory entry kind",
          "enum": [
            "User",
            "Group"
          ],
          "type": "string",
          "x-enumType": "DirectoryEntryKind"
        },
        "Name": {
          "description": "The entry's name.",
          "type": "string"
        },
        "Server": {
          "description": "Server address",
          "type": "string"
        },
        "Sid": {
          "description": "Principal's security identifier.",
          "type": "string"
        },
        "Guid": {
          "description": "User/Group Guid.",
          "type": "string"
        }
      }
    },
    "DirectoryEntryResponse": {
      "description": "Directory entry response detail",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Directory reference id.",
          "type": "string"
        },
        "Name": {
          "description": "Directory reference name.",
          "type": "string"
        },
        "DirectoryKind": {
          "description": "Directory kind.",
          "enum": [
            "Undefined",
            "ActiveDirectory",
            "OpenDirectory",
            "Domino",
            "AzureActiveDirectory"
          ],
          "type": "string",
          "x-enumType": "ContextProviderType"
        },
        "Server": {
          "description": "Server address.",
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "description": "Gets or sets the port.",
          "type": "integer"
        }
      }
    },
    "LdapConnection": {
      "description": "Ldap connection data contract.",
      "required": [
        "Name",
        "Server"
      ],
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Gets or sets LdapConnection Guid ID.",
          "type": "string"
        },
        "Name": {
          "description": "Gets or sets Name.",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator",
              "errorMessage": "msg_requiredProperty"
            }
          ]
        },
        "Server": {
          "description": "Gets or sets Server.",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator",
              "errorMessage": "msg_requiredProperty"
            }
          ]
        },
        "Port": {
          "format": "int32",
          "description": "Gets or sets Port.",
          "type": "integer"
        },
        "EncryptionType": {
          "description": "Gets or sets EncryptionType.",
          "enum": [
            "None",
            "Ssl"
          ],
          "type": "string",
          "x-enumType": "EncryptionType"
        },
        "AuthenticationType": {
          "description": "Gets or sets AuthType.",
          "enum": [
            "Anonymous",
            "Basic",
            "Negotiate"
          ],
          "type": "string",
          "x-enumType": "AuthenticationType"
        },
        "AcceptUntrustedCertificate": {
          "description": "Gets or sets a value indicating whether accept untrusted cert.",
          "type": "boolean"
        },
        "UserName": {
          "description": "Gets or sets UserName.",
          "type": "string"
        },
        "UserPassword": {
          "description": "Gets or sets UserPassword.",
          "type": "string"
        },
        "RootContainer": {
          "description": "Gets or sets RootContainer.",
          "type": "string"
        },
        "ProviderType": {
          "description": "Gets or sets ProviderType.",
          "enum": [
            "Undefined",
            "ActiveDirectory",
            "OpenDirectory",
            "Domino",
            "AzureActiveDirectory"
          ],
          "type": "string",
          "x-enumType": "ContextProviderType"
        },
        "Schema": {
          "description": "Gets or sets Schema.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LdapAttribute"
          }
        },
        "CloudLinkName": {
          "description": "Gets or sets cloud link identifier",
          "type": "string"
        },
        "FollowReferrals": {
          "description": "Gets or sets a value indicating whether or not referrals should be followed.",
          "type": "boolean"
        },
        "FollowStaticReferrals": {
          "description": "Gets or sets a value indicating whether or not static referrals should be followed.",
          "type": "boolean"
        }
      }
    },
    "LdapAttribute": {
      "description": "Represents  a UI friendly LDAP additional attribute",
      "type": "object",
      "properties": {
        "AttributeName": {
          "description": "Gets or sets Attribute Name",
          "type": "string"
        },
        "AttributeValue": {
          "description": "Gets or sets Attribute Value",
          "type": "string"
        },
        "DisplayName": {
          "description": "Gets or sets Display Group",
          "type": "string"
        },
        "AttributeGroup": {
          "description": "Gets or sets Display Name",
          "type": "string"
        },
        "IsRequired": {
          "description": "Gets or sets a value indicating whether attribute value is required.",
          "type": "boolean"
        }
      }
    },
    "TestConnectionResponse": {
      "description": "Test Connection Result",
      "type": "object",
      "properties": {
        "ConnectionResult": {
          "description": "Indicates whether the connection is success or not",
          "type": "boolean"
        },
        "ErrorMessage": {
          "description": "Error Message if connection not succeeded",
          "type": "string"
        },
        "ErrorCode": {
          "format": "int32",
          "description": "Error Code if connection not succeeded",
          "type": "integer"
        }
      }
    },
    "EmailProfile": {
      "description": "The {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfile} is used for sending Email messages and\r\n                setting up automatic email schedules",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Message": {
          "description": "The default message that is inserted when sending an Email using this Profile",
          "type": "string"
        },
        "Name": {
          "description": "The name of the Email Profile",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "PortNumber": {
          "format": "int32",
          "description": "The target SMTP port",
          "type": "integer"
        },
        "Priority": {
          "format": "int32",
          "description": "The priority level assigned to Emails sent using this Profile",
          "type": "integer"
        },
        "Recipients": {
          "description": "A collection of all default {Soti.MobiControl.Contracts.PublicApi.Email.EmailRecipient} targets for this {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfile}",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailRecipient"
          }
        },
        "Schedules": {
          "description": "A collection of all {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} items that trigger an Email message via this\r\n                {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfile}",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailSchedule"
          }
        },
        "ScheduleTimeZoneId": {
          "description": "The time zone identifier that all {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} items use",
          "type": "string"
        },
        "SenderAddress": {
          "description": "The from: address used for Emails sent using this Profile",
          "type": "string"
        },
        "SenderName": {
          "description": "The name for the outgoing sender on Email messages sent using this Profile",
          "type": "string"
        },
        "SmtpHostName": {
          "description": "The hostname for the target SMTP server",
          "type": "string"
        },
        "Subject": {
          "description": "The default subject used for Email messages sent with this Profile",
          "type": "string"
        },
        "Timeout": {
          "format": "int32",
          "description": "The Email send timeout period (in seconds)",
          "type": "integer"
        },
        "UserId": {
          "description": "The user ID that is utilized when connecting to the target SMTP server",
          "type": "string"
        },
        "UseSSL": {
          "description": "Whether the connection to the target SMTP server is done using SSL",
          "type": "boolean"
        }
      }
    },
    "EmailRecipient": {
      "description": "The {Soti.MobiControl.Contracts.PublicApi.Email.EmailRecipient} is used to denote targets for the To, CC, and BCC fields\r\n            when sending an Email message using an {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfile}",
      "type": "object",
      "properties": {
        "EmailAddress": {
          "description": "The individual Email Address of this {Soti.MobiControl.Contracts.PublicApi.Email.EmailRecipient}",
          "type": "string"
        },
        "Name": {
          "description": "The name of this {Soti.MobiControl.Contracts.PublicApi.Email.EmailRecipient}",
          "type": "string"
        },
        "EmailType": {
          "description": "How this {Soti.MobiControl.Contracts.PublicApi.Email.EmailRecipient} receives a given email (To, CC, BCC)",
          "enum": [
            "Recipient",
            "CC",
            "Bcc"
          ],
          "type": "string",
          "x-enumType": "EmailRecipientType"
        },
        "Enabled": {
          "description": "Whether or not this {Soti.MobiControl.Contracts.PublicApi.Email.EmailRecipient} is currently enabled",
          "type": "boolean"
        }
      }
    },
    "EmailSchedule": {
      "description": "An {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} indicates the frequency\r\n            a scheduled Email is send through an attached {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfile}",
      "type": "object",
      "properties": {
        "ScheduleType": {
          "description": "Indicates the schedule that this {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} activates on",
          "enum": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "Daily",
            "Weekday",
            "Weekend"
          ],
          "type": "string",
          "x-enumType": "EmailScheduleType"
        },
        "StartTimeHours": {
          "format": "int32",
          "description": "The hour that this {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} activates",
          "type": "integer"
        },
        "StartTimeMinutes": {
          "format": "int32",
          "description": "The minutes past {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule.StartTimeHours} that this {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} activates",
          "type": "integer"
        },
        "EndTimeHours": {
          "format": "int32",
          "description": "The hours that this {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} deactivates",
          "type": "integer"
        },
        "EndTimeMinutes": {
          "format": "int32",
          "description": "The minutes past {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule.EndTimeHours} that this {Soti.MobiControl.Contracts.PublicApi.Email.EmailSchedule} deactivates",
          "type": "integer"
        }
      }
    },
    "UserUnenrollmentSettings": {
      "description": "These settings will be applicable only when device is unenrolled by device owner",
      "type": "object",
      "properties": {
        "DeleteDeviceOnUnenroll": {
          "description": "Gets or sets a value indicating whether device should be deleted from the system when user unenrolls device.",
          "type": "boolean"
        },
        "RevokeCertificatesOnUnenroll": {
          "description": "Gets or sets a value indicating whether certificates should be revoked from the system when user unenrolls device.",
          "type": "boolean"
        }
      }
    },
    "RuleInfo": {
      "description": "Enrollment Role that can be set from global setting",
      "type": "object",
      "properties": {
        "RuleId": {
          "description": "Rule Id",
          "type": "string"
        },
        "Name": {
          "description": "Rule Name",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Rule Type",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily"
        },
        "Default": {
          "description": "Get or set if this rule is the default rule",
          "type": "boolean"
        }
      }
    },
    "DefaultRuleSetting": {
      "description": "Default Rule Setting",
      "type": "object",
      "properties": {
        "EnrollmentUrl": {
          "description": "Enrollment Url",
          "type": "string"
        },
        "LinuxShellCommand": {
          "description": "Linux Shell Command string",
          "type": "string"
        }
      }
    },
    "ExternalServicesStatus": {
      "description": "Status of External Services",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Service Name",
          "type": "string"
        },
        "Status": {
          "description": "Status",
          "enum": [
            "Unreachable",
            "Online"
          ],
          "type": "string",
          "x-enumType": "ServiceStatus"
        }
      }
    },
    "GeofenceAdd": {
      "description": "Contract for adding a geofence",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the geofence name.",
          "type": "string"
        },
        "Vertices": {
          "description": "Gets or sets the collection of vertices in the geofence.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LatLong"
          }
        }
      }
    },
    "LatLong": {
      "description": "Represents a latitude/longitude coordinate.",
      "type": "object",
      "properties": {
        "Latitude": {
          "format": "double",
          "description": "Gets or sets the point's latitude.",
          "type": "number"
        },
        "Longitude": {
          "format": "double",
          "description": "Gets or sets the point's longitude.",
          "type": "number"
        }
      }
    },
    "Geofence": {
      "description": "A geofence model",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the geofence name.",
          "type": "string"
        },
        "Vertices": {
          "description": "Gets or sets the collection of vertices in the geofence.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LatLong"
          }
        }
      }
    },
    "GeofenceRename": {
      "description": "",
      "type": "object",
      "properties": {
        "Name": {
          "description": "",
          "type": "string"
        }
      }
    },
    "GeofenceSummary": {
      "description": "A geofence model",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the geofence name.",
          "type": "string"
        }
      }
    },
    "HealthInformation": {
      "description": "System health information",
      "type": "object",
      "properties": {
        "Status": {
          "description": "System health status",
          "enum": [
            "Pass",
            "Fail",
            "Warn"
          ],
          "type": "string",
          "x-enumType": "HealthStatus"
        },
        "Components": {
          "description": "Health summary by component",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentHealthSummary"
          }
        }
      }
    },
    "ComponentHealthSummary": {
      "description": "The component health summary",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The component name",
          "type": "string"
        },
        "Details": {
          "description": "The component health summary details",
          "type": "string"
        },
        "Status": {
          "description": "The component health status",
          "enum": [
            "Pass",
            "Fail",
            "Warn"
          ],
          "type": "string",
          "x-enumType": "HealthStatus"
        }
      }
    },
    "IdentityProvider": {
      "description": "Contract for a identity provider",
      "type": "object",
      "properties": {
        "Kind": {
          "description": "SOTI Identity Provider or External Identity Provider",
          "enum": [
            "SotiIdentityProvider",
            "ExternalIdentityProvider"
          ],
          "type": "string",
          "x-enumType": "IdentityProviderKind"
        },
        "Name": {
          "description": "Identity Provider Name",
          "type": "string"
        },
        "ReferenceId": {
          "description": "Identity Provider reference identifier.",
          "type": "string"
        }
      }
    },
    "IdentityProviderUser": {
      "description": "Contract for a Identity Provider User",
      "type": "object",
      "properties": {
        "SsoEntityReferenceId": {
          "description": "reference identifier for Identity Provider User",
          "type": "string"
        },
        "Email": {
          "description": "Email address",
          "type": "string"
        },
        "Identifier": {
          "description": "Identifier information",
          "type": "string"
        },
        "UserName": {
          "description": "User name information",
          "type": "string"
        },
        "Upn": {
          "description": "The UPN of the user",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "LastName": {
          "description": "The last name name of the user.",
          "type": "string"
        },
        "MiddleName": {
          "description": "The middle name of the user.",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "The phone number of the user.",
          "type": "string"
        },
        "CustomProperty1": {
          "description": "LDAP Custom attribute 1",
          "type": "string"
        },
        "CustomProperty2": {
          "description": "LDAP Custom attribute 2",
          "type": "string"
        },
        "CustomProperty3": {
          "description": "LDAP Custom attribute 3",
          "type": "string"
        }
      }
    },
    "ExternalIdentityProvider": {
      "description": "Represents metadata for external IdP",
      "type": "object",
      "properties": {
        "AttributeMappings": {
          "description": "User attribute mappings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeMapping"
          }
        },
        "Certificates": {
          "description": "Certs info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityProviderCertificate"
          }
        },
        "GroupListAttribute": {
          "description": "Group List Attribute",
          "type": "string"
        },
        "GroupListDelimiter": {
          "description": "Group List Delimiter",
          "type": "string"
        },
        "GroupLookupMethod": {
          "description": "SSO Group Lookup Method",
          "enum": [
            "Ldap",
            "GroupMapping"
          ],
          "type": "string",
          "x-enumType": "SsoGroupLookupMethod"
        },
        "LdapConnectionId": {
          "format": "int32",
          "description": "Gets or sets the LDAP connection identifier.",
          "type": "integer"
        },
        "LdapConnectionReferenceId": {
          "description": "Gets or sets the LDAP connection reference identifier",
          "type": "string"
        },
        "LogOffUrl": {
          "description": "Logoff Url",
          "type": "string"
        },
        "MetadataUrl": {
          "description": "Identity Provider metadata endpoint url",
          "type": "string"
        },
        "MetadataEntityId": {
          "description": "Metadata Url",
          "type": "string"
        },
        "SingleSignOnUrl": {
          "description": "Single SignOn Url",
          "type": "string"
        },
        "Kind": {
          "description": "SOTI Identity Provider or External Identity Provider",
          "enum": [
            "SotiIdentityProvider",
            "ExternalIdentityProvider"
          ],
          "type": "string",
          "x-enumType": "IdentityProviderKind"
        },
        "Name": {
          "description": "Identity Provider Name",
          "type": "string"
        },
        "ReferenceId": {
          "description": "Identity Provider reference identifier.",
          "type": "string"
        }
      }
    },
    "AttributeMapping": {
      "description": "Attribute Mapping",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the attribute",
          "type": "string"
        },
        "Value": {
          "description": "Value of the attribute",
          "type": "string"
        }
      }
    },
    "IdentityProviderCertificate": {
      "description": "Certificate information used for identity provider contract",
      "type": "object",
      "properties": {
        "Issuer": {
          "description": "",
          "type": "string"
        },
        "NotAfterDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "NotBeforeDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "Subject": {
          "description": "",
          "type": "string"
        },
        "Thumbprint": {
          "description": "",
          "type": "string"
        },
        "SerialNumber": {
          "description": "Serial Number",
          "type": "string"
        },
        "Base64Content": {
          "description": "Base 64 content",
          "type": "string"
        }
      }
    },
    "SotiIdentityProvider": {
      "description": "SOTI Identity Provider Configuration",
      "required": [
        "ClientId",
        "ClientSecret"
      ],
      "type": "object",
      "properties": {
        "BaseUri": {
          "description": "SOTI Identity Uri",
          "type": "string"
        },
        "ClientId": {
          "description": "SOTI Identity MobiControl Client ID.",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "ClientSecret": {
          "description": "Client Secret",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Kind": {
          "description": "SOTI Identity Provider or External Identity Provider",
          "enum": [
            "SotiIdentityProvider",
            "ExternalIdentityProvider"
          ],
          "type": "string",
          "x-enumType": "IdentityProviderKind"
        },
        "Name": {
          "description": "Identity Provider Name",
          "type": "string"
        },
        "ReferenceId": {
          "description": "Identity Provider reference identifier.",
          "type": "string"
        }
      }
    },
    "UpdateSotiIdentityProvider": {
      "description": "Update SOTI Identity Provider Configuration",
      "required": [
        "ClientSecret"
      ],
      "type": "object",
      "properties": {
        "ClientSecret": {
          "description": "New Client Secret acquired from SOTI Identity",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "LogEventDescriptor": {
      "description": "Descriptor of a single event in MobiControl system",
      "type": "object",
      "properties": {
        "EventId": {
          "format": "int32",
          "description": "Gets or sets the event identifier.",
          "type": "integer"
        },
        "EventName": {
          "description": "Gets or sets the name of the event.",
          "type": "string"
        },
        "EventAlertMessage": {
          "description": "Gets or sets the event alert message.",
          "type": "string"
        }
      }
    },
    "LogEntry": {
      "description": "Contains information for a device log entry",
      "type": "object",
      "properties": {
        "Timestamp": {
          "format": "date-time",
          "description": "Log entry timestamp",
          "type": "string"
        },
        "EventSeverity": {
          "description": "Log entry severity",
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "Message": {
          "description": "Log entry message",
          "type": "string"
        },
        "LogSource": {
          "description": "Log entry source type",
          "enum": [
            "Unknown",
            "User",
            "Device",
            "Server",
            "System"
          ],
          "type": "string",
          "x-enumType": "EventOriginator"
        },
        "SourceName": {
          "description": "Log entry source name",
          "type": "string"
        },
        "ServerName": {
          "description": "Log entry server name that handled the log",
          "type": "string"
        },
        "DeviceName": {
          "description": "Log entry device name",
          "type": "string"
        },
        "DeviceId": {
          "description": "The source identifier",
          "type": "string"
        },
        "EventId": {
          "format": "int32",
          "description": "Log entry event identifier",
          "type": "integer"
        },
        "EventCode": {
          "description": "Log entry event identifier",
          "type": "string"
        },
        "UserName": {
          "description": "Log entry user name",
          "type": "string"
        }
      }
    },
    "AvailableAgentLogTypes": {
      "description": "Container for DeviceKind to AgentLogTypes maps",
      "type": "object",
      "properties": {
        "AgentLogTypes": {
          "description": "Agent log types available for given device kind",
          "type": "array",
          "items": {
            "enum": [
              "Debug",
              "Install",
              "FileEncryption",
              "Security",
              "PreRebootSecurity",
              "Adb"
            ],
            "type": "string",
            "x-enumType": "AgentLogType"
          }
        }
      }
    },
    "MailServer": {
      "description": "Mail Server",
      "type": "object",
      "properties": {
        "Type": {
          "description": "Server Type",
          "enum": [
            "Exchange",
            "Other"
          ],
          "type": "string",
          "x-enumType": "MailServerType"
        },
        "ReferenceId": {
          "description": "Server Reference Id",
          "type": "string"
        },
        "Name": {
          "description": "Server Name",
          "type": "string"
        }
      }
    },
    "ExchangeServerConnectionSettings": {
      "description": "Exchange Server connection settings",
      "type": "object",
      "properties": {
        "PowerShellUrl": {
          "description": "Powershell URL",
          "type": "string"
        },
        "Mode": {
          "description": "Authentication Mode",
          "enum": [
            "Unknown",
            "Basic",
            "Kerberos",
            "Certificate"
          ],
          "type": "string",
          "x-enumType": "MailServerAuthenticationMode"
        },
        "Authentication": {
          "$ref": "#/definitions/ServerAuthentication",
          "description": "Authentication settings"
        },
        "CertificateAuthentication": {
          "$ref": "#/definitions/ServerCertificateAuthentication",
          "description": "Settings for certificate/modern authentication"
        }
      }
    },
    "ServerAuthentication": {
      "description": "Mail Server Authentication Settings",
      "type": "object",
      "properties": {
        "Username": {
          "description": "User Name",
          "type": "string"
        },
        "Password": {
          "description": "Password",
          "type": "string"
        }
      }
    },
    "ServerCertificateAuthentication": {
      "description": "Mail Server Certificate Authentication Settings",
      "type": "object",
      "properties": {
        "AzureDomainName": {
          "description": "AD name",
          "type": "string"
        },
        "AzureAppId": {
          "description": "Application (client) ID",
          "type": "string"
        },
        "AzureAuthEndpoint": {
          "description": "Azure AD endpoint to register application and acquire tokens",
          "type": "string"
        },
        "CertificateRefId": {
          "description": "Certificate reference identity for the otter world",
          "type": "string"
        },
        "PublicKeyExpiry": {
          "format": "date-time",
          "description": "Certificate expiry time, used only for response",
          "type": "string"
        }
      }
    },
    "ExchangeSigningCertificateInfo": {
      "description": "Signing Certificate Info",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Certificate Reference Id",
          "type": "string"
        },
        "ExpireTime": {
          "format": "date-time",
          "description": "Certificate Expire Time",
          "type": "string"
        }
      }
    },
    "Region": {
      "description": "Region of the global service",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Region name",
          "type": "string"
        },
        "PowerShellUri": {
          "description": "PS Connection URI",
          "type": "string"
        },
        "AzureAuthEndpoint": {
          "description": "Azure Endpoint URI",
          "type": "string"
        }
      }
    },
    "Package": {
      "description": "Package",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Gets or sets custom id of a package",
          "type": "string"
        },
        "Name": {
          "description": "Gets or sets the package name.",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Gets or sets package's target device family",
          "enum": [
            "All",
            "WindowsCE",
            "WindowsDesktop",
            "AndroidPlus",
            "WindowsPhone",
            "Printer",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "PackageDeviceFamily"
        },
        "CreatedDate": {
          "format": "date-time",
          "description": "Gets or sets created date",
          "type": "string"
        },
        "CreatedBy": {
          "description": "Gets or sets created by",
          "type": "string"
        },
        "TotalVersions": {
          "format": "int32",
          "description": "Gets or sets the total number of versions of a package",
          "type": "integer"
        },
        "LastVersion": {
          "$ref": "#/definitions/PackageVersion",
          "description": "Gets or sets the last version."
        }
      }
    },
    "PackageVersion": {
      "description": "Package Version",
      "type": "object",
      "properties": {
        "Version": {
          "description": "Gets or sets the package external version (visible to users).",
          "type": "string"
        },
        "BuildVersion": {
          "description": "Gets or sets the package internal version (generated by package studio).",
          "type": "string"
        },
        "OSVersion": {
          "description": "Gets or sets the OS version that the package targets.",
          "type": "string"
        },
        "Processor": {
          "description": "Gets or sets the processor that the package targets.",
          "type": "string"
        },
        "Vendor": {
          "description": "Gets or sets the vendor that created the package.",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets any comments associated with the package.",
          "type": "string"
        },
        "Size": {
          "format": "int32",
          "description": "Gets or sets size of the package.",
          "type": "integer"
        },
        "ExtraSize": {
          "format": "int32",
          "description": "Gets or sets extra size of the package if required. otherwise has to be 0.",
          "type": "integer"
        },
        "InstallPrompt": {
          "description": "Gets or sets a value indicating whether the device should show an installation prompt.",
          "type": "boolean"
        },
        "UploadDate": {
          "format": "date-time",
          "description": "Gets or sets date ou upload of the version",
          "type": "string"
        },
        "UploadedBy": {
          "description": "Gets or sets uploaded by",
          "type": "string"
        }
      }
    },
    "PackageGenerationJob": {
      "description": "Represents a Package Generation Job object",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Job reference identifier.",
          "type": "string"
        },
        "JobStatus": {
          "description": "The job status.",
          "type": "string"
        },
        "StartDateTime": {
          "format": "date-time",
          "description": "Job start date time.",
          "type": "string"
        },
        "EndDateTime": {
          "format": "date-time",
          "description": "Job end date time.",
          "type": "string"
        },
        "JobType": {
          "description": "Type of the job.",
          "type": "string"
        }
      }
    },
    "PackageProfileStatus": {
      "description": "Represents package information contract",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Gets custom id",
          "type": "string"
        },
        "Name": {
          "description": "Gets profile name",
          "type": "string"
        },
        "Description": {
          "description": "Gets profile description",
          "type": "string"
        },
        "AssignedDate": {
          "format": "date-time",
          "description": "Gets or sets the date when the active profile was assigned.",
          "type": "string"
        },
        "AssignedBy": {
          "description": "Gets or sets the user who assigned the active (assigned) profile.",
          "type": "string"
        },
        "Status": {
          "description": "Gets profile status",
          "enum": [
            "Draft",
            "Assigned",
            "Disabled",
            "Revoked",
            "Retired",
            "Scheduled",
            "Abandoned"
          ],
          "type": "string",
          "x-enumType": "ProfileVersionStatus"
        },
        "PackageVersion": {
          "description": "Gets or sets the associated PackageVersion.",
          "type": "string"
        }
      }
    },
    "PackageLogEntry": {
      "description": "Contains information for a package log entry",
      "type": "object",
      "properties": {
        "Timestamp": {
          "format": "date-time",
          "description": "Log entry timestamp",
          "type": "string"
        },
        "EventSeverity": {
          "description": "Log entry severity",
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "Message": {
          "description": "Log entry message",
          "type": "string"
        },
        "SourceName": {
          "description": "Log entry source name",
          "type": "string"
        }
      }
    },
    "PackageExecutionStatus": {
      "description": "Represents package execution status information contract",
      "type": "object",
      "properties": {
        "Version": {
          "description": "Version",
          "type": "string"
        },
        "Total": {
          "format": "int32",
          "description": "Total",
          "type": "integer"
        },
        "Installed": {
          "format": "int32",
          "description": "Installed",
          "type": "integer"
        },
        "Failed": {
          "format": "int32",
          "description": "Failed",
          "type": "integer"
        },
        "Pending": {
          "format": "int32",
          "description": "Pending",
          "type": "integer"
        }
      }
    },
    "LicenseInfo": {
      "description": "MobiControl License Information",
      "type": "object",
      "properties": {
        "ProductVersion": {
          "description": "MobiControl version",
          "type": "string"
        },
        "TotalLicensesPurchased": {
          "format": "int32",
          "description": "Number of device licenses purchased.",
          "type": "integer"
        },
        "TotalLicensesUsed": {
          "format": "int32",
          "description": "Number of device licenses used.",
          "type": "integer"
        },
        "ExpirationDate": {
          "format": "date-time",
          "description": "License expiration date",
          "type": "string"
        },
        "SupportType": {
          "description": "Support Type",
          "enum": [
            "Standard",
            "Premium",
            "Enterprise"
          ],
          "type": "string",
          "x-enumType": "SupportType"
        }
      }
    },
    "ProfileFilterParams": {
      "description": "Parameters used to search and filter profiles",
      "type": "object",
      "properties": {
        "NameContains": {
          "description": "Only return profiles whose name contains this value",
          "type": "string"
        },
        "WithStatuses": {
          "description": "Only return profiles that have statuses that match one of the\r\n            values in this list. Provided as a comma-separated list of\r\n            {Soti.MobiControl.Contracts.PublicApi.Profile.ProfileVersionStatus} values.",
          "type": "string"
        },
        "ForFamilies": {
          "description": "Only return profiles that are targeting one of the families\r\n            in this list. Provided as a comma-separated list of\r\n            {Soti.MobiControl.Enums.DeviceFamily} values.",
          "type": "string"
        },
        "HasDraft": {
          "description": "Only return profiles that have a current draft. When false,\r\n            only return profiles that do not have a draft. If null, then\r\n            do not take draft status into account",
          "type": "boolean"
        },
        "HasSchedule": {
          "description": "Only return profiles that currently have a schedule. When false,\r\n            only return profiles that do not have a schedule. If null, then\r\n            do not take schedule status into account",
          "type": "boolean"
        },
        "AutoInstallOnly": {
          "description": "Only return profiles that are automatically installed.\r\n            When false, this only returns profiles that are self-installed.\r\n            If null, then do not take install method into account.",
          "type": "boolean"
        }
      }
    },
    "ProfileSummary": {
      "description": "Profile Web Api Model",
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Gets custom id",
          "type": "string"
        },
        "Name": {
          "description": "Gets profile name",
          "type": "string"
        },
        "Description": {
          "description": "Gets profile description",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Gets profile device family",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily"
        },
        "DeviceFamilyQualification": {
          "description": "Gets profile device family qualification",
          "enum": [
            "Regular",
            "Knox",
            "AndroidWork",
            "Windows10Phone",
            "Windows10Desktop",
            "AppleIOS",
            "AppleMACUser",
            "AppleMACDevice",
            "WindowsHoloLens",
            "AndroidWorkProfileOwner",
            "AndroidCope"
          ],
          "type": "string",
          "x-enumType": "DeviceFamilyQualification"
        },
        "LastModified": {
          "format": "date-time",
          "description": "Gets Last modified time",
          "type": "string"
        },
        "LastModifiedBy": {
          "description": "Gets Last modified by information.",
          "type": "string"
        },
        "IsInstalledSilently": {
          "description": "Gets Last modified by information.",
          "type": "boolean"
        },
        "Status": {
          "description": "Gets profile status",
          "enum": [
            "Draft",
            "Assigned",
            "Disabled",
            "Revoked",
            "Retired",
            "Scheduled",
            "Abandoned"
          ],
          "type": "string",
          "x-enumType": "ProfileVersionStatus"
        },
        "HasDraftVersion": {
          "description": "Gets or sets a value indicating whether the profile has draft version.",
          "type": "boolean"
        },
        "Schedule": {
          "$ref": "#/definitions/ProfileSchedule",
          "description": "Gets or sets a value indicating whether the profile has scheduled events."
        },
        "ActiveVersionPayloadCount": {
          "format": "int32",
          "description": "Gets or sets a value indicating the number of payloads for the active version.",
          "type": "integer"
        },
        "ActiveVersionNumber": {
          "format": "int32",
          "description": "Gets or sets a value indicating the version number of the active version.",
          "type": "integer"
        },
        "DraftVersionNumber": {
          "format": "int32",
          "description": "Gets or sets the draft version number.",
          "type": "integer"
        },
        "ScheduledVersionNumber": {
          "format": "int32",
          "description": "Gets or sets the scheduled version number.",
          "type": "integer"
        },
        "ActiveVersionPackageCount": {
          "format": "int32",
          "description": "Gets or sets  a value indicating the number of packages for the active (assigned) version.",
          "type": "integer"
        },
        "CreatedDate": {
          "format": "date-time",
          "description": "Gets or sets the date when the profile was created.",
          "type": "string"
        },
        "CreatedBy": {
          "description": "Gets or sets the user who created the Profile.",
          "type": "string"
        },
        "AssignedDate": {
          "format": "date-time",
          "description": "Gets or sets the date when the active profile was assigned.",
          "type": "string"
        },
        "AssignedBy": {
          "description": "Gets or sets the user who assigned the active (assigned) profile.",
          "type": "string"
        },
        "HasError": {
          "description": "Gets or sets a value indicating whether this instance has error.",
          "type": "boolean"
        }
      }
    },
    "ProfileSchedule": {
      "description": "Scheduled events of profile assignment",
      "type": "object",
      "properties": {
        "HasScheduledEvents": {
          "description": "Gets or sets a value indicating whether the profile has scheduled assignments",
          "type": "boolean"
        },
        "AutoAssignDate": {
          "format": "date-time",
          "description": "Auto assign date",
          "type": "string"
        },
        "DisableDate": {
          "format": "date-time",
          "description": "Disabled date",
          "type": "string"
        },
        "RevokeDate": {
          "format": "date-time",
          "description": "Revoked date",
          "type": "string"
        },
        "InstallationDate": {
          "format": "date-time",
          "description": "Installation date",
          "type": "string"
        },
        "InstallationDateIsUtc": {
          "description": "Indicates whether installation date is in device time or UTC time",
          "type": "boolean"
        },
        "IsInstalledOnNextUpdate": {
          "description": "Delay to next update schedule",
          "type": "boolean"
        }
      }
    },
    "Profile": {
      "description": "Profile Base Web Api Model",
      "required": [
        "Name",
        "DeviceFamily"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Profile name",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Description": {
          "description": "Profile description",
          "type": "string"
        },
        "ReferenceId": {
          "description": "Profile reference id",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Device family profile applicable to",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "DeviceFamilyQualification": {
          "description": "Device family qualification",
          "enum": [
            "Regular",
            "Knox",
            "AndroidWork",
            "Windows10Phone",
            "Windows10Desktop",
            "AppleIOS",
            "AppleMACUser",
            "AppleMACDevice",
            "WindowsHoloLens",
            "AndroidWorkProfileOwner",
            "AndroidCope"
          ],
          "type": "string",
          "x-enumType": "DeviceFamilyQualification"
        },
        "Packages": {
          "description": "Packages to be included in the profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageInfo"
          }
        }
      }
    },
    "PackageInfo": {
      "description": "Represents package information contract",
      "required": [
        "ReferenceId",
        "Version"
      ],
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Package reference id",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Version": {
          "description": "Package version",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "PackageDependencies": {
          "description": "Package dependencies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageDependency"
          }
        },
        "Name": {
          "description": "Package Name",
          "type": "string"
        },
        "Size": {
          "format": "int32",
          "description": "Size of the package",
          "type": "integer"
        },
        "InstallationOrder": {
          "format": "int32",
          "description": "Installation Order",
          "type": "integer"
        },
        "ActivePackageVersions": {
          "description": "Gets or Sets active (not deleted) package versions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageVersion"
          }
        }
      }
    },
    "PackageDependency": {
      "description": "Represents package dependency contract",
      "required": [
        "ReferenceId"
      ],
      "type": "object",
      "properties": {
        "ReferenceId": {
          "description": "Package reference id",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Version": {
          "description": "Package version",
          "type": "string"
        },
        "Name": {
          "description": "Package name",
          "type": "string"
        }
      }
    },
    "ProfileAssignment": {
      "description": "Profile assignment details",
      "type": "object",
      "properties": {
        "AssignmentOptions": {
          "$ref": "#/definitions/ProfileAssignmentOptions",
          "description": "Gets or sets Assignment Options for the profile"
        },
        "TargetDeviceGroups": {
          "description": "The target device groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceGroup"
          }
        },
        "TargetDevices": {
          "description": "The target devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDevice"
          }
        },
        "DeviceFilterExpression": {
          "description": "Gets or sets device filter expression",
          "type": "string"
        },
        "UserGroupsFilterExpression": {
          "description": "Gets or sets user groups filter expression",
          "type": "string"
        }
      }
    },
    "ProfileAssignmentOptions": {
      "description": "Profile assignment options",
      "type": "object",
      "properties": {
        "IsInstalledSilently": {
          "description": "Indicates whether profile can be installed by device user on demand",
          "type": "boolean"
        },
        "AutoAssignDate": {
          "format": "date-time",
          "description": "The date when profile must be installed automatically",
          "type": "string"
        },
        "DisableDate": {
          "format": "date-time",
          "description": "The date when profile must be disabled automatically",
          "type": "string"
        },
        "RevokeDate": {
          "format": "date-time",
          "description": "The date when profile must be revoked automatically",
          "type": "string"
        },
        "IsInstalledOnNextUpdate": {
          "description": "Indicates whether this profile is installed immediately\r\n            or on next device update schedule",
          "type": "boolean"
        },
        "ReattemptIfFailed": {
          "description": "Indicates if previously failed installations of a profile should be re-tried",
          "type": "boolean"
        },
        "NetworkRestriction": {
          "description": "Network restriction",
          "enum": [
            "ActiveSync",
            "LAN",
            "WiFi",
            "Cellular",
            "Roaming",
            "AnyNetwork"
          ],
          "type": "string",
          "x-enumType": "NetworkRestriction"
        },
        "PackageAssignmentOptions": {
          "$ref": "#/definitions/PackageAssignmentOptions",
          "description": "Package assignment options"
        },
        "ProfileAssignmentSchedule": {
          "$ref": "#/definitions/ProfileAssignmentSchedule",
          "description": "Profile Assignment Schedule"
        },
        "BatteryStatusRestriction": {
          "format": "int32",
          "description": "Battery status restriction.",
          "type": "integer"
        }
      }
    },
    "PackageAssignmentOptions": {
      "description": "The package assignment options",
      "type": "object",
      "properties": {
        "InstallationSchedule": {
          "$ref": "#/definitions/InstallationSchedule",
          "description": "The installation schedule"
        },
        "PersistPackages": {
          "description": "Indicates whether the packages should be persisted",
          "type": "boolean"
        },
        "UninstallUponRevocation": {
          "description": "Indicates whether package should be uninstalled upon revocation",
          "type": "boolean"
        },
        "ForceReinstallation": {
          "description": "Indicates whether package should be reinstalled whenever the device connects to the server",
          "type": "boolean"
        }
      }
    },
    "ProfileAssignmentSchedule": {
      "description": "Profile Assignment Schedule",
      "type": "object",
      "properties": {
        "TimeWindows": {
          "description": "Time windows during which the package should be pushed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeWindow"
          }
        },
        "IsTimeWindowEnforced": {
          "description": "Is time window enforced",
          "type": "boolean"
        }
      }
    },
    "InstallationSchedule": {
      "description": "The installation schedule",
      "type": "object",
      "properties": {
        "DateTime": {
          "format": "date-time",
          "description": "The date and time",
          "type": "string"
        },
        "IsUtc": {
          "description": "Indicates whether date is UTC",
          "type": "boolean"
        },
        "TimeWindows": {
          "description": "Time windows during which the package should be installed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeWindow"
          }
        },
        "IsTimeWindowUtc": {
          "description": "Indicates whether the time windows are in UTC or device time",
          "type": "boolean"
        },
        "IsTimeWindowEnforced": {
          "description": "Indicates whether the time window restriction should be enforced or not",
          "type": "boolean"
        }
      }
    },
    "TimeWindow": {
      "description": "Time window during a day between which the package should be installed",
      "type": "object",
      "properties": {
        "DayOfWeek": {
          "description": "Indicates on which day of the week this time window is specified for",
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Daily",
            "Weekday",
            "Weekend"
          ],
          "type": "string",
          "x-enumType": "DayOfWeek"
        },
        "From": {
          "format": "date-time",
          "description": "The start time of the time window",
          "type": "string"
        },
        "To": {
          "format": "date-time",
          "description": "The end time of the time window",
          "type": "string"
        }
      }
    },
    "ProfileAssignmentInfo": {
      "description": "Profile Assignment Info",
      "type": "object",
      "properties": {
        "ProfileAssignmentStatus": {
          "description": "ProfileAssignmentStatus",
          "enum": [
            "NotAssigned",
            "Scheduled",
            "Active",
            "Superseded",
            "Abandoned",
            "Revoked"
          ],
          "type": "string",
          "x-enumType": "ProfileAssignmentStatus"
        },
        "CreatedByDate": {
          "format": "date-time",
          "description": "Created date",
          "type": "string"
        },
        "CreatedBy": {
          "description": "Created By",
          "type": "string"
        },
        "LastModifiedDate": {
          "format": "date-time",
          "description": "Last modified date",
          "type": "string"
        },
        "LastModifiedBy": {
          "description": "Last modified by",
          "type": "string"
        },
        "AssignmentOptions": {
          "$ref": "#/definitions/ProfileAssignmentOptions",
          "description": "Gets or sets Assignment Options for the profile"
        },
        "TargetDeviceGroups": {
          "description": "The target device groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDeviceGroup"
          }
        },
        "TargetDevices": {
          "description": "The target devices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetDevice"
          }
        },
        "DeviceFilterExpression": {
          "description": "Gets or sets device filter expression",
          "type": "string"
        },
        "UserGroupsFilterExpression": {
          "description": "Gets or sets user groups filter expression",
          "type": "string"
        }
      }
    },
    "ProfileLogEntry": {
      "description": "Contains information for a package log entry",
      "type": "object",
      "properties": {
        "Timestamp": {
          "format": "date-time",
          "description": "Log entry timestamp",
          "type": "string"
        },
        "EventSeverity": {
          "description": "Log entry severity",
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "Message": {
          "description": "Log entry message",
          "type": "string"
        },
        "SourceName": {
          "description": "Log entry source name",
          "type": "string"
        },
        "EventId": {
          "format": "int32",
          "description": "Log entry event identifier",
          "type": "integer"
        },
        "EventCode": {
          "description": "Log entry event identifier",
          "type": "string"
        },
        "EventOriginator": {
          "description": "Log entry source type",
          "enum": [
            "Unknown",
            "User",
            "Device",
            "Server",
            "System"
          ],
          "type": "string",
          "x-enumType": "EventOriginator"
        }
      }
    },
    "DeviceAssignmentSummary": {
      "description": "Device Status Summary",
      "type": "object",
      "properties": {
        "ProfileReferenceId": {
          "description": "Profile Reference Id",
          "type": "string"
        },
        "DeviceAssignmentStatusCounts": {
          "description": "Device Assignment Status Counts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceAssignmentStatusCount"
          }
        }
      }
    },
    "DeviceAssignmentStatusCount": {
      "description": "Device Assignment Status Count",
      "type": "object",
      "properties": {
        "VersionNumber": {
          "format": "int32",
          "description": "Version Number",
          "type": "integer"
        },
        "DeviceProfileStatus": {
          "description": "Device Profile Status",
          "enum": [
            "Unknown",
            "InstallPending",
            "InstallFailed",
            "Installed",
            "InstalledPartially",
            "RemovalPending",
            "RemovalFailed",
            "NotInstalled",
            "AdministrativelyRemoved",
            "InstallationDisabled"
          ],
          "type": "string",
          "x-enumType": "DeviceProfileStatus"
        },
        "DeviceCount": {
          "format": "int32",
          "description": "Device Count",
          "type": "integer"
        }
      }
    },
    "ProfileVersionInfo": {
      "description": "Profile Version Info",
      "type": "object",
      "properties": {
        "VersionNumber": {
          "format": "int32",
          "description": "Version Number",
          "type": "integer"
        },
        "ProfileVersionStatus": {
          "description": "Profile Version Status",
          "enum": [
            "Draft",
            "Assigned",
            "Disabled",
            "Revoked",
            "Retired",
            "Scheduled",
            "Abandoned"
          ],
          "type": "string",
          "x-enumType": "ProfileVersionStatus"
        },
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Description": {
          "description": "Description",
          "type": "string"
        },
        "DeviceFamily": {
          "description": "Device Family",
          "enum": [
            "WindowsCE",
            "Apple",
            "WindowsDesktop",
            "AndroidPlus",
            "Scanner",
            "WindowsPhone",
            "Blackberry",
            "Printer",
            "WindowsRuntime",
            "Linux"
          ],
          "type": "string",
          "x-enumType": "DeviceFamily"
        },
        "DeviceFamilyQualification": {
          "description": "Device Family Qualification",
          "enum": [
            "Regular",
            "Knox",
            "AndroidWork",
            "Windows10Phone",
            "Windows10Desktop",
            "AppleIOS",
            "AppleMACUser",
            "AppleMACDevice",
            "WindowsHoloLens",
            "AndroidWorkProfileOwner",
            "AndroidCope"
          ],
          "type": "string",
          "x-enumType": "DeviceFamilyQualification"
        },
        "IsInstalledSilently": {
          "description": "Is Installed Silently",
          "type": "boolean"
        },
        "PayloadsCount": {
          "format": "int32",
          "description": "Payloads Count",
          "type": "integer"
        },
        "PackagesCount": {
          "format": "int32",
          "description": "Packages Count",
          "type": "integer"
        },
        "CreatedByDate": {
          "format": "date-time",
          "description": "Created By Date",
          "type": "string"
        },
        "CreatedBy": {
          "description": "Created By",
          "type": "string"
        },
        "ModifiedByDate": {
          "format": "date-time",
          "description": "Modified By Date",
          "type": "string"
        },
        "ModifiedBy": {
          "description": "Modified By",
          "type": "string"
        },
        "AssignedByDate": {
          "format": "date-time",
          "description": "Assigned By Date",
          "type": "string"
        },
        "AssignedBy": {
          "description": "Assigned By",
          "type": "string"
        }
      }
    },
    "ProfileName": {
      "description": "Represents either the current name of a profile or the value to update the name\r\n            of a profile with",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name for the profile",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "ProfileDescription": {
      "description": "Parameter used when updating or getting the profile description",
      "type": "object",
      "properties": {
        "Description": {
          "description": "The profile's description or the new description to use",
          "type": "string"
        }
      }
    },
    "EmailDeviceReportParameters": {
      "description": "",
      "required": [
        "FileHeaderFields",
        "EmailProfileName"
      ],
      "type": "object",
      "properties": {
        "FileHeaderFields": {
          "description": "Field names to be included in the report, these will be used as the header of the attached CSV file",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "GroupPath": {
          "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value",
          "type": "string"
        },
        "IncludeSubgroups": {
          "description": "Whether to include children of the specified group in the search",
          "type": "boolean"
        },
        "SearchFilter": {
          "description": "The search filter string",
          "type": "string"
        },
        "EmailProfileName": {
          "description": "The name of the profile to use when sending the email",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "ToAddresses": {
          "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailDeviceReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "AppendAddresses": {
          "description": "If set to 'true' then append the given list of recipients from {Soti.MobiControl.Contracts.PublicApi.Email.EmailDeviceReportParameters.ToAddresses}, {Soti.MobiControl.Contracts.PublicApi.Email.EmailDeviceReportParameters.CcAddresses}, and {Soti.MobiControl.Contracts.PublicApi.Email.EmailDeviceReportParameters.BccAddresses} to those contained within the email profile; otherwise only send to the given addresses specified in {Soti.MobiControl.Contracts.PublicApi.Email.EmailDeviceReportParameters.ToAddresses}",
          "type": "boolean"
        },
        "CcAddresses": {
          "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailDeviceReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "BccAddresses": {
          "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailDeviceReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "EmailSubject": {
          "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used. Should the profile not have one, the email will be sent without a subject",
          "type": "string"
        },
        "EmailBody": {
          "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If no message is found in the profile, the email will be sent with an empty message",
          "type": "string"
        },
        "TimeOffset": {
          "format": "int32",
          "description": "The local time zone offset from UTC.",
          "type": "integer"
        }
      }
    },
    "EmailPackageReportParameters": {
      "description": "",
      "required": [
        "ReportHeaderFields",
        "EmailProfileName"
      ],
      "type": "object",
      "properties": {
        "ReportHeaderFields": {
          "description": "Field names to be included in the report, these will be used as the header of the attached CSV file",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "DeviceFamilies": {
          "description": "Report Filter Param, Only return packages that are targeting one of the families in this list. Provided as a comma-separated list of Device Family. To get list of All packages user needs to leave device families as blank or pass all device families as comma separated.",
          "type": "string"
        },
        "PackageName": {
          "description": "Report Filter Param, Package Name search string",
          "type": "string"
        },
        "EmailProfileName": {
          "description": "The name of the profile to use when sending the email",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "ToAddresses": {
          "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailPackageReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "AppendAddresses": {
          "description": "If set to 'true' then append the given list of recipients from {Soti.MobiControl.Contracts.PublicApi.Email.EmailPackageReportParameters.ToAddresses}, {Soti.MobiControl.Contracts.PublicApi.Email.EmailPackageReportParameters.CcAddresses}, and {Soti.MobiControl.Contracts.PublicApi.Email.EmailPackageReportParameters.BccAddresses} to those contained within the email profile; otherwise only send to the given addresses specified in {Soti.MobiControl.Contracts.PublicApi.Email.EmailPackageReportParameters.ToAddresses}",
          "type": "boolean"
        },
        "CcAddresses": {
          "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailPackageReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "BccAddresses": {
          "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailPackageReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "EmailSubject": {
          "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used. Should the profile not have one, the email will be sent without a subject",
          "type": "string"
        },
        "EmailBody": {
          "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If no message is found in the profile, the email will be sent with an empty message",
          "type": "string"
        },
        "TimeOffset": {
          "format": "int32",
          "description": "The local time zone offset from UTC.",
          "type": "integer"
        }
      }
    },
    "EmailProfileReportParameters": {
      "description": "Email Profile Report Parameters",
      "required": [
        "ReportHeaderFields",
        "EmailProfileName"
      ],
      "type": "object",
      "properties": {
        "ReportHeaderFields": {
          "description": "Field names to be included in the report, these will be used as the header of the attached CSV file",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Filters": {
          "$ref": "#/definitions/ProfileFilterParams",
          "description": "Report Filter Parameters."
        },
        "EmailProfileName": {
          "description": "The name of the profile to use when sending the email",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "ToAddresses": {
          "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfileReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "AppendAddresses": {
          "description": "If set to 'true' then append the given list of recipients from {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfileReportParameters.ToAddresses}, {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfileReportParameters.CcAddresses}, and {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfileReportParameters.BccAddresses} to those contained within the email profile; otherwise only send to the given addresses specified in {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfileReportParameters.ToAddresses}",
          "type": "boolean"
        },
        "CcAddresses": {
          "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfileReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "BccAddresses": {
          "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailProfileReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "EmailSubject": {
          "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used. Should the profile not have one, the email will be sent without a subject",
          "type": "string"
        },
        "EmailBody": {
          "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If no message is found in the profile, the email will be sent with an empty message",
          "type": "string"
        },
        "TimeOffset": {
          "format": "int32",
          "description": "The local time zone offset from UTC.",
          "type": "integer"
        }
      }
    },
    "EmailCompliancePoliciesReportParameters": {
      "description": "Compliance policies report filter parameters",
      "required": [
        "EmailProfileName",
        "ReportHeaderFields"
      ],
      "type": "object",
      "properties": {
        "AppendAddresses": {
          "description": "If set to 'true' then append the given list of recipients from {Soti.MobiControl.Contracts.PublicApi.Email.EmailCompliancePoliciesReportParameters.ToAddresses},\r\n                {Soti.MobiControl.Contracts.PublicApi.Email.EmailCompliancePoliciesReportParameters.CcAddresses}, and {Soti.MobiControl.Contracts.PublicApi.Email.EmailCompliancePoliciesReportParameters.BccAddresses} to those contained within the email profile; otherwise\r\n                only send to the given addresses specified in {Soti.MobiControl.Contracts.PublicApi.Email.EmailCompliancePoliciesReportParameters.ToAddresses}",
          "type": "boolean"
        },
        "BccAddresses": {
          "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in\r\n                the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailCompliancePoliciesReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "CcAddresses": {
          "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in\r\n                the email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailCompliancePoliciesReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        },
        "EmailBody": {
          "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If\r\n                no message is found in the profile, the email will be sent with an empty message",
          "type": "string"
        },
        "EmailProfileName": {
          "description": "The name of the profile to use when sending the email",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "EmailSubject": {
          "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used.\r\n                Should the profile not have one, the email will be sent without a subject",
          "type": "string"
        },
        "Families": {
          "description": "Device families by which it should be filtered",
          "type": "array",
          "items": {
            "enum": [
              "iOS",
              "Android",
              "Linux"
            ],
            "type": "string",
            "x-enumType": "ComplianceDeviceFamily"
          }
        },
        "IsAssigned": {
          "description": "Is Assigned policy filter",
          "type": "boolean"
        },
        "NameContains": {
          "description": "Name contains",
          "type": "string"
        },
        "ReportHeaderFields": {
          "description": "Field names to be included in the report, these will be used as the header of the attached CSV file",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Statuses": {
          "description": "Policy statuses",
          "type": "array",
          "items": {
            "enum": [
              "Disabled",
              "Active"
            ],
            "type": "string",
            "x-enumType": "CompliancePolicyStatus"
          }
        },
        "TimeOffset": {
          "format": "int32",
          "description": "The local time zone offset from UTC.",
          "type": "integer"
        },
        "ToAddresses": {
          "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the\r\n                email profile unless {Soti.MobiControl.Contracts.PublicApi.Email.EmailCompliancePoliciesReportParameters.AppendAddresses} is set to 'true'",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-validators": [
            {
              "type": "collectionValidator",
              "inner": {
                "type": "emailAddressValidator",
                "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$"
              }
            }
          ]
        }
      }
    },
    "AndroidFirmwareVersion": {
      "description": "Android Firmware Version",
      "type": "object",
      "properties": {
        "OsVersion": {
          "description": "Gets or sets OS Version",
          "type": "string"
        },
        "FirmwareType": {
          "description": "Gets or sets Firmware Type",
          "type": "string"
        },
        "ReleaseDate": {
          "format": "date-time",
          "description": "Gets or sets Release Date",
          "type": "string"
        },
        "FirmwareVersion": {
          "description": "Gets or sets Firmware Version",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets description",
          "type": "string"
        },
        "IsLatestVersion": {
          "description": "Gets or sets IsLatestVersion",
          "type": "boolean"
        }
      }
    },
    "AndroidFirmwareUpgradeRequest": {
      "description": "Android Firmware Upgrade",
      "type": "object",
      "properties": {
        "ClientType": {
          "description": "Gets or sets Android Firmware Upgrade Client Type",
          "enum": [
            "None",
            "Samsung",
            "Zebra"
          ],
          "type": "string",
          "x-enumType": "AndroidFirmwareUpgradeClientType"
        },
        "Filter": {
          "$ref": "#/definitions/AndroidFirmwareUpgradeFilterRequest",
          "description": "Gets or sets AndroidFirmwareUpgradeBaseFilter"
        },
        "TargetFirmwareVersion": {
          "$ref": "#/definitions/AndroidFirmwareVersion",
          "description": "Gets or sets Software Version value"
        },
        "DeliveryStartDate": {
          "format": "date-time",
          "description": "Gets or sets Delivery start date and time",
          "type": "string"
        },
        "DeliveryEndDate": {
          "format": "date-time",
          "description": "Gets or sets Delivery end date and time",
          "type": "string"
        },
        "DeviceIds": {
          "description": "Gets or sets Firmware Upgrade Status",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AndroidFirmwareUpgradeFilterRequest": {
      "description": "Android Firmware Upgrade Filter",
      "type": "object",
      "properties": {
        "ModelName": {
          "description": "Gets or sets Model name value",
          "type": "string"
        },
        "CarrierCode": {
          "description": "Gets or sets Carrier Code value",
          "type": "string"
        },
        "LicenseName": {
          "description": "Gets or sets License name value",
          "type": "string"
        },
        "GroupId": {
          "description": "Gets or sets Group Id value",
          "type": "string"
        },
        "CurrentFirmwareVersion": {
          "description": "Gets or sets Current Firmware Version value",
          "type": "string"
        }
      }
    },
    "SearchEngineStatus": {
      "description": "Elastic Search Synchronization Status",
      "type": "object",
      "properties": {
        "ServerName": {
          "description": "Server Name",
          "type": "string"
        },
        "Status": {
          "description": "Sync status",
          "enum": [
            "Running",
            "Completed",
            "Failed",
            "Terminated",
            "Aborted"
          ],
          "type": "string",
          "x-enumType": "SyncStatus"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Start Date/Time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "End Date/Time",
          "type": "string"
        },
        "TotalCount": {
          "format": "int32",
          "description": "Total count",
          "type": "integer"
        },
        "ProcessedCount": {
          "format": "int32",
          "description": "Processed count",
          "type": "integer"
        },
        "OutOfSyncCount": {
          "format": "int32",
          "description": "Out-of-sync count",
          "type": "integer"
        },
        "IndexIntegrity": {
          "format": "double",
          "description": "Synchronization percentage",
          "type": "number",
          "readOnly": true
        },
        "ProcessPercentage": {
          "format": "double",
          "description": "Processed percentage",
          "type": "number",
          "readOnly": true
        },
        "ElapsedSeconds": {
          "format": "double",
          "description": "Elapsed time in seconds",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ElasticSearchRequest": {
      "description": "Raw ElasticSearch request",
      "type": "object",
      "properties": {
        "HttpMethod": {
          "description": "The HTTP method.",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "HEAD"
          ],
          "type": "string",
          "x-enumType": "HttpMethod"
        },
        "RelativePath": {
          "description": "The request relative path.",
          "type": "string"
        },
        "Payload": {
          "description": "The request payload",
          "type": "string"
        }
      }
    },
    "SearchEngineHealthStatus": {
      "description": "Elastic Search Availability Status",
      "type": "object",
      "properties": {
        "IsAvailable": {
          "description": "Indicates if Elastic Search is available",
          "type": "boolean"
        }
      }
    },
    "SearchEngineConfiguration": {
      "description": "ElasticSearchSettingsConfiguration",
      "type": "object",
      "properties": {
        "DisableHttps": {
          "description": "Disable Https",
          "type": "boolean"
        },
        "SniffOnStartup": {
          "description": "Sniff on startup",
          "type": "boolean"
        },
        "MaxExternalSearchWindow": {
          "format": "int32",
          "description": "Max external search window",
          "type": "integer"
        },
        "SniffOnConnectionFault": {
          "description": "Sniff on connection fault",
          "type": "boolean"
        },
        "SniffLifeSpan": {
          "description": "Sniff life span",
          "type": "string"
        },
        "SyncInterval": {
          "format": "int32",
          "description": "Sync interval",
          "type": "integer"
        },
        "UseRawFieldsForStringAggregations": {
          "description": "Use raw fields for string aggregations",
          "type": "boolean"
        },
        "NodeUris": {
          "description": "NodeUris",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Port": {
          "format": "int32",
          "description": "Port",
          "type": "integer"
        },
        "UseAsynchronousOperations": {
          "description": "Determines whether ElasticSearch should do update/delete operations asynchronously",
          "type": "boolean"
        },
        "EnableElasticSearchDataConsistency": {
          "description": "Determines whether Elastic Search Data Consistency (MC-54771) is Enable.",
          "type": "boolean"
        }
      }
    },
    "ElasticSearchStats": {
      "description": "ElasticSearch Health and Status",
      "type": "object",
      "properties": {
        "Version": {
          "description": "ElasticSearch Version",
          "type": "string"
        },
        "Name": {
          "description": "Cluster Name",
          "type": "string"
        },
        "Health": {
          "description": "Health (Color)",
          "enum": [
            "Red",
            "Yellow",
            "Green"
          ],
          "type": "string",
          "x-enumType": "ElasticSearchHealth"
        },
        "NodeHealth": {
          "description": "The cluster node stats",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeHealth"
          }
        },
        "IndiceHealth": {
          "description": "The cluster indicies stats",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndiceHealth"
          }
        }
      }
    },
    "NodeHealth": {
      "description": "The Node Health",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of Node",
          "type": "string"
        },
        "Status": {
          "description": "Node Status",
          "enum": [
            "Offline",
            "Online"
          ],
          "type": "string",
          "x-enumType": "NodeStatus"
        },
        "FileSystemSizeBytes": {
          "format": "int64",
          "description": "Size of disk on node",
          "type": "integer"
        },
        "HeapUsedSizeBytes": {
          "format": "int64",
          "description": "Amount of Heap Used",
          "type": "integer"
        },
        "DocumentCount": {
          "format": "int32",
          "description": "Number of docs across all indices on node",
          "type": "integer"
        },
        "ServiceTimeMean": {
          "description": "Mean time to perform search (in milliseconds)",
          "type": "string"
        },
        "ResponseTimeMean": {
          "description": "Mean time for round trip (in milliseconds)",
          "type": "string"
        },
        "UpTime": {
          "description": "Node Uptime (in minutes)",
          "type": "string"
        }
      }
    },
    "IndiceHealth": {
      "description": "Indice Health",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Indice Name",
          "type": "string"
        },
        "DataSizeBytes": {
          "format": "int64",
          "description": "Size of the search data in indice",
          "type": "integer"
        },
        "DocumentCount": {
          "format": "int32",
          "description": "Number of docs in indice",
          "type": "integer"
        },
        "Health": {
          "description": "The health of the indice (Color)",
          "enum": [
            "Red",
            "Yellow",
            "Green"
          ],
          "type": "string",
          "x-enumType": "ElasticSearchHealth"
        }
      }
    },
    "PermissionTree": {
      "description": "Permission tree",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets the name.",
          "type": "string"
        },
        "RootNode": {
          "$ref": "#/definitions/PermissionTreeNode",
          "description": "Gets the root node."
        },
        "RoleType": {
          "description": "Gets the security role for the current tree.",
          "enum": [
            "Any",
            "SystemAdministrator",
            "DeviceOwner"
          ],
          "type": "string",
          "x-enumType": "RoleType"
        },
        "AssetType": {
          "description": "Gets or sets the type of the asset for which this permission tree is built. Set to NULL if tree is asset-less.",
          "enum": [
            "Device",
            "DeviceGroup",
            "CatalogueItem"
          ],
          "type": "string",
          "x-enumType": "AssetType"
        }
      }
    },
    "PermissionTreeNode": {
      "description": "Permission tree node",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets the name.",
          "type": "string"
        },
        "Permission": {
          "description": "Gets or sets the permission.",
          "type": "string"
        },
        "ChildNodes": {
          "description": "Gets the parent node.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionTreeNode"
          }
        }
      }
    },
    "CheckUserAccessResponse": {
      "description": "Response containing information which tells if current user has access or not a given feature/asset",
      "type": "object",
      "properties": {
        "IsAllowed": {
          "description": "Indicates if permission is allowed",
          "type": "boolean"
        }
      }
    },
    "UserRightDetails": {
      "description": "The user right details",
      "type": "object",
      "properties": {
        "Permission": {
          "description": "Gets or sets the permission.",
          "type": "string"
        },
        "IsAllowed": {
          "description": "Indicates if permission is allowed",
          "type": "boolean"
        },
        "InheritsFrom": {
          "description": "Parent user groups that impacted the value of IsAllowed or NULL if it is not inherited (own right)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRightParentGroup"
          }
        },
        "Role": {
          "description": "Security role under which the right is given",
          "enum": [
            "Any",
            "SystemAdministrator",
            "DeviceOwner"
          ],
          "type": "string",
          "x-enumType": "RoleType"
        },
        "Asset": {
          "$ref": "#/definitions/Asset",
          "description": "Optional asset for which right is given"
        }
      }
    },
    "UserRightParentGroup": {
      "description": "Parent user group info that impacted the security right.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsAllowed": {
          "description": "Gets or sets a value indicating whether this instance is allowed.",
          "type": "boolean"
        }
      }
    },
    "Asset": {
      "description": "Represent the security asset.",
      "type": "object",
      "properties": {
        "Type": {
          "description": "Gets or sets the type.",
          "enum": [
            "Device",
            "DeviceGroup",
            "CatalogueItem"
          ],
          "type": "string",
          "x-enumType": "AssetType"
        },
        "RefId": {
          "description": "Gets or sets the reference identifier.",
          "type": "string"
        }
      }
    },
    "InputRightsGroupItem": {
      "description": "InputRightsGroupItem",
      "type": "object",
      "properties": {
        "Permission": {
          "description": "Gets or sets the permission.",
          "type": "string"
        },
        "IsAllowed": {
          "description": "Indicates if permission is allowed",
          "type": "boolean"
        }
      }
    },
    "User": {
      "description": "Represents information about user, a person accessing MobiControl API",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The unique name of the user (the user account name)",
          "type": "string"
        },
        "DisplayName": {
          "description": "The UI-friendly name of the user",
          "type": "string"
        },
        "Kind": {
          "description": "The kind of the user",
          "enum": [
            "MobiControlUser",
            "LdapUser",
            "SsoUser"
          ],
          "type": "string",
          "x-enumType": "UserKind"
        },
        "IsEulaAccepted": {
          "description": "The value indicating whether the user has accepted End-User Licence Agreement (EULA)",
          "type": "boolean"
        },
        "EulaAcceptanceDate": {
          "format": "date-time",
          "description": "The date when the user accepted End-User Licence Agreement (EULA)",
          "type": "string"
        },
        "IsAccountLocked": {
          "description": "The value indicating whether the user account was locked",
          "type": "boolean"
        },
        "NumberOfFailedLogins": {
          "format": "int32",
          "description": "The number of times the user attempted to login with an invalid password since the last valid login attempt",
          "type": "integer"
        }
      }
    },
    "UserGroup": {
      "description": "Abstract base class for user groups",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of this group",
          "type": "string"
        },
        "GroupKind": {
          "description": "The kind of group this is",
          "enum": [
            "MobiControlGroup",
            "LdapGroup",
            "SsoGroup"
          ],
          "type": "string",
          "x-enumType": "UserGroupKind"
        }
      }
    },
    "UserLogEntry": {
      "description": "Contains information for a user log entry",
      "type": "object",
      "properties": {
        "Timestamp": {
          "format": "date-time",
          "description": "Log entry timestamp",
          "type": "string"
        },
        "EventSeverity": {
          "description": "Log entry severity",
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-enumType": "EventSeverity"
        },
        "Message": {
          "description": "Log entry message",
          "type": "string"
        },
        "UserName": {
          "description": "Log entry user name",
          "type": "string"
        },
        "EventId": {
          "format": "int32",
          "description": "Log entry event identifier",
          "type": "integer"
        },
        "EventCode": {
          "description": "Log entry event identifier",
          "type": "string"
        }
      }
    },
    "PasswordChange": {
      "description": "Password change parameters (for current user)",
      "type": "object",
      "properties": {
        "OldPassword": {
          "description": "Gets or sets old password",
          "type": "string"
        },
        "NewPassword": {
          "description": "Gets or sets new password (must meet all policy requirements which may have been set)",
          "type": "string"
        }
      }
    },
    "PasswordPolicy": {
      "description": "Stores the system's password policy for a particular user.",
      "type": "object",
      "properties": {
        "CanChangePassword": {
          "description": "Gets or sets a value indicating whether the user can change his password.",
          "type": "boolean"
        },
        "MinimumPasswordLength": {
          "format": "int32",
          "description": "Gets or sets the minimum length of the user's new password.  If there\r\n            is no length restriction, then this value will be null.",
          "type": "integer"
        },
        "PasswordsMustIncludeLowercase": {
          "description": "Gets or sets a value indicating whether the user's password must include\r\n            at least one lowercase letter.",
          "type": "boolean"
        },
        "PasswordsMustIncludeUppercase": {
          "description": "Gets or sets a value indicating whether the user's password must include\r\n            at least one uppercase letter.",
          "type": "boolean"
        },
        "PasswordsMustIncludeDigits": {
          "description": "Gets or sets a value indicating whether the user's password must include\r\n            at least one digit.",
          "type": "boolean"
        },
        "PasswordsMustIncludePunctuation": {
          "description": "Gets or sets a value indicating whether the user's password must include\r\n            at least one punctuation mark.",
          "type": "boolean"
        },
        "CanResetPassword": {
          "description": "Gets or sets a value indicating whether users can reset forgotten passwords.",
          "type": "boolean"
        },
        "EnforcePasswordComplexity": {
          "description": "Gets or sets a value indicating whether password complexity is enforced.",
          "type": "boolean"
        },
        "EnforcePasswordExpiration": {
          "description": "Gets or sets a value indicating whether enforce user to change password or not.",
          "type": "boolean"
        },
        "PasswordExpirationDays": {
          "format": "int32",
          "description": "Gets or sets password expiration days",
          "type": "integer"
        },
        "EnforcePasswordComplexityForAndroidAdmin": {
          "description": "Gets or sets a value indicating whether the service enforces password complexity for the Android Device Admin.",
          "type": "boolean"
        }
      }
    },
    "GetAccessControlPolicy": {
      "description": "Response data contract for get answer count requests.",
      "type": "object",
      "properties": {
        "AccessControlPolicy": {
          "$ref": "#/definitions/AccessControlPolicy",
          "description": "Gets or sets the Access Control Policy."
        },
        "PasswordPolicy": {
          "$ref": "#/definitions/PasswordPolicy",
          "description": "Gets or sets the Password Policy."
        }
      }
    },
    "AccessControlPolicy": {
      "description": "Represents the system access control policy.",
      "type": "object",
      "properties": {
        "MaximumFailedLogins": {
          "format": "int32",
          "description": "Gets or sets the maximum number of times a user can fail to log in.\r\n            If null, the user can try to log in an unlimited number of times.",
          "type": "integer"
        },
        "LimitUserToSingleConcurrentSession": {
          "description": "Limit the user to a single concurrent session.",
          "type": "boolean"
        }
      }
    },
    "SetAccessControlPolicy": {
      "description": "Request data contract for get answer count requests.",
      "type": "object",
      "properties": {
        "AccessControlPolicy": {
          "$ref": "#/definitions/AccessControlPolicy",
          "description": "Gets or sets the Access Control Policy."
        },
        "PasswordPolicy": {
          "$ref": "#/definitions/PasswordPolicy",
          "description": "Gets or sets the Password Policy."
        }
      }
    },
    "CatalogueItemUserRight": {
      "description": "Details an individula rights for a single catalogue item",
      "required": [
        "CanView",
        "CanEdit"
      ],
      "type": "object",
      "properties": {
        "CanView": {
          "description": "The user can view the catalogue item",
          "type": "boolean",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "CanEdit": {
          "description": "The user can edit the catalogue item",
          "type": "boolean",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "Right": {
      "description": "Right",
      "type": "object",
      "properties": {
        "PrincipalName": {
          "description": "The name of the principal to which this {Soti.MobiControl.Contracts.PublicApi.Right} belongs",
          "type": "string"
        },
        "PrincipalType": {
          "description": "Whether the principal for this right is a User or a Group",
          "enum": [
            "User",
            "Group",
            "AdUser",
            "AdGroup",
            "IdpUser",
            "IdpGroup"
          ],
          "type": "string",
          "x-enumType": "RightPrincipalType"
        },
        "CanView": {
          "description": "View right",
          "type": "boolean"
        },
        "CanManage": {
          "description": "Manage right",
          "type": "boolean"
        }
      }
    },
    "AssetRights": {
      "description": "Access rights for an asset",
      "type": "object",
      "properties": {
        "AssetRightsKind": {
          "description": "The kind of the asset rights.",
          "enum": [
            "NotSpecified",
            "UserAssetRights",
            "GroupAssetRights"
          ],
          "type": "string",
          "x-enumType": "AssetRightsKind"
        },
        "AccessRights": {
          "description": "Collection of access rights",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessRight"
          }
        }
      }
    },
    "AccessRight": {
      "description": "Access right",
      "type": "object",
      "properties": {
        "Permission": {
          "description": "Permission name",
          "type": "string"
        },
        "IsAllowed": {
          "description": "Indicates whether permission is allowed or not",
          "type": "boolean"
        }
      }
    },
    "UserAssetRights": {
      "description": "Asset access rights defined for a user",
      "type": "object",
      "properties": {
        "UserName": {
          "description": "The name of the user",
          "type": "string"
        },
        "UserKind": {
          "description": "The kind of the user.",
          "enum": [
            "MobiControlUser",
            "LdapUser",
            "SsoUser"
          ],
          "type": "string",
          "x-enumType": "UserKind"
        },
        "AssetRightsKind": {
          "description": "The kind of the asset rights.",
          "enum": [
            "NotSpecified",
            "UserAssetRights",
            "GroupAssetRights"
          ],
          "type": "string",
          "x-enumType": "AssetRightsKind"
        },
        "AccessRights": {
          "description": "Collection of access rights",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessRight"
          }
        }
      }
    },
    "EndpointSecuritySettings": {
      "description": "Endpoint Security Settings",
      "type": "object",
      "properties": {
        "ExternalAuthenticationType": {
          "description": "Gets or Sets the authentication type used for external authentication.",
          "enum": [
            "DirectoryService",
            "IdentityProvider"
          ],
          "type": "string",
          "x-enumType": "ExternalAuthenticationType"
        },
        "ReferenceId": {
          "description": "Gets or Sets the unique identifier for directory service or identity provider",
          "type": "string"
        }
      }
    },
    "AuthenticationSettings": {
      "description": "Request data contract for set authorization connection.",
      "type": "object",
      "properties": {
        "Mode": {
          "description": "Gets or sets id.",
          "enum": [
            "MobiControl",
            "IdentityProvider",
            "SotiIdentity"
          ],
          "type": "string",
          "x-enumType": "SecurityAuthenticationMode"
        },
        "DirectoryServiceReferences": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IdentityProviderReference": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Servers": {
      "description": "Holds both lists of Deployment and Management Servers",
      "type": "object",
      "properties": {
        "ProductVersion": {
          "description": "MobiControl Version",
          "type": "string"
        },
        "ProductVersionBuild": {
          "description": "MobiControl Version build number",
          "type": "string"
        },
        "DeploymentServers": {
          "description": "List of Deployment servers used by client",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentServer"
          }
        },
        "ManagementServers": {
          "description": "List of Management servers used by client",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagementServer"
          }
        },
        "SOTIAssistServer": {
          "$ref": "#/definitions/SOTIAssistServer",
          "description": "HelpDesk Server - will be null if not available"
        },
        "SystemCertificates": {
          "description": "System certificates used by MobiControl",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Certificate"
          }
        }
      }
    },
    "DeploymentServer": {
      "description": "Represents a base class for Management/Deployment Servers",
      "type": "object",
      "properties": {
        "IsConnected": {
          "description": "Value indicating whether the management service is\r\n            currently connected to this server.",
          "type": "boolean"
        },
        "PrimaryManagementAddress": {
          "description": "The server's management address, including port.",
          "type": "string"
        },
        "SecondaryManagementAddress": {
          "description": "The server's secondary management address.",
          "type": "string"
        },
        "PrimaryAgentAddress": {
          "description": "The server's primary agent address, including port.",
          "type": "string"
        },
        "SecondaryAgentAddress": {
          "description": "The server's secondary agent address, including port.",
          "type": "string"
        },
        "PulseTimeout": {
          "format": "int32",
          "description": "The number of seconds in between test messages from this server",
          "type": "integer"
        },
        "RuleReload": {
          "format": "int32",
          "description": "The number of minutes in between rule changes",
          "type": "integer"
        },
        "ScheduleInterval": {
          "format": "int32",
          "description": "The number of minutes in between schedule changes",
          "type": "integer"
        },
        "MinThreads": {
          "format": "int32",
          "description": "The minimum number of threads on the server.",
          "type": "integer"
        },
        "MaxThreads": {
          "format": "int32",
          "description": "The maximum number of threads supported by the server.",
          "type": "integer"
        },
        "MaxBurstThreads": {
          "format": "int32",
          "description": "The maximum number of service threads based on Server Configurations. \r\n            This value is 256 times the amount of processor cores available on the Deployment Server.",
          "type": "integer"
        },
        "PulseWaitInterval": {
          "format": "int32",
          "description": "The number of seconds in between waiting for reply test message.",
          "type": "integer"
        },
        "ConnectedDeviceCount": {
          "format": "int32",
          "description": "Gets or sets the number of connected devices.",
          "type": "integer"
        },
        "ConnectedManagerCount": {
          "format": "int32",
          "description": "The number of connected managers.",
          "type": "integer"
        },
        "MsgQueueLength": {
          "format": "int32",
          "description": "The message queue length.",
          "type": "integer"
        },
        "CurrentThreadCount": {
          "format": "int32",
          "description": "The current number of worker threads.",
          "type": "integer"
        },
        "DeviceManagementAddress": {
          "description": "The Device management address.",
          "type": "string"
        },
        "Certificate": {
          "$ref": "#/definitions/Certificate",
          "description": "The certificate used by the server."
        },
        "Name": {
          "description": "The server's name.",
          "type": "string"
        },
        "Status": {
          "description": "The server's current status.",
          "enum": [
            "Stopped",
            "Started",
            "Disabled",
            "Unlicensed",
            "Deleted",
            "StartedButNotRegistered",
            "Offline",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ServerStatus"
        }
      }
    },
    "ManagementServer": {
      "description": "Management Server REST Api model",
      "type": "object",
      "properties": {
        "Fqdn": {
          "description": "The server's fully qualified domain name.",
          "type": "string"
        },
        "PortNumber": {
          "format": "int32",
          "description": "The server's port number.",
          "type": "integer"
        },
        "Description": {
          "description": "The server description.",
          "type": "string"
        },
        "StatusTime": {
          "format": "date-time",
          "description": "The server status time.",
          "type": "string"
        },
        "MacAddress": {
          "description": "The server's MAC address.",
          "type": "string"
        },
        "SOTIAssistServerURLOverride": {
          "description": "Override for default Assist URL",
          "type": "string"
        },
        "TotalConsoleUsers": {
          "format": "int32",
          "description": "The total number of console users on the server.",
          "type": "integer"
        },
        "Name": {
          "description": "The server's name.",
          "type": "string"
        },
        "Status": {
          "description": "The server's current status.",
          "enum": [
            "Stopped",
            "Started",
            "Disabled",
            "Unlicensed",
            "Deleted",
            "StartedButNotRegistered",
            "Offline",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ServerStatus"
        }
      }
    },
    "SOTIAssistServer": {
      "description": "SOTIAssist Server",
      "type": "object",
      "properties": {
        "ServerUrl": {
          "description": "HelpDesk Server Url",
          "type": "string"
        },
        "RemoteControlUri": {
          "description": "Remote Control Uri",
          "type": "string"
        },
        "Name": {
          "description": "The server's name.",
          "type": "string"
        },
        "Status": {
          "description": "The server's current status.",
          "enum": [
            "Stopped",
            "Started",
            "Disabled",
            "Unlicensed",
            "Deleted",
            "StartedButNotRegistered",
            "Offline",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ServerStatus"
        }
      }
    },
    "Certificate": {
      "description": "",
      "type": "object",
      "properties": {
        "UsageType": {
          "description": "",
          "enum": [
            "None",
            "MobiControlRoot",
            "MobiControlServer",
            "MobiControlManager",
            "MobiControlIntermediate",
            "MobiControlProfileSigning",
            "MobiControlCloudLink",
            "MobiControlPrinterAdministrationClient",
            "MobiControlOAuthAuthorizationServer",
            "MobiControlOAuthResourceServer",
            "MobiControlIdp",
            "MobiControlIdpClient",
            "MobiControlSearchService",
            "MobiControlXtHub",
            "MobiControlAPNS",
            "ManagementServerDSE",
            "EnterpriseRoot",
            "EnterpriseServer",
            "EnterpriseManager",
            "EnterpriseProfileSigning",
            "EnterprisePrinterAdministrationClient",
            "TrustedRoot",
            "TrustedServer",
            "TrustedManager"
          ],
          "type": "string",
          "x-enumType": "SystemCertificateType"
        },
        "SubjectName": {
          "description": "",
          "type": "string"
        },
        "CommonName": {
          "description": "",
          "type": "string"
        },
        "IssuerName": {
          "description": "",
          "type": "string"
        },
        "NotBeforeDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "NotAfterDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "Thumbprint": {
          "description": "",
          "type": "string"
        }
      }
    },
    "DeploymentServerHealth": {
      "description": "DeploymentServer Health",
      "type": "object",
      "properties": {
        "Name": {
          "description": "DS name",
          "type": "string"
        },
        "Status": {
          "description": "Stopped, started, etc ...",
          "enum": [
            "Stopped",
            "Started",
            "Disabled",
            "Unlicensed",
            "Deleted",
            "StartedButNotRegistered",
            "Offline",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ServerStatus"
        },
        "ConnectedDeviceCount": {
          "format": "int32",
          "description": "Count of connected devices",
          "type": "integer"
        },
        "QueueLength": {
          "format": "int32",
          "description": "Sum of items in the low, medium, high queues",
          "type": "integer"
        }
      }
    },
    "DeploymentServerHealthDetails": {
      "description": "DeploymentServerHealthDetails",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Status": {
          "description": "Stopped, started, etc ...",
          "enum": [
            "Stopped",
            "Started",
            "Disabled",
            "Unlicensed",
            "Deleted",
            "StartedButNotRegistered",
            "Offline",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ServerStatus"
        },
        "PrimaryDeviceAgentAddress": {
          "description": "Device Agent Primary Address",
          "type": "string"
        },
        "SecondaryDeviceAgentAddress": {
          "description": "Device Agent Secondary Address",
          "type": "string"
        },
        "PrimaryManagementAddress": {
          "description": "Management Primary Address",
          "type": "string"
        },
        "SecondaryManagementAddress": {
          "description": "Management Secondary Address",
          "type": "string"
        },
        "DeviceCount": {
          "format": "int32",
          "description": "Connected Devices",
          "type": "integer"
        },
        "QueueLength": {
          "format": "int32",
          "description": "Length of queues (High, Medium, Low Priority )",
          "type": "integer"
        },
        "UpTime": {
          "description": "Service UpTime",
          "type": "string"
        },
        "TestMessageFrequency": {
          "description": "Test message frequency in Seconds",
          "type": "string"
        },
        "TestMessageWaitForReply": {
          "description": "Wait For Reply",
          "type": "string"
        },
        "LogServerActivity": {
          "description": "Log Server Activity",
          "type": "boolean"
        },
        "ThreadCount": {
          "format": "int32",
          "description": "Threads",
          "type": "integer"
        },
        "MinThreads": {
          "format": "int32",
          "description": "Min Threads",
          "type": "integer"
        },
        "MaxThreads": {
          "format": "int32",
          "description": "Max Threads",
          "type": "integer"
        },
        "MaxBurstThreads": {
          "format": "int32",
          "description": "Max Burst Threads",
          "type": "integer"
        },
        "RuleReload": {
          "description": "Rule Reload Frequency",
          "type": "string"
        },
        "DeviceScheduleChanges": {
          "description": "Device Schedule Changes",
          "type": "string"
        },
        "DbPingLast": {
          "description": "Database Ping Last Time",
          "type": "string"
        },
        "DbPingMin": {
          "description": "Database Ping Min Time",
          "type": "string"
        },
        "DbPingMax": {
          "description": "Database Ping Max Time",
          "type": "string"
        }
      }
    },
    "SystemLogLevel": {
      "description": "Contains information for system Log levels",
      "type": "object",
      "properties": {
        "ManagementService": {
          "description": "Gets or sets the current level of the management service debug stream.",
          "enum": [
            "Off",
            "Error",
            "Warning",
            "Info",
            "Verbose"
          ],
          "type": "string",
          "x-enumType": "TraceLevel"
        },
        "DeploymentServer": {
          "description": "Gets or sets the current level of the deployment server debug stream.",
          "enum": [
            "Off",
            "Error",
            "Warning",
            "Info",
            "Verbose"
          ],
          "type": "string",
          "x-enumType": "TraceLevel"
        },
        "Database": {
          "description": "Gets or sets the current level of the database debug stream.",
          "enum": [
            "Off",
            "Error",
            "Warning",
            "Info",
            "Verbose"
          ],
          "type": "string",
          "x-enumType": "TraceLevel"
        },
        "AccessControl": {
          "description": "Gets or sets the current level of the access control debug stream.",
          "enum": [
            "Off",
            "Error",
            "Warning",
            "Info",
            "Verbose"
          ],
          "type": "string",
          "x-enumType": "TraceLevel"
        },
        "Client": {
          "description": "Gets or sets the current level of the web request debug stream.",
          "enum": [
            "Off",
            "Error",
            "Warning",
            "Info",
            "Verbose"
          ],
          "type": "string",
          "x-enumType": "TraceLevel"
        },
        "WebConsole": {
          "description": "Gets or sets the current level of the web console debug stream.",
          "enum": [
            "Off",
            "Error",
            "Warning",
            "Info",
            "Verbose"
          ],
          "type": "string",
          "x-enumType": "TraceLevel"
        }
      }
    },
    "ManagementServerHealth": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the MS",
          "type": "string"
        },
        "FullName": {
          "description": "Full name of the MS",
          "type": "string"
        },
        "Status": {
          "description": "Status of the MS",
          "enum": [
            "Stopped",
            "Started",
            "Disabled",
            "Unlicensed",
            "Deleted",
            "StartedButNotRegistered",
            "Offline",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ServerStatus"
        },
        "ConsoleUserCount": {
          "format": "int32",
          "description": "Total number of current active console users",
          "type": "integer"
        }
      }
    },
    "ManagementServerHealthDetails": {
      "description": "ManagementServerHealthDetails",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "FullName": {
          "description": "Full name of the MS",
          "type": "string"
        },
        "Status": {
          "description": "Stopped, started, etc ...",
          "enum": [
            "Stopped",
            "Started",
            "Disabled",
            "Unlicensed",
            "Deleted",
            "StartedButNotRegistered",
            "Offline",
            "Unknown"
          ],
          "type": "string",
          "x-enumType": "ServerStatus"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        },
        "ConnectedUserCount": {
          "format": "int32",
          "description": "Connected users",
          "type": "integer"
        },
        "StatusTime": {
          "format": "date-time",
          "description": "Service Status Time",
          "type": "string"
        },
        "ConnectedUsers": {
          "description": "ConnectedUsers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedUser"
          }
        }
      }
    },
    "ConnectedUser": {
      "description": "ConnectedUser",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Address": {
          "description": "Address",
          "type": "string"
        }
      }
    },
    "SqlServerHealth": {
      "description": "Sql Server Health Information",
      "type": "object",
      "properties": {
        "ProductVersion": {
          "description": "Version of SQL Server",
          "type": "string"
        },
        "ProductLevel": {
          "description": "Product Level of SQL Server",
          "type": "string"
        },
        "ProductEdition": {
          "description": "Edition of SQL Server",
          "type": "string"
        },
        "ServerName": {
          "description": "Name of server where SQL is hosted",
          "type": "string"
        },
        "HasViewServerState": {
          "description": "Was file info available for databases",
          "type": "boolean"
        },
        "Databases": {
          "description": "List of pertinent database health info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DbHealth"
          }
        }
      }
    },
    "DbHealth": {
      "description": "Database Health Info",
      "type": "object",
      "properties": {
        "DatabaseName": {
          "description": "Name of Database",
          "type": "string"
        },
        "DatabaseFileSizeBytes": {
          "format": "int64",
          "description": "Size of the Database Data File",
          "type": "integer"
        },
        "AvailableSpaceBytes": {
          "format": "int64",
          "description": "Free space available in DB or on drive",
          "type": "integer"
        },
        "DriveName": {
          "description": "Drive where Database Data File resides",
          "type": "string"
        }
      }
    },
    "SmtpConnection": {
      "required": [
        "Host",
        "Name"
      ],
      "type": "object",
      "properties": {
        "Authentication": {
          "enum": [
            "Anonymous",
            "Basic",
            "Ntlm",
            "Digest",
            "Kerberos",
            "Negotiate"
          ],
          "type": "string",
          "x-enumType": "AuthenticationMode"
        },
        "Host": {
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Name": {
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Password": {
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer",
          "x-validators": [
            {
              "type": "rangeValidator",
              "min": 1,
              "max": 65535
            }
          ]
        },
        "SenderEmail": {
          "type": "string"
        },
        "SenderName": {
          "type": "string"
        },
        "Tls": {
          "type": "boolean"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "SmtpConnectionSummary": {
      "required": [
        "Host",
        "Name"
      ],
      "type": "object",
      "properties": {
        "ReferenceId": {
          "type": "string"
        },
        "Authentication": {
          "enum": [
            "Anonymous",
            "Basic",
            "Ntlm",
            "Digest",
            "Kerberos",
            "Negotiate"
          ],
          "type": "string",
          "x-enumType": "AuthenticationMode"
        },
        "Host": {
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Name": {
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Password": {
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer",
          "x-validators": [
            {
              "type": "rangeValidator",
              "min": 1,
              "max": 65535
            }
          ]
        },
        "SenderEmail": {
          "type": "string"
        },
        "SenderName": {
          "type": "string"
        },
        "Tls": {
          "type": "boolean"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "TestSmtpConnection": {
      "required": [
        "Type",
        "Connection",
        "Message"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "TestConnection"
          ],
          "type": "string",
          "x-enumType": "SmtpActionTypes",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "ReferenceId": {
          "type": "string"
        },
        "Connection": {
          "$ref": "#/definitions/SmtpConnection",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Message": {
          "$ref": "#/definitions/EmailMessage",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "EmailMessage": {
      "required": [
        "Recipients"
      ],
      "type": "object",
      "properties": {
        "Priority": {
          "enum": [
            "Low",
            "Normal",
            "High"
          ],
          "type": "string",
          "x-enumType": "EmailPriority"
        },
        "Recipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailTarget"
          },
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Subject": {
          "type": "string"
        },
        "TextBody": {
          "type": "string"
        }
      }
    },
    "EmailTarget": {
      "required": [
        "Email"
      ],
      "type": "object",
      "properties": {
        "AddresseeType": {
          "enum": [
            "To",
            "CarbonCopy",
            "BlindCarbonCopy"
          ],
          "type": "string",
          "x-enumType": "EmailAddresseeType"
        },
        "Email": {
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        }
      }
    },
    "SotiAssistConfiguration": {
      "description": "SOTI Assist Configuration",
      "type": "object",
      "properties": {
        "URI": {
          "description": "SOTI Assist URI",
          "type": "string"
        }
      }
    },
    "SotiConnectConfiguration": {
      "description": "SOTI Connect Configuration",
      "type": "object",
      "properties": {
        "URI": {
          "description": "SOTI Conenct URI",
          "type": "string"
        }
      }
    },
    "SotiSnapConfiguration": {
      "description": "SOTI Snap Configuration",
      "type": "object",
      "properties": {
        "URI": {
          "description": "SOTI Snap URI",
          "type": "string"
        }
      }
    },
    "SyslogConfiguration": {
      "description": "Syslog configuration",
      "required": [
        "Host"
      ],
      "type": "object",
      "properties": {
        "IsEnabled": {
          "description": "Indicating whether the System Configuration is enabled",
          "type": "boolean"
        },
        "Host": {
          "description": "The host value (DNS name or IP address)",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "NetworkProtocol": {
          "description": "Network protocol (Udp or Tcp)",
          "enum": [
            "Udp",
            "Tcp",
            "SecureTcp"
          ],
          "type": "string",
          "x-enumType": "NetworkProtocol"
        },
        "MessageFormat": {
          "description": "Syslog message format",
          "enum": [
            "RFC3164",
            "RFC5424"
          ],
          "type": "string",
          "x-enumType": "MessageFormat"
        },
        "Port": {
          "format": "int32",
          "description": "Port number",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer",
          "x-validators": [
            {
              "type": "rangeValidator",
              "min": 1,
              "max": 65535
            }
          ]
        },
        "MessageTemplate": {
          "description": "Message template format",
          "maxLength": 1024,
          "minLength": 0,
          "type": "string",
          "x-validators": [
            {
              "type": "stringLengthValidator",
              "min": 0,
              "max": 1024
            }
          ]
        }
      }
    },
    "SyslogConfigurationTest": {
      "description": "Syslog Configuration test contract",
      "type": "object",
      "properties": {
        "SyslogConfiguration": {
          "$ref": "#/definitions/SyslogConfiguration",
          "description": "Syslog Configuration"
        },
        "Message": {
          "description": "Test message",
          "type": "string"
        },
        "Success": {
          "description": "The test status",
          "type": "boolean"
        },
        "ExecutedOn": {
          "format": "date-time",
          "description": "The tested time",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "ProxySetting": {
      "description": "Represents global proxy configuration",
      "required": [
        "Address",
        "IsEnabled",
        "IsAuthenticationRequired"
      ],
      "type": "object",
      "properties": {
        "Address": {
          "description": "The global proxy address",
          "type": "string",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "Port": {
          "format": "int32",
          "description": "The global proxy port",
          "type": "integer"
        },
        "Exceptions": {
          "description": "The global proxy exception list",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsEnabled": {
          "description": "The value indicating whether the global proxy is enabled",
          "type": "boolean",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "IsAuthenticationRequired": {
          "description": "The value indicating whether the global proxy requires authentication",
          "type": "boolean",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "UserName": {
          "description": "The user name",
          "type": "string"
        },
        "Password": {
          "description": "The password",
          "type": "string"
        }
      }
    },
    "CloudLinkAgentSetting": {
      "description": "Represents CloudLink settings",
      "type": "object",
      "properties": {
        "CompatibleVersion": {
          "description": "The compatible CloudLink version",
          "type": "string"
        },
        "InstallerUri": {
          "description": "The URI for CloudLink installer",
          "type": "string"
        }
      }
    },
    "SystemHealthSettingsResponse": {
      "description": "System Health Settings Request",
      "type": "object",
      "properties": {
        "CollectSystemData": {
          "description": "Overall switch that turns off putting data to ElasticSearch",
          "type": "boolean"
        },
        "DataCollectionRate": {
          "description": "How often should metric data be captured and put into ElasticSearch",
          "type": "string"
        },
        "Reservoir": {
          "description": "Size of reservoir in time",
          "type": "string"
        },
        "InitialLoadMechanismModel": {
          "description": "Which mechanism to use to load initial data onto advanced analytics graphing page",
          "enum": [
            "FullLoad",
            "OptimizedStaged",
            "OptimizedMultiStaged",
            "OptimizedTwoStaged"
          ],
          "type": "string",
          "x-enumType": "InitialLoadMechanism"
        },
        "Monitor": {
          "description": "Show monitoring debug data client side",
          "type": "boolean"
        }
      }
    },
    "SystemHealthSettingsRequest": {
      "description": "System Health Settings Request",
      "required": [
        "CollectSystemData"
      ],
      "type": "object",
      "properties": {
        "CollectSystemData": {
          "description": "Enable or disable the collection system data",
          "type": "boolean",
          "x-validators": [
            {
              "type": "requiredValidator"
            }
          ]
        },
        "DataCollectionRate": {
          "description": "The rate at which system metrics data will be collected.\r\n            <br />Format: hh:mm:ss\r\n            <br />Example 00:01:00 - one minute",
          "type": "string"
        }
      }
    },
    "WindowsCompanyHubTokenId": {
      "type": "object",
      "properties": {
        "TokenId": {
          "type": "string"
        }
      }
    },
    "WindowsCompanyHubTokenValidityInfo": {
      "type": "object",
      "properties": {
        "Date": {
          "format": "date-time",
          "type": "string"
        },
        "Expired": {
          "type": "boolean"
        }
      }
    },
    "WindowsCompanyHubSummary": {
      "type": "object",
      "properties": {
        "TokenId": {
          "type": "string"
        },
        "TokenFileName": {
          "type": "string"
        },
        "EnableHub": {
          "type": "boolean"
        },
        "TokenExpirationDate": {
          "format": "date-time",
          "type": "string"
        },
        "UseMobiControlGeneratedUri": {
          "type": "boolean"
        },
        "WindowsModernProductPackageReferenceId": {
          "type": "string"
        }
      }
    },
    "EnterpriseCompanyHubConfiguration": {
      "type": "object",
      "properties": {
        "ApplicationReferenceId": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        }
      }
    },
    "ServerSummary": {
      "type": "object",
      "properties": {
        "ServerAddress": {
          "type": "string"
        },
        "ServerLocation": {
          "enum": [
            "Default",
            "Custom"
          ],
          "type": "string",
          "x-enumType": "ServerLocation"
        }
      }
    },
    "ServerConfiguration": {
      "type": "object",
      "properties": {
        "ServerAddress": {
          "type": "string"
        }
      }
    },
    "WnsConfiguration": {
      "type": "object",
      "properties": {
        "AppId": {
          "type": "string"
        },
        "PFN": {
          "type": "string"
        },
        "ClientSecret": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        }
      }
    }
  },
  "tags": []
}
